{
	"id": 0,
	"name": "calendar-custom",
	"kind": 0,
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 815,
			"name": "\"src/App\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/ducnm/Desktop/Add-on/rc365/src/App.tsx",
			"children": [
				{
					"id": 816,
					"name": "App",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 817,
							"name": "App",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Element"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/App.tsx",
							"line": 6,
							"character": 12
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						816
					]
				}
			],
			"sources": [
				{
					"fileName": "src/App.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 818,
			"name": "\"src/App.test\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/ducnm/Desktop/Add-on/rc365/src/App.test.tsx",
			"sources": [
				{
					"fileName": "src/App.test.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 825,
			"name": "\"src/Component/Calender/CalenderInline\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/ducnm/Desktop/Add-on/rc365/src/Component/Calender/CalenderInline.tsx",
			"children": [
				{
					"id": 870,
					"name": "CalendarInline",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"typeParameter": [
						{
							"id": 908,
							"name": "SS",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 871,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 872,
									"name": "new CalendarInline",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 873,
											"name": "props",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 832,
												"name": "ICalendarInlineExampleProps"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 870,
										"name": "CalendarInline"
									},
									"overwrites": {
										"type": "reference",
										"name": "Component.__constructor"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 127,
									"character": 80
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Component.__constructor"
							}
						},
						{
							"id": 954,
							"name": "context",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\nShould be used with type annotation or static contextType.",
								"text": "```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n",
								"tags": [
									{
										"tag": "see",
										"text": "https://reactjs.org/docs/context.html\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 484,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 412,
								"name": "Component.context"
							}
						},
						{
							"id": 973,
							"name": "props",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 509,
									"character": 22
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 832,
												"name": "ICalendarInlineExampleProps"
											}
										],
										"name": "Readonly"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 974,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 975,
															"name": "children",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/react/index.d.ts",
																	"line": 509,
																	"character": 57
																}
															],
															"type": {
																"type": "reference",
																"name": "ReactNode"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																975
															]
														}
													],
													"sources": [
														{
															"fileName": "node_modules/@types/react/index.d.ts",
															"line": 509,
															"character": 47
														}
													]
												}
											}
										],
										"name": "Readonly"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 431,
								"name": "Component.props"
							}
						},
						{
							"id": 977,
							"name": "refs",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "deprecated",
										"text": "\nhttps://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 515,
									"character": 12
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 978,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 979,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 980,
													"name": "key",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "ReactInstance"
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/react/index.d.ts",
											"line": 515,
											"character": 13
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 435,
								"name": "Component.refs"
							}
						},
						{
							"id": 976,
							"name": "state",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 510,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Readonly"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 434,
								"name": "Component.state"
							}
						},
						{
							"id": 953,
							"name": "contextType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If set, `this.context` will be set at runtime to the current value of the given Context.",
								"text": "Usage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n",
								"tags": [
									{
										"tag": "see",
										"text": "https://reactjs.org/docs/context.html#classcontexttype\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 466,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Context"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 411,
								"name": "Component.contextType"
							}
						},
						{
							"id": 933,
							"name": "UNSAFE_componentWillMount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 934,
									"name": "UNSAFE_componentWillMount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
										"text": "This method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use componentDidMount or the constructor instead"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 395,
										"name": "DeprecatedLifecycle.UNSAFE_componentWillMount"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 710,
									"character": 33
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 395,
								"name": "DeprecatedLifecycle.UNSAFE_componentWillMount"
							}
						},
						{
							"id": 939,
							"name": "UNSAFE_componentWillReceiveProps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 940,
									"name": "UNSAFE_componentWillReceiveProps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
										"text": "Calling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use static getDerivedStateFromProps instead"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 941,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 832,
														"name": "ICalendarInlineExampleProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 942,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 741,
										"name": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 742,
									"character": 40
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 741,
								"name": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps"
							}
						},
						{
							"id": 948,
							"name": "UNSAFE_componentWillUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 949,
									"name": "UNSAFE_componentWillUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
										"text": "Note: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use getSnapshotBeforeUpdate instead"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 950,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 832,
														"name": "ICalendarInlineExampleProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 951,
											"name": "nextState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 952,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 406,
										"name": "DeprecatedLifecycle.UNSAFE_componentWillUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 770,
									"character": 34
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 406,
								"name": "DeprecatedLifecycle.UNSAFE_componentWillUpdate"
							}
						},
						{
							"id": 918,
							"name": "componentDidCatch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 919,
									"name": "componentDidCatch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount."
									},
									"parameters": [
										{
											"id": 920,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 921,
											"name": "errorInfo",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ErrorInfo"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 385,
										"name": "ComponentLifecycle.componentDidCatch"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 639,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 385,
								"name": "ComponentLifecycle.componentDidCatch"
							}
						},
						{
							"id": 909,
							"name": "componentDidMount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 910,
									"name": "componentDidMount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately after a component is mounted. Setting state here will trigger re-rendering."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 376,
										"name": "ComponentLifecycle.componentDidMount"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 618,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 376,
								"name": "ComponentLifecycle.componentDidMount"
							}
						},
						{
							"id": 926,
							"name": "componentDidUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 927,
									"name": "componentDidUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately after updating occurs. Not called for the initial render.",
										"text": "The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n"
									},
									"parameters": [
										{
											"id": 928,
											"name": "prevProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 832,
														"name": "ICalendarInlineExampleProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 929,
											"name": "prevState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 930,
											"name": "snapshot",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 908,
												"name": "SS"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 555,
										"name": "NewLifecycle.componentDidUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 681,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 555,
								"name": "NewLifecycle.componentDidUpdate"
							}
						},
						{
							"id": 931,
							"name": "componentWillMount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 932,
									"name": "componentWillMount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
										"text": "Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use componentDidMount or the constructor instead; will stop working in React 17"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 393,
										"name": "DeprecatedLifecycle.componentWillMount"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 696,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 393,
								"name": "DeprecatedLifecycle.componentWillMount"
							}
						},
						{
							"id": 935,
							"name": "componentWillReceiveProps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 936,
									"name": "componentWillReceiveProps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
										"text": "Calling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use static getDerivedStateFromProps instead; will stop working in React 17"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 937,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 832,
														"name": "ICalendarInlineExampleProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 938,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 397,
										"name": "DeprecatedLifecycle.componentWillReceiveProps"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 725,
									"character": 33
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 397,
								"name": "DeprecatedLifecycle.componentWillReceiveProps"
							}
						},
						{
							"id": 916,
							"name": "componentWillUnmount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 917,
									"name": "componentWillUnmount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 383,
										"name": "ComponentLifecycle.componentWillUnmount"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 634,
									"character": 28
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 383,
								"name": "ComponentLifecycle.componentWillUnmount"
							}
						},
						{
							"id": 943,
							"name": "componentWillUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 944,
									"name": "componentWillUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
										"text": "Note: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 945,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 832,
														"name": "ICalendarInlineExampleProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 946,
											"name": "nextState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 947,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 401,
										"name": "DeprecatedLifecycle.componentWillUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 755,
									"character": 27
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 401,
								"name": "DeprecatedLifecycle.componentWillUpdate"
							}
						},
						{
							"id": 968,
							"name": "forceUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 969,
									"name": "forceUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 970,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 971,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 972,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 426,
										"name": "Component.forceUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 501,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 426,
								"name": "Component.forceUpdate"
							}
						},
						{
							"id": 886,
							"name": "getMoreDate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 887,
									"name": "getMoreDate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 888,
											"name": "start",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										},
										{
											"id": 889,
											"name": "end",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reflection",
											"declaration": {
												"id": 890,
												"name": "__type",
												"kind": 65536,
												"kindString": "Type literal",
												"flags": {},
												"children": [
													{
														"id": 891,
														"name": "date",
														"kind": 32,
														"kindString": "Variable",
														"flags": {},
														"sources": [
															{
																"fileName": "src/Component/Calender/CalenderInline.tsx",
																"line": 251,
																"character": 21
															}
														],
														"type": {
															"type": "reference",
															"name": "Date"
														},
														"defaultValue": "new Date(dt)"
													}
												],
												"groups": [
													{
														"title": "Variables",
														"kind": 32,
														"children": [
															891
														]
													}
												]
											}
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 245,
									"character": 13
								}
							]
						},
						{
							"id": 922,
							"name": "getSnapshotBeforeUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 923,
									"name": "getSnapshotBeforeUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.",
										"text": "Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n"
									},
									"parameters": [
										{
											"id": 924,
											"name": "prevProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 832,
														"name": "ICalendarInlineExampleProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 925,
											"name": "prevState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Readonly"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "SS"
											},
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 389,
										"name": "NewLifecycle.getSnapshotBeforeUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 675,
									"character": 31
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 389,
								"name": "NewLifecycle.getSnapshotBeforeUpdate"
							}
						},
						{
							"id": 896,
							"name": "goNext",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 897,
									"name": "goNext",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 898,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 899,
													"name": "goNextSelectedDate",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "src/Component/Calender/CalenderInline.tsx",
															"line": 289,
															"character": 24
														}
													],
													"type": {
														"type": "reference",
														"name": "Date"
													},
													"defaultValue": "newSelectedDate"
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														899
													]
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 279,
									"character": 8
								}
							]
						},
						{
							"id": 892,
							"name": "goPrevious",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 893,
									"name": "goPrevious",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 894,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 895,
													"name": "goPreviousSelectedDate",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "src/Component/Calender/CalenderInline.tsx",
															"line": 275,
															"character": 28
														}
													],
													"type": {
														"type": "reference",
														"name": "Date"
													},
													"defaultValue": "newSelectedDate"
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														895
													]
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 256,
									"character": 12
								}
							]
						},
						{
							"id": 900,
							"name": "onDismiss",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 901,
									"name": "onDismiss",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 293,
									"character": 11
								}
							]
						},
						{
							"id": 904,
							"name": "onGetMode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 905,
									"name": "onGetMode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 305,
									"character": 11
								}
							]
						},
						{
							"id": 874,
							"name": "onHighLightClass",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 875,
									"name": "onHighLightClass",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 876,
											"name": "day",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IDayInfo"
											}
										},
										{
											"id": 877,
											"name": "rangeDate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 654,
												"name": "rangeDateExample"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 140,
									"character": 18
								}
							]
						},
						{
							"id": 878,
							"name": "onSelectDate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 879,
									"name": "onSelectDate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 880,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										},
										{
											"id": 881,
											"name": "dateRangeArray",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Date"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 178,
									"character": 14
								}
							]
						},
						{
							"id": 882,
							"name": "onSelectSingleDate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 883,
									"name": "onSelectSingleDate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 884,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										},
										{
											"id": 885,
											"name": "dateRangeArray",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Date"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 235,
									"character": 20
								}
							]
						},
						{
							"id": 906,
							"name": "render",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 907,
									"name": "render",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Element"
									},
									"overwrites": {
										"type": "reference",
										"name": "Component.render"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 313,
									"character": 8
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Component.render"
							}
						},
						{
							"id": 902,
							"name": "sentDate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 903,
									"name": "sentDate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 297,
									"character": 10
								}
							]
						},
						{
							"id": 955,
							"name": "setState",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 956,
									"name": "setState",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 957,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 958,
											"name": "state",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 959,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 960,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 961,
																			"name": "prevState",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "intrinsic",
																						"name": "any"
																					}
																				],
																				"name": "Readonly"
																			}
																		},
																		{
																			"id": 962,
																			"name": "props",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "reference",
																						"id": 832,
																						"name": "ICalendarInlineExampleProps"
																					}
																				],
																				"name": "Readonly"
																			}
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "intrinsic",
																				"name": "null"
																			},
																			{
																				"type": "unknown",
																				"name": "S"
																			},
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 963,
																					"name": "__type",
																					"kind": 65536,
																					"kindString": "Type literal",
																					"flags": {}
																				}
																			}
																		]
																	}
																}
															],
															"sources": [
																{
																	"fileName": "node_modules/@types/react/index.d.ts",
																	"line": 497,
																	"character": 18
																}
															]
														}
													},
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "null"
															},
															{
																"type": "unknown",
																"name": "S"
															},
															{
																"type": "reflection",
																"declaration": {
																	"id": 964,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {}
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 965,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 966,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 967,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 413,
										"name": "Component.setState"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 496,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 413,
								"name": "Component.setState"
							}
						},
						{
							"id": 911,
							"name": "shouldComponentUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 912,
									"name": "shouldComponentUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called to determine whether the change in props and state should trigger a re-render.",
										"text": "`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n"
									},
									"parameters": [
										{
											"id": 913,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 832,
														"name": "ICalendarInlineExampleProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 914,
											"name": "nextState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 915,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 378,
										"name": "ComponentLifecycle.shouldComponentUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 629,
									"character": 29
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 378,
								"name": "ComponentLifecycle.shouldComponentUpdate"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								871
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								954,
								973,
								977,
								976,
								953
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								933,
								939,
								948,
								918,
								909,
								926,
								931,
								935,
								916,
								943,
								968,
								886,
								922,
								896,
								892,
								900,
								904,
								874,
								878,
								882,
								906,
								902,
								955,
								911
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Component/Calender/CalenderInline.tsx",
							"line": 127,
							"character": 20
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"typeArguments": [
								{
									"type": "reference",
									"id": 832,
									"name": "ICalendarInlineExampleProps"
								},
								{
									"type": "intrinsic",
									"name": "any"
								}
							],
							"name": "Component"
						}
					]
				},
				{
					"id": 832,
					"name": "ICalendarInlineExampleProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 834,
							"name": "autoNavigateOnSelection",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 22,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 847,
							"name": "darkMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 36,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 846,
							"name": "firstDayOfWeek",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 35,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"name": "DayOfWeek"
							}
						},
						{
							"id": 848,
							"name": "getDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 37,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 836,
							"name": "highlightCurrentMonth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 25,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 837,
							"name": "highlightSelectedMonth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 26,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 838,
							"name": "isDayPickerVisible",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 27,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 833,
							"name": "isMonthPickerVisible",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 21,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 842,
							"name": "maxDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 31,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 841,
							"name": "minDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 30,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 849,
							"name": "multilingual",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 38,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 303,
								"name": "ICalendarStrings"
							}
						},
						{
							"id": 843,
							"name": "restrictedDates",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 32,
									"character": 17
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Date"
								}
							}
						},
						{
							"id": 835,
							"name": "showGoToToday",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 23,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 839,
							"name": "showMonthPickerAsOverlay",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 28,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 844,
							"name": "showSixWeeksByDefault",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 33,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 840,
							"name": "showWeekNumbers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 29,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 851,
							"name": "switchMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 40,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 850,
							"name": "userEvent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 39,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"id": 826,
								"name": "eventExamples"
							}
						},
						{
							"id": 845,
							"name": "workWeekDays",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 34,
									"character": 14
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "DayOfWeek"
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								834,
								847,
								846,
								848,
								836,
								837,
								838,
								833,
								842,
								841,
								849,
								843,
								835,
								839,
								844,
								840,
								851,
								850,
								845
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Component/Calender/CalenderInline.tsx",
							"line": 20,
							"character": 44
						}
					]
				},
				{
					"id": 863,
					"name": "ICalendarPropsFixed",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 869,
							"name": "calendarData",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 124,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 864,
							"name": "onHighLight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 123,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 865,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 866,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"parameters": [
														{
															"id": 867,
															"name": "day",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "reference",
																"name": "IDayInfo"
															}
														},
														{
															"id": 868,
															"name": "rangeDate",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "reference",
																"id": 654,
																"name": "rangeDateExample"
															}
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								869,
								864
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Component/Calender/CalenderInline.tsx",
							"line": 122,
							"character": 36
						}
					]
				},
				{
					"id": 826,
					"name": "eventExamples",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"indexSignature": [
						{
							"id": 827,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"parameters": [
								{
									"id": 828,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 829,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 830,
											"name": "date",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/Component/Calender/CalenderInline.tsx",
													"line": 17,
													"character": 25
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Date"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 831,
											"name": "event",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/Component/Calender/CalenderInline.tsx",
													"line": 17,
													"character": 47
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												830,
												831
											]
										}
									],
									"sources": [
										{
											"fileName": "src/Component/Calender/CalenderInline.tsx",
											"line": 17,
											"character": 18
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/Component/Calender/CalenderInline.tsx",
							"line": 16,
							"character": 23
						}
					]
				},
				{
					"id": 852,
					"name": "rangeDateExample",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 853,
							"name": "pickType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 114,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 854,
							"name": "rangeBetween",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 115,
									"character": 14
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reflection",
									"declaration": {
										"id": 855,
										"name": "__type",
										"kind": 65536,
										"kindString": "Type literal",
										"flags": {},
										"children": [
											{
												"id": 856,
												"name": "date",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/Component/Calender/CalenderInline.tsx",
														"line": 115,
														"character": 22
													}
												],
												"type": {
													"type": "reference",
													"name": "Date"
												}
											}
										],
										"groups": [
											{
												"title": "Variables",
												"kind": 32,
												"children": [
													856
												]
											}
										],
										"sources": [
											{
												"fileName": "src/Component/Calender/CalenderInline.tsx",
												"line": 115,
												"character": 15
											}
										]
									}
								}
							}
						},
						{
							"id": 857,
							"name": "selectedDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 116,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Date"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 858,
							"name": "selectedDateRange",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 117,
									"character": 19
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Date"
								}
							}
						},
						{
							"id": 859,
							"name": "userEvent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 119,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reflection",
									"declaration": {
										"id": 860,
										"name": "__type",
										"kind": 65536,
										"kindString": "Type literal",
										"flags": {},
										"children": [
											{
												"id": 861,
												"name": "date",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/Component/Calender/CalenderInline.tsx",
														"line": 119,
														"character": 19
													}
												],
												"type": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "reference",
															"name": "Date"
														}
													]
												}
											},
											{
												"id": 862,
												"name": "event",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/Component/Calender/CalenderInline.tsx",
														"line": 119,
														"character": 41
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										],
										"groups": [
											{
												"title": "Variables",
												"kind": 32,
												"children": [
													861,
													862
												]
											}
										],
										"sources": [
											{
												"fileName": "src/Component/Calender/CalenderInline.tsx",
												"line": 119,
												"character": 12
											}
										]
									}
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								853,
								854,
								857,
								858,
								859
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Component/Calender/CalenderInline.tsx",
							"line": 113,
							"character": 26
						}
					]
				},
				{
					"id": 998,
					"name": "dateTimeFormatterCallbacks",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isConst": true
					},
					"children": [
						{
							"id": 1007,
							"name": "formatDay",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 1008,
									"name": "formatDay",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1009,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 109,
									"character": 11
								}
							]
						},
						{
							"id": 999,
							"name": "formatMonthDayYear",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 1000,
									"name": "formatMonthDayYear",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1001,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										},
										{
											"id": 1002,
											"name": "strings",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 303,
												"name": "ICalendarStrings"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 101,
									"character": 20
								}
							]
						},
						{
							"id": 1003,
							"name": "formatMonthYear",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 1004,
									"name": "formatMonthYear",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1005,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										},
										{
											"id": 1006,
											"name": "strings",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 303,
												"name": "ICalendarStrings"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 107,
									"character": 17
								}
							]
						},
						{
							"id": 1010,
							"name": "formatYear",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 1011,
									"name": "formatYear",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1012,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 110,
									"character": 12
								}
							]
						}
					],
					"groups": [
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								1007,
								999,
								1003,
								1010
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Component/Calender/CalenderInline.tsx",
							"line": 100,
							"character": 32
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 981,
					"name": "dayPickerStrings",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isConst": true
					},
					"children": [
						{
							"id": 994,
							"name": "closeButtonAriaLabel",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 90,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Close\""
						},
						{
							"id": 984,
							"name": "days",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 72,
									"character": 6
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": "[\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n  ]"
						},
						{
							"id": 986,
							"name": "goToToday",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 82,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Go to today\""
						},
						{
							"id": 982,
							"name": "months",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 44,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": "[\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ]"
						},
						{
							"id": 989,
							"name": "nextMonthAriaLabel",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 85,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Next month\""
						},
						{
							"id": 991,
							"name": "nextYearAriaLabel",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 87,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Next year\""
						},
						{
							"id": 993,
							"name": "nextYearRangeAriaLabel",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 89,
									"character": 24
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Next year range\""
						},
						{
							"id": 988,
							"name": "prevMonthAriaLabel",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 84,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Previous month\""
						},
						{
							"id": 990,
							"name": "prevYearAriaLabel",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 86,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Previous year\""
						},
						{
							"id": 992,
							"name": "prevYearRangeAriaLabel",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 88,
									"character": 24
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Previous year range\""
						},
						{
							"id": 985,
							"name": "shortDays",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 81,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": "[\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"]"
						},
						{
							"id": 983,
							"name": "shortMonths",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 58,
									"character": 13
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": "[\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mar\",\r\n    \"Apr\",\r\n    \"May\",\r\n    \"Jun\",\r\n    \"Jul\",\r\n    \"Aug\",\r\n    \"Sep\",\r\n    \"Oct\",\r\n    \"Nov\",\r\n    \"Dec\",\r\n  ]"
						},
						{
							"id": 987,
							"name": "weekNumberFormatString",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 83,
									"character": 24
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Week number {0}\""
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								994,
								984,
								986,
								982,
								989,
								991,
								993,
								988,
								990,
								992,
								985,
								983,
								987
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Component/Calender/CalenderInline.tsx",
							"line": 43,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 995,
					"name": "divStyle",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isConst": true
					},
					"children": [
						{
							"id": 997,
							"name": "display",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 94,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"flex\""
						},
						{
							"id": 996,
							"name": "height",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Component/Calender/CalenderInline.tsx",
									"line": 93,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"auto\""
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								997,
								996
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Component/Calender/CalenderInline.tsx",
							"line": 92,
							"character": 14
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						870
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						832,
						863,
						826,
						852
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						998,
						981,
						995
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Component/Calender/CalenderInline.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 819,
			"name": "\"src/Component/Calender/CalenderStyle\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/ducnm/Desktop/Add-on/rc365/src/Component/Calender/CalenderStyle.ts",
			"children": [
				{
					"id": 820,
					"name": "CalenderDarkMode",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Component/Calender/CalenderStyle.ts",
							"line": 3,
							"character": 29
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "stringLiteral",
										"value": "div"
									},
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								],
								"name": "StyledComponentBase"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 821,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExported": true
									}
								}
							}
						]
					},
					"defaultValue": "styled.div.attrs((props): any => ({\r\n  className: \"dayPicker_4cbef05b\",\r\n}))`\r\n  .ms-DatePicker-wrap{\r\n    padding: ${(props) => !props.theme.showGoToToday && \"0\"};\r\n    margin:0;\r\n  }\r\n\r\n  .goToday_4cbef05b{\r\n    right: ${(props) => props.theme.showGoToToday && \"0\"};\r\n  } \r\n  .ms-DatePicker-goToday{\r\n    color:${(props) => props.theme.darkMode === \"dark\" && \"#ffffff\"};\r\n  };\r\n  box-sizing: border-box;\r\n  .ms-DatePicker-dayPicker,\r\n  .ms-DatePicker-frame,\r\n  .ms-DatePicker-holder{\r\n    background-color: ${(props) =>\r\n      props.theme.darkMode === \"dark\" ? \"rgb(27, 26, 25)\" : \"\"};\r\n      \r\n  }\r\n  .ms-DatePicker-frame, \r\n  .wrap_4cbef05b {\r\n    min-height: 190px;\r\n  }\r\n  th,\r\n  i {\r\n    color: ${(props) =>\r\n      props.theme.darkMode === \"dark\" ? \"#ffffff\" : \"#212121\"};\r\n  }\r\n  .weekday_4cbef05b {\r\n    cursor: default;\r\n  }\r\n  .ms-DatePicker-day-button {\r\n    cursor: pointer;\r\n  }\r\n  .ms-DatePicker-monthAndYear {\r\n    width: 100%;\r\n    text-align: left;\r\n    padding: 4px 5px;\r\n  }\r\n  .js-showYearPicker {\r\n    text-align: left;\r\n  }\r\n  .ms-DatePicker-holder {\r\n    box-shadow: 0px 3px 6px rgba(0, 0, 0, 0.161);\r\n    min-height: 210px;\r\n    height:auto;\r\n    padding: 12px;\r\n  }\r\n  .dayBackground_4cbef05b {\r\n    border-radius: 0;\r\n  }\r\n  .currentYear_4cbef05b{\r\n    padding 0 5px;\r\n  }\r\n  .monthAndYear_4cbef05b{\r\n    padding:0;\r\n  }\r\n  .monthOption_4cbef05b:hover,\r\n  .yearOption_4cbef05b:hover,\r\n  .currentDecade_4cbef05b:hover,\r\n  .currentYear_4cbef05b:hover,\r\n  .monthAndYear_4cbef05b:hover,\r\n  .nextMonth_4cbef05b:hover,\r\n  .prevMonth_4cbef05b:hover,\r\n  .prevYear_4cbef05b:hover, \r\n  .nextYear_4cbef05b:hover {\r\n    border-radius: 0;\r\n    background-color: ${(props) =>\r\n      props.theme.darkMode === \"dark\" ? \"#000000\" : \"#F4F4F4\"};\r\n    color: ${(props) =>\r\n      props.theme.darkMode === \"dark\" ? \"#ffffff\" : \"#212121\"} !important;\r\n  }\r\n  .ms-DatePicker-day--highlighted.dayIsHighlighted_4cbef05b {\r\n    background-color: ${(props) =>\r\n      props.theme.darkMode === \"dark\" ? \"#445b6c\" : \"#DEECF9\"};\r\n    color: ${(props) =>\r\n      props.theme.darkMode === \"dark\" ? \"#ffffff\" : \"#212121\"};\r\n    border-radius: 0;\r\n  }\r\n  .monthIsHighlighted_4cbef05b {\r\n    background-color: ${(props) =>\r\n      props.theme.darkMode === \"dark\" ? \"#445B6C\" : \"#DEECF9\"};\r\n  }\r\n  .headerToggleView_4cbef05b,\r\n  .monthOption_4cbef05b,\r\n  .monthAndYear_4cbef05b,\r\n  .yearOption_4cbef05b,\r\n  .ms-DatePicker-day--infocus,\r\n  .headerToggleView_4cbef05b:hover {\r\n    color: ${(props) =>\r\n      props.theme.darkMode === \"dark\" ? \"#ffffff\" : \"#212121\"};\r\n  }\r\n  .dayWrapper_4cbef05b:hover {\r\n    cursor: pointer;\r\n    color: ${(props) =>\r\n      props.theme.darkMode === \"dark\" ? \"#ffffff\" : \"#212121\"};\r\n    background-color: ${(props) =>\r\n      props.theme.darkMode === \"dark\" ? \"#000000\" : \"#DEECF9\"};\r\n  }\r\n  .multiple-highlight {\r\n    background-color: ${(props) =>\r\n      props.theme.darkMode === \"dark\" ? \"#445b6c\" : \"#DEECF9\"} !important;\r\n    color: ${(props) =>\r\n      props.theme.darkMode === \"dark\" ? \"#ffffff\" : \"#212121\"};\r\n  }\r\n  .eventType1-highLight{\r\n    &:after{\r\n      content:\"\";\r\n      left:50%;\r\n      bottom:2px;\r\n      width:4px;\r\n      height:4px;\r\n      transform: translate(-50%);\r\n      position:absolute;\r\n      border-radius:50%;\r\n      background-color: #05FF00;\r\n    }\r\n  }\r\n  .eventType3-highLight{\r\n    &:after{\r\n      content:\"\";\r\n      left:50%;\r\n      bottom:2px;\r\n      width:4px;\r\n      height:4px;\r\n      transform: translate(-50%);\r\n      position:absolute;\r\n      border-radius:50%;\r\n      background-color: #FF0000;\r\n    }\r\n  }\r\n  .eventType2-highLight{\r\n    &:after{\r\n      content:\"\";\r\n      left:50%;\r\n      bottom:2px;\r\n      width:4px;\r\n      height:4px;\r\n      transform: translate(-50%);\r\n      position:absolute;\r\n      border-radius:50%;\r\n      background-color: #FFE500;\r\n    }\r\n  }\r\n  .is-checked{\r\n    .ms-Checkbox-checkmark{\r\n      color:white;\r\n    }\r\n  }\r\n  .ms-DatePicker-day.ms-DatePicker-day--today{\r\n    background-color: red;\r\n  }\r\n  .ms-DatePicker-Toggle{\r\n    .ms-Checkbox-checkbox{\r\n      border-color: ${(props) =>\r\n        props.theme.darkMode === \"dark\" ? \"#ffffff\" : \"#212121\"};\r\n    }\r\n  }\r\n`"
				},
				{
					"id": 822,
					"name": "ToggleWrapper",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Component/Calender/CalenderStyle.ts",
							"line": 166,
							"character": 26
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "stringLiteral",
										"value": "div"
									},
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 823,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											}
										}
									},
									{
										"type": "intrinsic",
										"name": "never"
									}
								],
								"name": "StyledComponentBase"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 824,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExported": true
									}
								}
							}
						]
					},
					"defaultValue": "styled.div`\r\n  .ms-Toggle {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    border-bottom: 1px solid;\r\n    border-color: ${(props) =>\r\n      props.theme === \"dark\" ? \"#000000\" : \"#ECECEC\"};\r\n    padding: 15px 14px 14px 12px;\r\n    background-color: ${(props) =>\r\n      props.theme === \"dark\" ? \"rgb(27, 26, 25)\" : \"\"};\r\n    margin-bottom: 0;\r\n    .ms-Label {\r\n      padding: 0;\r\n      color: ${(props) => (props.theme === \"dark\" ? \"#ffffff\" : \"#333333\")};\r\n      font-weight: normal;\r\n    }\r\n  }\r\n`"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						820,
						822
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Component/Calender/CalenderStyle.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1283,
			"name": "\"src/Dependencies/calendar-custom/Calendar\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/ducnm/Desktop/Add-on/rc365/src/Dependencies/calendar-custom/Calendar.js",
			"children": [
				{
					"id": 1308,
					"name": "Calendar",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.js",
							"line": 59,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"id": 1308,
						"name": "Calendar"
					},
					"defaultValue": "(function (_super) {\n  __extends(Calendar, _super);\n  function Calendar(props) {\n    var _this = _super.call(this, props) || this;\n    _this._dayPicker = React.createRef();\n    _this._monthPicker = React.createRef();\n    _this._navigateDayPickerDay = function (date) {\n      _this.setState({\n        navigatedDayDate: date,\n        navigatedMonthDate: date,\n      });\n    };\n    _this._navigateMonthPickerDay = function (date) {\n      _this.setState({\n        navigatedMonthDate: date,\n      });\n    };\n    _this._onNavigateDayDate = function (date, focusOnNavigatedDay) {\n      _this._navigateDayPickerDay(date);\n      _this._focusOnUpdate = focusOnNavigatedDay;\n    };\n    _this._onNavigateMonthDate = function (date, focusOnNavigatedDay) {\n      if (!focusOnNavigatedDay) {\n        _this._navigateMonthPickerDay(date);\n        _this._focusOnUpdate = focusOnNavigatedDay;\n        return;\n      }\n      var monthPickerOnly =\n        !_this.props.showMonthPickerAsOverlay &&\n        !_this.props.isDayPickerVisible;\n      if (monthPickerOnly) {\n        _this._onSelectDate(date);\n      }\n      _this._navigateDayPickerDay(date);\n    };\n    _this._onSelectDate = function (date, selectedDateRangeArray) {\n      var onSelectDate = _this.props.onSelectDate;\n      _this.setState({\n        selectedDate: date,\n      });\n      if (onSelectDate) {\n        onSelectDate(date, selectedDateRangeArray);\n      }\n    };\n    _this._onHeaderSelect = function (focus) {\n      _this.setState({\n        isDayPickerVisible: !_this.state.isDayPickerVisible,\n        isMonthPickerVisible: !_this.state.isMonthPickerVisible,\n      });\n      if (focus) {\n        _this._focusOnUpdate = true;\n      }\n    };\n    _this._onGotoToday = function () {\n      var _a = _this.props,\n        dateRangeType = _a.dateRangeType,\n        firstDayOfWeek = _a.firstDayOfWeek,\n        today = _a.today,\n        workWeekDays = _a.workWeekDays,\n        selectDateOnClick = _a.selectDateOnClick;\n      if (selectDateOnClick) {\n        // When using Defaultprops, TypeScript doesn't know that React is going to inject defaults\n        // so we use exclamation mark as a hint to the type checker (see link below)\n        // https://decembersoft.com/posts/error-ts2532-optional-react-component-props-in-typescript/\n        var dates = getDateRangeArray(\n          today,\n          dateRangeType,\n          firstDayOfWeek,\n          workWeekDays\n        );\n        _this._onSelectDate(today, dates);\n      }\n      _this._navigateDayPickerDay(today);\n      _this._focusOnUpdate = true;\n    };\n    _this._onGotoTodayClick = function (ev) {\n      _this._onGotoToday();\n    };\n    _this._onGotoTodayKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter) {\n        ev.preventDefault();\n        _this._onGotoToday();\n      }\n    };\n    _this._onDatePickerPopupKeyDown = function (ev) {\n      switch (ev.which) {\n        case KeyCodes.enter:\n          ev.preventDefault();\n          break;\n        case KeyCodes.backspace:\n          ev.preventDefault();\n          break;\n        case KeyCodes.escape:\n          _this._handleEscKey(ev);\n          break;\n        default:\n          break;\n      }\n    };\n    _this._handleEscKey = function (ev) {\n      if (_this.props.onDismiss) {\n        _this.props.onDismiss();\n      }\n    };\n    initializeComponentRef(_this);\n    var currentDate =\n      props.value && !isNaN(props.value.getTime())\n        ? props.value\n        : props.today || new Date();\n    _this.state = {\n      selectedDate: currentDate,\n      navigatedDayDate: currentDate,\n      navigatedMonthDate: currentDate,\n      /** When showMonthPickerAsOverlay is active it overrides isMonthPickerVisible/isDayPickerVisible props\n             (These props permanently set the visibility of their respective calendars). */\n      isMonthPickerVisible: _this.props.showMonthPickerAsOverlay\n        ? false\n        : _this.props.isMonthPickerVisible,\n      isDayPickerVisible: _this.props.showMonthPickerAsOverlay\n        ? true\n        : _this.props.isDayPickerVisible,\n    };\n    _this._focusOnUpdate = false;\n    return _this;\n  }\n  // tslint:disable-next-line function-name\n  Calendar.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {\n    var autoNavigateOnSelection = nextProps.autoNavigateOnSelection,\n      value = nextProps.value,\n      _a = nextProps.today,\n      today = _a === void 0 ? new Date() : _a;\n    // Make sure auto-navigation is supported for programmatic changes to selected date, i.e.,\n    // if selected date is updated via props, we may need to modify the navigated date\n    var overrideNavigatedDate =\n      autoNavigateOnSelection && !compareDates(value, this.props.value);\n    if (overrideNavigatedDate) {\n      this.setState({\n        navigatedMonthDate: value,\n        navigatedDayDate: value,\n      });\n    }\n    this.setState({\n      selectedDate: value || today,\n    });\n  };\n  Calendar.prototype.componentDidUpdate = function () {\n    if (this._focusOnUpdate) {\n      this.focus();\n      this._focusOnUpdate = false;\n    }\n  };\n  Calendar.prototype.render = function () {\n    var _a;\n    var rootClass = \"ms-DatePicker\";\n    var _b = this.props,\n      firstDayOfWeek = _b.firstDayOfWeek,\n      dateRangeType = _b.dateRangeType,\n      strings = _b.strings,\n      showMonthPickerAsOverlay = _b.showMonthPickerAsOverlay,\n      autoNavigateOnSelection = _b.autoNavigateOnSelection,\n      showGoToToday = _b.showGoToToday,\n      highlightCurrentMonth = _b.highlightCurrentMonth,\n      highlightSelectedMonth = _b.highlightSelectedMonth,\n      navigationIcons = _b.navigationIcons,\n      minDate = _b.minDate,\n      maxDate = _b.maxDate,\n      restrictedDates = _b.restrictedDates,\n      className = _b.className,\n      showCloseButton = _b.showCloseButton,\n      allFocusable = _b.allFocusable,\n      yearPickerHidden = _b.yearPickerHidden,\n      today = _b.today;\n    var nativeProps = getNativeProps(this.props, divProperties, [\"value\"]);\n    var _c = this.state,\n      selectedDate = _c.selectedDate,\n      navigatedDayDate = _c.navigatedDayDate,\n      navigatedMonthDate = _c.navigatedMonthDate,\n      isMonthPickerVisible = _c.isMonthPickerVisible,\n      isDayPickerVisible = _c.isDayPickerVisible;\n    var onHeaderSelect = showMonthPickerAsOverlay\n      ? this._onHeaderSelect\n      : undefined;\n    var monthPickerOnly = !showMonthPickerAsOverlay && !isDayPickerVisible;\n    var overlayedWithButton = showMonthPickerAsOverlay && showGoToToday;\n    var goTodayEnabled = showGoToToday;\n    if (goTodayEnabled && navigatedDayDate && navigatedMonthDate && today) {\n      goTodayEnabled =\n        navigatedDayDate.getFullYear() !== today.getFullYear() ||\n        navigatedDayDate.getMonth() !== today.getMonth() ||\n        navigatedMonthDate.getFullYear() !== today.getFullYear() ||\n        navigatedMonthDate.getMonth() !== today.getMonth();\n    }\n    return React.createElement(\n      \"div\",\n      {\n        className: css(rootClass, styles.root, className),\n        role: \"application\",\n      },\n      React.createElement(\n        \"div\",\n        __assign({}, nativeProps, {\n          className: css(\n            \"ms-DatePicker-picker ms-DatePicker-picker--opened ms-DatePicker-picker--focused\",\n            styles.picker,\n            styles.pickerIsOpened,\n            styles.pickerIsFocused,\n            isMonthPickerVisible &&\n              \"ms-DatePicker-monthPickerVisible \" + styles.monthPickerVisible,\n            isMonthPickerVisible &&\n              isDayPickerVisible &&\n              \"ms-DatePicker-calendarsInline \" + styles.calendarsInline,\n            monthPickerOnly &&\n              \"ms-DatePicker-monthPickerOnly \" + styles.monthPickerOnly,\n            showMonthPickerAsOverlay &&\n              \"ms-DatePicker-monthPickerAsOverlay \" +\n                styles.monthPickerAsOverlay\n          ),\n        }),\n        React.createElement(\n          \"div\",\n          {\n            className: css(\n              \"ms-DatePicker-holder ms-slideDownIn10\",\n              styles.holder,\n              overlayedWithButton && styles.holderWithButton\n            ),\n            onKeyDown: this._onDatePickerPopupKeyDown,\n          },\n          React.createElement(\n            \"div\",\n            { className: css(\"ms-DatePicker-frame\", styles.frame) },\n            React.createElement(\n              \"div\",\n              {\n                className: css(\n                  \"ms-DatePicker-wrap\",\n                  styles.wrap,\n                  showGoToToday && styles.goTodaySpacing\n                ),\n              },\n              isDayPickerVisible &&\n                React.createElement(CalendarDay, {\n                  calendarData: this.props.calendarData,\n                  onHighLight: this.props.onHighLight,\n                  selectedDate: selectedDate,\n                  navigatedDate: navigatedDayDate,\n                  today: this.props.today,\n                  onSelectDate: this._onSelectDate,\n                  onNavigateDate: this._onNavigateDayDate,\n                  onDismiss: this.props.onDismiss,\n                  firstDayOfWeek: firstDayOfWeek,\n                  dateRangeType: dateRangeType,\n                  autoNavigateOnSelection: autoNavigateOnSelection,\n                  strings: strings,\n                  onHeaderSelect: onHeaderSelect,\n                  navigationIcons: navigationIcons,\n                  showWeekNumbers: this.props.showWeekNumbers,\n                  firstWeekOfYear: this.props.firstWeekOfYear,\n                  dateTimeFormatter: this.props.dateTimeFormatter,\n                  showSixWeeksByDefault: this.props.showSixWeeksByDefault,\n                  minDate: minDate,\n                  maxDate: maxDate,\n                  restrictedDates: restrictedDates,\n                  workWeekDays: this.props.workWeekDays,\n                  componentRef: this._dayPicker,\n                  showCloseButton: showCloseButton,\n                  allFocusable: allFocusable,\n                }),\n              isDayPickerVisible &&\n                isMonthPickerVisible &&\n                React.createElement(\"div\", { className: styles.divider }),\n              isMonthPickerVisible &&\n                React.createElement(CalendarMonth, {\n                  navigatedDate: navigatedMonthDate,\n                  selectedDate: navigatedDayDate,\n                  strings: strings,\n                  onNavigateDate: this._onNavigateMonthDate,\n                  today: this.props.today,\n                  highlightCurrentMonth: highlightCurrentMonth,\n                  highlightSelectedMonth: highlightSelectedMonth,\n                  onHeaderSelect: onHeaderSelect,\n                  navigationIcons: navigationIcons,\n                  dateTimeFormatter: this.props.dateTimeFormatter,\n                  minDate: minDate,\n                  maxDate: maxDate,\n                  componentRef: this._monthPicker,\n                  yearPickerHidden:\n                    yearPickerHidden || showMonthPickerAsOverlay,\n                }),\n              showGoToToday &&\n                React.createElement(\n                  \"button\",\n                  {\n                    role: \"button\",\n                    className: css(\n                      \"ms-DatePicker-goToday js-goToday\",\n                      styles.goToday,\n                      ((_a = {}),\n                      (_a[styles.goTodayInlineMonth] = isMonthPickerVisible),\n                      (_a[styles.goToTodayIsDisabled] = !goTodayEnabled),\n                      _a)\n                    ),\n                    onClick: this._onGotoTodayClick,\n                    onKeyDown: this._onGotoTodayKeyDown,\n                    tabIndex: 0,\n                    disabled: !goTodayEnabled,\n                    type: \"button\",\n                  },\n                  strings.goToToday\n                )\n            )\n          )\n        )\n      ),\n      React.createElement(FocusRects, null)\n    );\n  };\n  Calendar.prototype.focus = function () {\n    if (this.state.isDayPickerVisible && this._dayPicker.current) {\n      this._dayPicker.current.focus();\n    } else if (this.state.isMonthPickerVisible && this._monthPicker.current) {\n      this._monthPicker.current.focus();\n    }\n  };\n  Calendar.defaultProps = {\n    onSelectDate: undefined,\n    onDismiss: undefined,\n    isMonthPickerVisible: true,\n    isDayPickerVisible: true,\n    showMonthPickerAsOverlay: false,\n    value: undefined,\n    today: new Date(),\n    firstDayOfWeek: DayOfWeek.Sunday,\n    dateRangeType: DateRangeType.Day,\n    autoNavigateOnSelection: false,\n    showGoToToday: true,\n    strings: null,\n    highlightCurrentMonth: false,\n    highlightSelectedMonth: false,\n    navigationIcons: iconStrings,\n    showWeekNumbers: false,\n    firstWeekOfYear: FirstWeekOfYear.FirstDay,\n    dateTimeFormatter: dateTimeFormatterCallbacks,\n    showSixWeeksByDefault: false,\n    workWeekDays: defaultWorkWeekDays,\n    showCloseButton: false,\n    allFocusable: false,\n  };\n  return Calendar;\n})(React.Component)"
				},
				{
					"id": 1287,
					"name": "closeIcon",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.js",
							"line": 26,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"CalculatorMultiply\""
				},
				{
					"id": 1292,
					"name": "defaultWorkWeekDays",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.js",
							"line": 32,
							"character": 23
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "DayOfWeek"
						}
					},
					"defaultValue": "[\n  DayOfWeek.Monday,\n  DayOfWeek.Tuesday,\n  DayOfWeek.Wednesday,\n  DayOfWeek.Thursday,\n  DayOfWeek.Friday,\n]"
				},
				{
					"id": 1285,
					"name": "leftArrow",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.js",
							"line": 24,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"Up\""
				},
				{
					"id": 1286,
					"name": "rightArrow",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.js",
							"line": 25,
							"character": 14
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"Down\""
				},
				{
					"id": 1284,
					"name": "styles",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.js",
							"line": 23,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"id": 1198,
						"name": "\"C:/Users/ducnm/Desktop/Add-on/rc365/src/Dependencies/calendar-custom/Calendar.scss\""
					},
					"defaultValue": "stylesImport"
				},
				{
					"id": 1293,
					"name": "dateTimeFormatterCallbacks",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {},
					"children": [
						{
							"id": 1302,
							"name": "formatDay",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 1303,
									"name": "formatDay",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1304,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.js",
									"line": 52,
									"character": 11
								}
							]
						},
						{
							"id": 1294,
							"name": "formatMonthDayYear",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 1295,
									"name": "formatMonthDayYear",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1296,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1297,
											"name": "strings",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.js",
									"line": 40,
									"character": 20
								}
							]
						},
						{
							"id": 1298,
							"name": "formatMonthYear",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 1299,
									"name": "formatMonthYear",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1300,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1301,
											"name": "strings",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.js",
									"line": 49,
									"character": 17
								}
							]
						},
						{
							"id": 1305,
							"name": "formatYear",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 1306,
									"name": "formatYear",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1307,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.js",
									"line": 55,
									"character": 12
								}
							]
						}
					],
					"groups": [
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								1302,
								1294,
								1298,
								1305
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.js",
							"line": 39,
							"character": 30
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 1288,
					"name": "iconStrings",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {},
					"children": [
						{
							"id": 1291,
							"name": "closeIcon",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.js",
									"line": 30,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "closeIcon"
						},
						{
							"id": 1289,
							"name": "leftNavigation",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.js",
									"line": 28,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "leftArrow"
						},
						{
							"id": 1290,
							"name": "rightNavigation",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.js",
									"line": 29,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "rightArrow"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								1291,
								1289,
								1290
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.js",
							"line": 27,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1308,
						1287,
						1292,
						1285,
						1286,
						1284
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						1293,
						1288
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Dependencies/calendar-custom/Calendar.js",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 340,
			"name": "\"src/Dependencies/calendar-custom/Calendar.d\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/ducnm/Desktop/Add-on/rc365/src/Dependencies/calendar-custom/Calendar.d.ts",
			"children": [
				{
					"id": 347,
					"name": "Calendar",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 375,
							"name": "SS",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						}
					],
					"children": [
						{
							"id": 352,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 353,
									"name": "new Calendar",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {
										"isExported": true
									},
									"parameters": [
										{
											"id": 354,
											"name": "props",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"id": 6,
												"name": "ICalendarProps"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 347,
										"name": "Calendar"
									},
									"overwrites": {
										"type": "reference",
										"name": "Component.__constructor"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.d.ts",
									"line": 19,
									"character": 27
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Component.__constructor"
							}
						},
						{
							"id": 349,
							"name": "_dayPicker",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.d.ts",
									"line": 17,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 351,
							"name": "_focusOnUpdate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.d.ts",
									"line": 19,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 374,
							"name": "_handleEscKey",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.d.ts",
									"line": 35,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 350,
							"name": "_monthPicker",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.d.ts",
									"line": 18,
									"character": 24
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 364,
							"name": "_navigateDayPickerDay",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.d.ts",
									"line": 25,
									"character": 33
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 365,
							"name": "_navigateMonthPickerDay",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.d.ts",
									"line": 26,
									"character": 35
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 373,
							"name": "_onDatePickerPopupKeyDown",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.d.ts",
									"line": 34,
									"character": 37
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 370,
							"name": "_onGotoToday",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.d.ts",
									"line": 31,
									"character": 24
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 371,
							"name": "_onGotoTodayClick",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.d.ts",
									"line": 32,
									"character": 29
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 372,
							"name": "_onGotoTodayKeyDown",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.d.ts",
									"line": 33,
									"character": 31
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 369,
							"name": "_onHeaderSelect",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.d.ts",
									"line": 30,
									"character": 27
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 366,
							"name": "_onNavigateDayDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.d.ts",
									"line": 27,
									"character": 30
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 367,
							"name": "_onNavigateMonthDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.d.ts",
									"line": 28,
									"character": 32
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 368,
							"name": "_onSelectDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.d.ts",
									"line": 29,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 412,
							"name": "context",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\nShould be used with type annotation or static contextType.",
								"text": "```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n",
								"tags": [
									{
										"tag": "see",
										"text": "https://reactjs.org/docs/context.html\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 484,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 412,
								"name": "Component.context"
							}
						},
						{
							"id": 431,
							"name": "props",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 509,
									"character": 22
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 6,
												"name": "ICalendarProps"
											}
										],
										"name": "Readonly"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 432,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExported": true
													},
													"children": [
														{
															"id": 433,
															"name": "children",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isExported": true,
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/react/index.d.ts",
																	"line": 509,
																	"character": 57
																}
															],
															"type": {
																"type": "reference",
																"name": "ReactNode"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																433
															]
														}
													],
													"sources": [
														{
															"fileName": "node_modules/@types/react/index.d.ts",
															"line": 509,
															"character": 47
														}
													]
												}
											}
										],
										"name": "Readonly"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 431,
								"name": "Component.props"
							}
						},
						{
							"id": 435,
							"name": "refs",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "deprecated",
										"text": "\nhttps://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 515,
									"character": 12
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 436,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExported": true
									},
									"indexSignature": [
										{
											"id": 437,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {
												"isExported": true
											},
											"parameters": [
												{
													"id": 438,
													"name": "key",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExported": true
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "ReactInstance"
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/react/index.d.ts",
											"line": 515,
											"character": 13
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 435,
								"name": "Component.refs"
							}
						},
						{
							"id": 434,
							"name": "state",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 510,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 341,
										"name": "ICalendarState"
									}
								],
								"name": "Readonly"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 434,
								"name": "Component.state"
							}
						},
						{
							"id": 411,
							"name": "contextType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If set, `this.context` will be set at runtime to the current value of the given Context.",
								"text": "Usage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n",
								"tags": [
									{
										"tag": "see",
										"text": "https://reactjs.org/docs/context.html#classcontexttype\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 466,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Context"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 411,
								"name": "Component.contextType"
							}
						},
						{
							"id": 348,
							"name": "defaultProps",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.d.ts",
									"line": 16,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"id": 6,
								"name": "ICalendarProps"
							}
						},
						{
							"id": 395,
							"name": "UNSAFE_componentWillMount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 396,
									"name": "UNSAFE_componentWillMount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
										"text": "This method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use componentDidMount or the constructor instead"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 395,
										"name": "DeprecatedLifecycle.UNSAFE_componentWillMount"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 710,
									"character": 33
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 395,
								"name": "DeprecatedLifecycle.UNSAFE_componentWillMount"
							}
						},
						{
							"id": 355,
							"name": "UNSAFE_componentWillReceiveProps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 356,
									"name": "UNSAFE_componentWillReceiveProps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"parameters": [
										{
											"id": 357,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"id": 6,
												"name": "ICalendarProps"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"overwrites": {
										"type": "reference",
										"id": 741,
										"name": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.d.ts",
									"line": 21,
									"character": 36
								}
							],
							"overwrites": {
								"type": "reference",
								"id": 741,
								"name": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps"
							}
						},
						{
							"id": 406,
							"name": "UNSAFE_componentWillUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 407,
									"name": "UNSAFE_componentWillUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
										"text": "Note: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use getSnapshotBeforeUpdate instead"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 408,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 6,
														"name": "ICalendarProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 409,
											"name": "nextState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 341,
														"name": "ICalendarState"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 410,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 406,
										"name": "DeprecatedLifecycle.UNSAFE_componentWillUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 770,
									"character": 34
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 406,
								"name": "DeprecatedLifecycle.UNSAFE_componentWillUpdate"
							}
						},
						{
							"id": 385,
							"name": "componentDidCatch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 386,
									"name": "componentDidCatch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount."
									},
									"parameters": [
										{
											"id": 387,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 388,
											"name": "errorInfo",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"name": "ErrorInfo"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 385,
										"name": "ComponentLifecycle.componentDidCatch"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 639,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 385,
								"name": "ComponentLifecycle.componentDidCatch"
							}
						},
						{
							"id": 376,
							"name": "componentDidMount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 377,
									"name": "componentDidMount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called immediately after a component is mounted. Setting state here will trigger re-rendering."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 376,
										"name": "ComponentLifecycle.componentDidMount"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 618,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 376,
								"name": "ComponentLifecycle.componentDidMount"
							}
						},
						{
							"id": 358,
							"name": "componentDidUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 359,
									"name": "componentDidUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"overwrites": {
										"type": "reference",
										"id": 555,
										"name": "NewLifecycle.componentDidUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.d.ts",
									"line": 22,
									"character": 22
								}
							],
							"overwrites": {
								"type": "reference",
								"id": 555,
								"name": "NewLifecycle.componentDidUpdate"
							}
						},
						{
							"id": 393,
							"name": "componentWillMount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 394,
									"name": "componentWillMount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
										"text": "Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use componentDidMount or the constructor instead; will stop working in React 17"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 393,
										"name": "DeprecatedLifecycle.componentWillMount"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 696,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 393,
								"name": "DeprecatedLifecycle.componentWillMount"
							}
						},
						{
							"id": 397,
							"name": "componentWillReceiveProps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 398,
									"name": "componentWillReceiveProps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
										"text": "Calling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use static getDerivedStateFromProps instead; will stop working in React 17"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 399,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 6,
														"name": "ICalendarProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 400,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 397,
										"name": "DeprecatedLifecycle.componentWillReceiveProps"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 725,
									"character": 33
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 397,
								"name": "DeprecatedLifecycle.componentWillReceiveProps"
							}
						},
						{
							"id": 383,
							"name": "componentWillUnmount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 384,
									"name": "componentWillUnmount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 383,
										"name": "ComponentLifecycle.componentWillUnmount"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 634,
									"character": 28
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 383,
								"name": "ComponentLifecycle.componentWillUnmount"
							}
						},
						{
							"id": 401,
							"name": "componentWillUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 402,
									"name": "componentWillUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
										"text": "Note: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 403,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 6,
														"name": "ICalendarProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 404,
											"name": "nextState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 341,
														"name": "ICalendarState"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 405,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 401,
										"name": "DeprecatedLifecycle.componentWillUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 755,
									"character": 27
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 401,
								"name": "DeprecatedLifecycle.componentWillUpdate"
							}
						},
						{
							"id": 362,
							"name": "focus",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 363,
									"name": "focus",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.d.ts",
									"line": 24,
									"character": 9
								}
							],
							"implementationOf": {
								"type": "reference",
								"id": 3,
								"name": "ICalendar.focus"
							}
						},
						{
							"id": 426,
							"name": "forceUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 427,
									"name": "forceUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"parameters": [
										{
											"id": 428,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 429,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {
																"isExported": true
															},
															"signatures": [
																{
																	"id": 430,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {
																		"isExported": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 426,
										"name": "Component.forceUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 501,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 426,
								"name": "Component.forceUpdate"
							}
						},
						{
							"id": 389,
							"name": "getSnapshotBeforeUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 390,
									"name": "getSnapshotBeforeUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.",
										"text": "Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n"
									},
									"parameters": [
										{
											"id": 391,
											"name": "prevProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 6,
														"name": "ICalendarProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 392,
											"name": "prevState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 341,
														"name": "ICalendarState"
													}
												],
												"name": "Readonly"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "SS"
											},
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 389,
										"name": "NewLifecycle.getSnapshotBeforeUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 675,
									"character": 31
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 389,
								"name": "NewLifecycle.getSnapshotBeforeUpdate"
							}
						},
						{
							"id": 360,
							"name": "render",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 361,
									"name": "render",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"name": "Element"
									},
									"overwrites": {
										"type": "reference",
										"name": "Component.render"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.d.ts",
									"line": 23,
									"character": 10
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Component.render"
							}
						},
						{
							"id": 413,
							"name": "setState",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 414,
									"name": "setState",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"typeParameter": [
										{
											"id": 415,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"id": 341,
													"name": "ICalendarState"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 416,
											"name": "state",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 417,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {
																"isExported": true
															},
															"signatures": [
																{
																	"id": 418,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {
																		"isExported": true
																	},
																	"parameters": [
																		{
																			"id": 419,
																			"name": "prevState",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {
																				"isExported": true
																			},
																			"type": {
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "reference",
																						"id": 341,
																						"name": "ICalendarState"
																					}
																				],
																				"name": "Readonly"
																			}
																		},
																		{
																			"id": 420,
																			"name": "props",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {
																				"isExported": true
																			},
																			"type": {
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "reference",
																						"id": 6,
																						"name": "ICalendarProps"
																					}
																				],
																				"name": "Readonly"
																			}
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "intrinsic",
																				"name": "null"
																			},
																			{
																				"type": "unknown",
																				"name": "S"
																			},
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 421,
																					"name": "__type",
																					"kind": 65536,
																					"kindString": "Type literal",
																					"flags": {
																						"isExported": true
																					}
																				}
																			}
																		]
																	}
																}
															],
															"sources": [
																{
																	"fileName": "node_modules/@types/react/index.d.ts",
																	"line": 497,
																	"character": 18
																}
															]
														}
													},
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "null"
															},
															{
																"type": "unknown",
																"name": "S"
															},
															{
																"type": "reflection",
																"declaration": {
																	"id": 422,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {
																		"isExported": true
																	}
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 423,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 424,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {
																"isExported": true
															},
															"signatures": [
																{
																	"id": 425,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {
																		"isExported": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 413,
										"name": "Component.setState"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 496,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 413,
								"name": "Component.setState"
							}
						},
						{
							"id": 378,
							"name": "shouldComponentUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 379,
									"name": "shouldComponentUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called to determine whether the change in props and state should trigger a re-render.",
										"text": "`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n"
									},
									"parameters": [
										{
											"id": 380,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 6,
														"name": "ICalendarProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 381,
											"name": "nextState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 341,
														"name": "ICalendarState"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 382,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 378,
										"name": "ComponentLifecycle.shouldComponentUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 629,
									"character": 29
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 378,
								"name": "ComponentLifecycle.shouldComponentUpdate"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								352
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								349,
								351,
								374,
								350,
								364,
								365,
								373,
								370,
								371,
								372,
								369,
								366,
								367,
								368,
								412,
								431,
								435,
								434,
								411,
								348
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								395,
								355,
								406,
								385,
								376,
								358,
								393,
								397,
								383,
								401,
								362,
								426,
								389,
								360,
								413,
								378
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.d.ts",
							"line": 15,
							"character": 29
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"typeArguments": [
								{
									"type": "reference",
									"id": 6,
									"name": "ICalendarProps"
								},
								{
									"type": "reference",
									"id": 341,
									"name": "ICalendarState"
								}
							],
							"name": "Component"
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"id": 2,
							"name": "ICalendar"
						}
					]
				},
				{
					"id": 341,
					"name": "ICalendarState",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 346,
							"name": "isDayPickerVisible",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "State used to show/hide day picker"
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.d.ts",
									"line": 13,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 345,
							"name": "isMonthPickerVisible",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "State used to show/hide month picker"
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.d.ts",
									"line": 11,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 342,
							"name": "navigatedDayDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The currently focused date in the day picker, but not necessarily selected"
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.d.ts",
									"line": 5,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 343,
							"name": "navigatedMonthDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The currently focused date in the month picker, but not necessarily selected"
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.d.ts",
									"line": 7,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 344,
							"name": "selectedDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The currently selected date in the calendar"
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.d.ts",
									"line": 9,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								346,
								345,
								342,
								343,
								344
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.d.ts",
							"line": 3,
							"character": 31
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						347
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						341
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Dependencies/calendar-custom/Calendar.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1044,
			"name": "\"src/Dependencies/calendar-custom/Calendar.doc\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/ducnm/Desktop/Add-on/rc365/src/Dependencies/calendar-custom/Calendar.doc.js",
			"children": [
				{
					"id": 1045,
					"name": "CalendarButtonExampleCode",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.doc.js",
							"line": 6,
							"character": 29
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"defaultValue": "require('!raw-loader!office-ui-fabric-react/src/components/Calendar/examples/Calendar.Button.Example.tsx')"
				},
				{
					"id": 1046,
					"name": "CalendarInlineExampleCode",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.doc.js",
							"line": 7,
							"character": 29
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"defaultValue": "require('!raw-loader!office-ui-fabric-react/src/components/Calendar/examples/Calendar.Inline.Example.tsx')"
				},
				{
					"id": 1047,
					"name": "today",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.doc.js",
							"line": 8,
							"character": 9
						}
					],
					"type": {
						"type": "reference",
						"name": "Date"
					},
					"defaultValue": "new Date(Date.now())"
				},
				{
					"id": 1048,
					"name": "CalendarPageProps",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1062,
							"name": "bestPractices",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.doc.js",
									"line": 91,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 1050,
							"name": "componentName",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.doc.js",
									"line": 11,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Calendar\""
						},
						{
							"id": 1051,
							"name": "componentUrl",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.doc.js",
									"line": 12,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"https://github.com/microsoft/fluentui/tree/master/packages/office-ui-fabric-react/src/components/Calendar\""
						},
						{
							"id": 1064,
							"name": "donts",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.doc.js",
									"line": 93,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"defaultValue": "require('!raw-loader!office-ui-fabric-react/src/components/Calendar/docs/CalendarDonts.md')"
						},
						{
							"id": 1063,
							"name": "dos",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.doc.js",
									"line": 92,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"defaultValue": "require('!raw-loader!office-ui-fabric-react/src/components/Calendar/docs/CalendarDos.md')"
						},
						{
							"id": 1052,
							"name": "examples",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.doc.js",
									"line": 13,
									"character": 12
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "reflection",
											"declaration": {
												"id": 1053,
												"name": "__type",
												"kind": 65536,
												"kindString": "Type literal",
												"flags": {
													"isExported": true
												},
												"children": [
													{
														"id": 1055,
														"name": "code",
														"kind": 32,
														"kindString": "Variable",
														"flags": {
															"isExported": true
														},
														"sources": [
															{
																"fileName": "src/Dependencies/calendar-custom/Calendar.doc.js",
																"line": 16,
																"character": 16
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														},
														"defaultValue": "CalendarInlineExampleCode"
													},
													{
														"id": 1054,
														"name": "title",
														"kind": 32,
														"kindString": "Variable",
														"flags": {
															"isExported": true
														},
														"sources": [
															{
																"fileName": "src/Dependencies/calendar-custom/Calendar.doc.js",
																"line": 15,
																"character": 17
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "string"
														},
														"defaultValue": "\"Inline Calendar\""
													},
													{
														"id": 1056,
														"name": "view",
														"kind": 32,
														"kindString": "Variable",
														"flags": {
															"isExported": true
														},
														"sources": [
															{
																"fileName": "src/Dependencies/calendar-custom/Calendar.doc.js",
																"line": 17,
																"character": 16
															}
														],
														"type": {
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 1026,
																	"name": "ICalendarInlineExampleProps"
																}
															],
															"name": "FunctionComponentElement"
														},
														"defaultValue": "(React.createElement(CalendarInlineExample, { isMonthPickerVisible: false, dateRangeType: DateRangeType.Day, autoNavigateOnSelection: false, showGoToToday: true }))"
													}
												],
												"groups": [
													{
														"title": "Variables",
														"kind": 32,
														"children": [
															1055,
															1054,
															1056
														]
													}
												]
											}
										},
										{
											"type": "reflection",
											"declaration": {
												"id": 1057,
												"name": "__type",
												"kind": 65536,
												"kindString": "Type literal",
												"flags": {
													"isExported": true
												},
												"children": [
													{
														"id": 1059,
														"name": "code",
														"kind": 32,
														"kindString": "Variable",
														"flags": {
															"isExported": true
														},
														"sources": [
															{
																"fileName": "src/Dependencies/calendar-custom/Calendar.doc.js",
																"line": 71,
																"character": 16
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														},
														"defaultValue": "CalendarButtonExampleCode"
													},
													{
														"id": 1058,
														"name": "title",
														"kind": 32,
														"kindString": "Variable",
														"flags": {
															"isExported": true
														},
														"sources": [
															{
																"fileName": "src/Dependencies/calendar-custom/Calendar.doc.js",
																"line": 70,
																"character": 17
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "string"
														},
														"defaultValue": "\"Calendar launched from a button\""
													},
													{
														"id": 1060,
														"name": "view",
														"kind": 32,
														"kindString": "Variable",
														"flags": {
															"isExported": true
														},
														"sources": [
															{
																"fileName": "src/Dependencies/calendar-custom/Calendar.doc.js",
																"line": 72,
																"character": 16
															}
														],
														"type": {
															"type": "reference",
															"typeArguments": [
																{
																	"type": "reference",
																	"id": 1016,
																	"name": "ICalendarButtonExampleProps"
																}
															],
															"name": "FunctionComponentElement"
														},
														"defaultValue": "React.createElement(CalendarButtonExample, { highlightCurrentMonth: true })"
													}
												],
												"groups": [
													{
														"title": "Variables",
														"kind": 32,
														"children": [
															1059,
															1058,
															1060
														]
													}
												]
											}
										}
									]
								}
							},
							"defaultValue": "[\n        {\n            title: 'Inline Calendar',\n            code: CalendarInlineExampleCode,\n            view: (React.createElement(CalendarInlineExample, { isMonthPickerVisible: false, dateRangeType: DateRangeType.Day, autoNavigateOnSelection: false, showGoToToday: true })),\n        },\n        {\n            title: 'Inline Calendar with overlaid month picker when header is clicked',\n            code: CalendarInlineExampleCode,\n            view: (React.createElement(CalendarInlineExample, { showMonthPickerAsOverlay: true, highlightCurrentMonth: false, highlightSelectedMonth: true, dateRangeType: DateRangeType.Day, autoNavigateOnSelection: false, showGoToToday: false })),\n        },\n        {\n            title: 'Inline Calendar with month picker and overlaid year picker when month header is clicked',\n            code: CalendarInlineExampleCode,\n            view: (React.createElement(CalendarInlineExample, { dateRangeType: DateRangeType.Day, autoNavigateOnSelection: false, highlightCurrentMonth: false, highlightSelectedMonth: true, showGoToToday: true })),\n        },\n        {\n            title: 'Inline Calendar with week selection and overlaid year picker when month header is clicked',\n            code: CalendarInlineExampleCode,\n            view: (React.createElement(CalendarInlineExample, { dateRangeType: DateRangeType.Week, autoNavigateOnSelection: true, highlightCurrentMonth: false, highlightSelectedMonth: true, showGoToToday: true, showNavigateButtons: true })),\n        },\n        {\n            title: \"Inline Calendar with week selection, date boundary (minDate, maxDate), disabled dates (restrictedDates),\\n        and overlaid year picker when month header is clicked\",\n            code: CalendarInlineExampleCode,\n            view: (React.createElement(CalendarInlineExample, { dateRangeType: DateRangeType.Week, autoNavigateOnSelection: true, highlightCurrentMonth: false, highlightSelectedMonth: true, showGoToToday: true, showNavigateButtons: true, minDate: addWeeks(today, -2), maxDate: addWeeks(today, 2), restrictedDates: [addDays(today, -2), addDays(today, -8), addDays(today, 2), addDays(today, 8)] })),\n        },\n        {\n            title: 'Inline Calendar with month selection and overlaid year picker when month header is clicked',\n            code: CalendarInlineExampleCode,\n            view: (React.createElement(CalendarInlineExample, { dateRangeType: DateRangeType.Month, autoNavigateOnSelection: true, highlightCurrentMonth: false, highlightSelectedMonth: true, showGoToToday: true, showNavigateButtons: true })),\n        },\n        {\n            title: 'Inline Calendar with week numbers',\n            code: CalendarInlineExampleCode,\n            view: (React.createElement(CalendarInlineExample, { isMonthPickerVisible: false, dateRangeType: DateRangeType.Day, autoNavigateOnSelection: false, showGoToToday: true, showWeekNumbers: true })),\n        },\n        {\n            title: 'Inline Calendar with 6 weeks display by default',\n            code: CalendarInlineExampleCode,\n            view: (React.createElement(CalendarInlineExample, { isMonthPickerVisible: false, dateRangeType: DateRangeType.Day, autoNavigateOnSelection: false, showGoToToday: true, showSixWeeksByDefault: true })),\n        },\n        {\n            title: 'Inline Calendar with month picker, no day picker, and overlaid year picker when month header is clicked',\n            code: CalendarInlineExampleCode,\n            view: (React.createElement(CalendarInlineExample, { dateRangeType: DateRangeType.Month, autoNavigateOnSelection: false, showGoToToday: true, highlightCurrentMonth: false, highlightSelectedMonth: true, isDayPickerVisible: false })),\n        },\n        {\n            title: \"Inline Calendar with date boundary (minDate, maxDate), disabled dates (restrictedDates),\\n        and overlaid year picker when month header is clicked\",\n            code: CalendarInlineExampleCode,\n            view: (React.createElement(CalendarInlineExample, { dateRangeType: DateRangeType.Day, autoNavigateOnSelection: true, highlightCurrentMonth: false, highlightSelectedMonth: true, showGoToToday: false, minDate: addMonths(today, -1), maxDate: addYears(today, 1), restrictedDates: [addDays(today, -2), addDays(today, -8), addDays(today, 2), addDays(today, 8)] })),\n        },\n        {\n            title: \"Calendar with workWeekDays = [T W, F, Sa] provided, first day of week = M, and overlaid year picker when\\n      month header is clicked\",\n            code: CalendarButtonExampleCode,\n            view: (React.createElement(CalendarInlineExample, { dateRangeType: DateRangeType.WorkWeek, firstDayOfWeek: DayOfWeek.Monday, autoNavigateOnSelection: true, highlightCurrentMonth: false, highlightSelectedMonth: true, showGoToToday: true, workWeekDays: [DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Friday, DayOfWeek.Saturday] })),\n        },\n        {\n            title: 'Calendar launched from a button',\n            code: CalendarButtonExampleCode,\n            view: React.createElement(CalendarButtonExample, { highlightCurrentMonth: true }),\n        },\n        {\n            title: 'Month picker launched from a button',\n            code: CalendarButtonExampleCode,\n            view: (React.createElement(CalendarButtonExample, { isDayPickerVisible: false, highlightCurrentMonth: false, highlightSelectedMonth: true, buttonString: 'Click for Month Picker' })),\n        },\n        {\n            title: 'Calendar with overlaid month picker launched from a button',\n            code: CalendarButtonExampleCode,\n            view: (React.createElement(CalendarButtonExample, { showMonthPickerAsOverlay: true, highlightCurrentMonth: false, highlightSelectedMonth: true, buttonString: 'Click for overlaid Day Picker and Month Picker' })),\n        },\n        {\n            title: 'Calendar with overlaid month picker launched from a button without show go to today button',\n            code: CalendarButtonExampleCode,\n            view: (React.createElement(CalendarButtonExample, { showMonthPickerAsOverlay: true, showGoToToday: false, highlightCurrentMonth: false, highlightSelectedMonth: true, buttonString: 'Click for overlaid Day Picker and Month Picker without go to today button' })),\n        },\n    ]"
						},
						{
							"id": 1066,
							"name": "isFeedbackVisible",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.doc.js",
									"line": 95,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "true"
						},
						{
							"id": 1065,
							"name": "isHeaderVisible",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.doc.js",
									"line": 94,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "true"
						},
						{
							"id": 1061,
							"name": "overview",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.doc.js",
									"line": 90,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"defaultValue": "require('!raw-loader!office-ui-fabric-react/src/components/Calendar/docs/CalendarOverview.md')"
						},
						{
							"id": 1049,
							"name": "title",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.doc.js",
									"line": 10,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Calendar\""
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								1062,
								1050,
								1051,
								1064,
								1063,
								1052,
								1066,
								1065,
								1061,
								1049
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.doc.js",
							"line": 9,
							"character": 28
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1045,
						1046,
						1047
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						1048
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Dependencies/calendar-custom/Calendar.doc.js",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1013,
			"name": "\"src/Dependencies/calendar-custom/Calendar.doc.d\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/ducnm/Desktop/Add-on/rc365/src/Dependencies/calendar-custom/Calendar.doc.d.ts",
			"children": [
				{
					"id": 1014,
					"name": "CalendarPageProps",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.doc.d.ts",
							"line": 2,
							"character": 38
						}
					],
					"type": {
						"type": "reference",
						"name": "IDocPageProps"
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1014
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Dependencies/calendar-custom/Calendar.doc.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1309,
			"name": "\"src/Dependencies/calendar-custom/Calendar.scss\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/ducnm/Desktop/Add-on/rc365/src/Dependencies/calendar-custom/Calendar.scss.js",
			"children": [
				{
					"id": 1392,
					"name": "bottomDate",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 86,
							"character": 21
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"bottomDate_4cbef05b\""
				},
				{
					"id": 1386,
					"name": "bottomLeftCornerDate",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 80,
							"character": 31
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"bottomLeftCornerDate_4cbef05b\""
				},
				{
					"id": 1387,
					"name": "bottomRightCornerDate",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 81,
							"character": 32
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"bottomRightCornerDate_4cbef05b\""
				},
				{
					"id": 1376,
					"name": "calendarsInline",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 70,
							"character": 26
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"calendarsInline_4cbef05b\""
				},
				{
					"id": 1348,
					"name": "closeButton",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 42,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"closeButton_4cbef05b\""
				},
				{
					"id": 1324,
					"name": "currentDecade",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 18,
							"character": 24
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"currentDecade_4cbef05b\""
				},
				{
					"id": 1323,
					"name": "currentYear",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 17,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"currentYear_4cbef05b\""
				},
				{
					"id": 1328,
					"name": "day",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 22,
							"character": 14
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"day_4cbef05b\""
				},
				{
					"id": 1337,
					"name": "dayBackground",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 31,
							"character": 24
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"dayBackground_4cbef05b\""
				},
				{
					"id": 1336,
					"name": "dayDisabled",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 30,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"dayDisabled_4cbef05b\""
				},
				{
					"id": 1338,
					"name": "dayHover",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 32,
							"character": 19
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"dayHover_4cbef05b\""
				},
				{
					"id": 1331,
					"name": "dayIsDisabled",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 25,
							"character": 24
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"dayIsDisabled_4cbef05b\""
				},
				{
					"id": 1333,
					"name": "dayIsFocused",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 27,
							"character": 23
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"dayIsFocused_4cbef05b\""
				},
				{
					"id": 1334,
					"name": "dayIsHighlighted",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 28,
							"character": 27
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"dayIsHighlighted_4cbef05b\""
				},
				{
					"id": 1330,
					"name": "dayIsToday",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 24,
							"character": 21
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"dayIsToday_4cbef05b\""
				},
				{
					"id": 1332,
					"name": "dayIsUnfocused",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 26,
							"character": 25
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"dayIsUnfocused_4cbef05b\""
				},
				{
					"id": 1317,
					"name": "dayPicker",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 11,
							"character": 20
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"dayPicker_4cbef05b\""
				},
				{
					"id": 1339,
					"name": "dayPress",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 33,
							"character": 19
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"dayPress_4cbef05b\""
				},
				{
					"id": 1329,
					"name": "daySelection",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 23,
							"character": 23
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"daySelection_4cbef05b\""
				},
				{
					"id": 1326,
					"name": "dayWrapper",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 20,
							"character": 21
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"dayWrapper_4cbef05b\""
				},
				{
					"id": 1322,
					"name": "decade",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 16,
							"character": 17
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"decade_4cbef05b\""
				},
				{
					"id": 1347,
					"name": "decadeComponents",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 41,
							"character": 27
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"decadeComponents_4cbef05b\""
				},
				{
					"id": 1319,
					"name": "divider",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 13,
							"character": 18
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"divider_4cbef05b\""
				},
				{
					"id": 1314,
					"name": "frame",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 8,
							"character": 16
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"frame_4cbef05b\""
				},
				{
					"id": 1369,
					"name": "goToTodayIsDisabled",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 63,
							"character": 30
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"goToTodayIsDisabled_4cbef05b\""
				},
				{
					"id": 1368,
					"name": "goToday",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 62,
							"character": 18
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"goToday_4cbef05b\""
				},
				{
					"id": 1370,
					"name": "goTodayInlineMonth",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 64,
							"character": 29
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"goTodayInlineMonth_4cbef05b\""
				},
				{
					"id": 1316,
					"name": "goTodaySpacing",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 10,
							"character": 25
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"goTodaySpacing_4cbef05b\""
				},
				{
					"id": 1318,
					"name": "header",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 12,
							"character": 17
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"header_4cbef05b\""
				},
				{
					"id": 1361,
					"name": "headerToggleView",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 55,
							"character": 27
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"headerToggleView_4cbef05b\""
				},
				{
					"id": 1312,
					"name": "holder",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 6,
							"character": 17
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"holder_4cbef05b\""
				},
				{
					"id": 1379,
					"name": "holderWithButton",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 73,
							"character": 27
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"holderWithButton_4cbef05b\""
				},
				{
					"id": 1365,
					"name": "isHighlighted",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 59,
							"character": 24
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"isHighlighted_4cbef05b\""
				},
				{
					"id": 1371,
					"name": "isPickingYears",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 65,
							"character": 25
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"isPickingYears_4cbef05b\""
				},
				{
					"id": 1393,
					"name": "leftdate",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 87,
							"character": 19
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"leftdate_4cbef05b\""
				},
				{
					"id": 1320,
					"name": "monthAndYear",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 14,
							"character": 23
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"monthAndYear_4cbef05b\""
				},
				{
					"id": 1345,
					"name": "monthComponents",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 39,
							"character": 26
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"monthComponents_4cbef05b\""
				},
				{
					"id": 1381,
					"name": "monthIsCurrentMonth",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 75,
							"character": 30
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"monthIsCurrentMonth_4cbef05b\""
				},
				{
					"id": 1380,
					"name": "monthIsHighlighted",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 74,
							"character": 29
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"monthIsHighlighted_4cbef05b\""
				},
				{
					"id": 1363,
					"name": "monthOption",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 57,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"monthOption_4cbef05b\""
				},
				{
					"id": 1366,
					"name": "monthOptionIsDisabled",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 60,
							"character": 32
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"monthOptionIsDisabled_4cbef05b\""
				},
				{
					"id": 1372,
					"name": "monthPicker",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 66,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"monthPicker_4cbef05b\""
				},
				{
					"id": 1378,
					"name": "monthPickerAsOverlay",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 72,
							"character": 31
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"monthPickerAsOverlay_4cbef05b\""
				},
				{
					"id": 1377,
					"name": "monthPickerOnly",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 71,
							"character": 26
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"monthPickerOnly_4cbef05b\""
				},
				{
					"id": 1374,
					"name": "monthPickerVisible",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 68,
							"character": 29
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"monthPickerVisible_4cbef05b\""
				},
				{
					"id": 1389,
					"name": "monthSelection",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 83,
							"character": 25
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"monthSelection_4cbef05b\""
				},
				{
					"id": 1354,
					"name": "nextDecade",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 48,
							"character": 21
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"nextDecade_4cbef05b\""
				},
				{
					"id": 1360,
					"name": "nextDecadeIsDisabled",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 54,
							"character": 31
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"nextDecadeIsDisabled_4cbef05b\""
				},
				{
					"id": 1350,
					"name": "nextMonth",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 44,
							"character": 20
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"nextMonth_4cbef05b\""
				},
				{
					"id": 1356,
					"name": "nextMonthIsDisabled",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 50,
							"character": 30
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"nextMonthIsDisabled_4cbef05b\""
				},
				{
					"id": 1352,
					"name": "nextYear",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 46,
							"character": 19
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"nextYear_4cbef05b\""
				},
				{
					"id": 1358,
					"name": "nextYearIsDisabled",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 52,
							"character": 29
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"nextYearIsDisabled_4cbef05b\""
				},
				{
					"id": 1362,
					"name": "optionGrid",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 56,
							"character": 21
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"optionGrid_4cbef05b\""
				},
				{
					"id": 1311,
					"name": "picker",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 5,
							"character": 17
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"picker_4cbef05b\""
				},
				{
					"id": 1335,
					"name": "pickerIsFocused",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 29,
							"character": 26
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"pickerIsFocused_4cbef05b\""
				},
				{
					"id": 1313,
					"name": "pickerIsOpened",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 7,
							"character": 25
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"pickerIsOpened_4cbef05b\""
				},
				{
					"id": 1353,
					"name": "prevDecade",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 47,
							"character": 21
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"prevDecade_4cbef05b\""
				},
				{
					"id": 1359,
					"name": "prevDecadeIsDisabled",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 53,
							"character": 31
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"prevDecadeIsDisabled_4cbef05b\""
				},
				{
					"id": 1349,
					"name": "prevMonth",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 43,
							"character": 20
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"prevMonth_4cbef05b\""
				},
				{
					"id": 1355,
					"name": "prevMonthIsDisabled",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 49,
							"character": 30
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"prevMonthIsDisabled_4cbef05b\""
				},
				{
					"id": 1351,
					"name": "prevYear",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 45,
							"character": 19
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"prevYear_4cbef05b\""
				},
				{
					"id": 1357,
					"name": "prevYearIsDisabled",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 51,
							"character": 29
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"prevYearIsDisabled_4cbef05b\""
				},
				{
					"id": 1391,
					"name": "rightDate",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 85,
							"character": 20
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"rightDate_4cbef05b\""
				},
				{
					"id": 1310,
					"name": "root",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 4,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"root_4cbef05b\""
				},
				{
					"id": 1341,
					"name": "showWeekNumbers",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 35,
							"character": 26
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"showWeekNumbers_4cbef05b\""
				},
				{
					"id": 1344,
					"name": "showWeekNumbersRTL",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 38,
							"character": 29
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"showWeekNumbersRTL_4cbef05b\""
				},
				{
					"id": 1325,
					"name": "table",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 19,
							"character": 16
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"table_4cbef05b\""
				},
				{
					"id": 1375,
					"name": "toggleMonthView",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 69,
							"character": 26
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"toggleMonthView_4cbef05b\""
				},
				{
					"id": 1390,
					"name": "topDate",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 84,
							"character": 18
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"topDate_4cbef05b\""
				},
				{
					"id": 1384,
					"name": "topLeftCornerDate",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 78,
							"character": 28
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"topLeftCornerDate_4cbef05b\""
				},
				{
					"id": 1385,
					"name": "topRightCornerDate",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 79,
							"character": 29
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"topRightCornerDate_4cbef05b\""
				},
				{
					"id": 1340,
					"name": "weekBackground",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 34,
							"character": 25
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"weekBackground_4cbef05b\""
				},
				{
					"id": 1343,
					"name": "weekIsHighlighted",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 37,
							"character": 28
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"weekIsHighlighted_4cbef05b\""
				},
				{
					"id": 1342,
					"name": "weekNumbers",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 36,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"weekNumbers_4cbef05b\""
				},
				{
					"id": 1388,
					"name": "weekSelection",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 82,
							"character": 24
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"weekSelection_4cbef05b\""
				},
				{
					"id": 1327,
					"name": "weekday",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 21,
							"character": 18
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"weekday_4cbef05b\""
				},
				{
					"id": 1315,
					"name": "wrap",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 9,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"wrap_4cbef05b\""
				},
				{
					"id": 1321,
					"name": "year",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 15,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"year_4cbef05b\""
				},
				{
					"id": 1346,
					"name": "yearComponents",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 40,
							"character": 25
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"yearComponents_4cbef05b\""
				},
				{
					"id": 1383,
					"name": "yearIsCurrentYear",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 77,
							"character": 28
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"yearIsCurrentYear_4cbef05b\""
				},
				{
					"id": 1382,
					"name": "yearIsHighlighted",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 76,
							"character": 28
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"yearIsHighlighted_4cbef05b\""
				},
				{
					"id": 1364,
					"name": "yearOption",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 58,
							"character": 21
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"yearOption_4cbef05b\""
				},
				{
					"id": 1367,
					"name": "yearOptionIsDisabled",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 61,
							"character": 31
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"yearOptionIsDisabled_4cbef05b\""
				},
				{
					"id": 1373,
					"name": "yearPicker",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
							"line": 67,
							"character": 21
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"yearPicker_4cbef05b\""
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1392,
						1386,
						1387,
						1376,
						1348,
						1324,
						1323,
						1328,
						1337,
						1336,
						1338,
						1331,
						1333,
						1334,
						1330,
						1332,
						1317,
						1339,
						1329,
						1326,
						1322,
						1347,
						1319,
						1314,
						1369,
						1368,
						1370,
						1316,
						1318,
						1361,
						1312,
						1379,
						1365,
						1371,
						1393,
						1320,
						1345,
						1381,
						1380,
						1363,
						1366,
						1372,
						1378,
						1377,
						1374,
						1389,
						1354,
						1360,
						1350,
						1356,
						1352,
						1358,
						1362,
						1311,
						1335,
						1313,
						1353,
						1359,
						1349,
						1355,
						1351,
						1357,
						1391,
						1310,
						1341,
						1344,
						1325,
						1375,
						1390,
						1384,
						1385,
						1340,
						1343,
						1342,
						1388,
						1327,
						1315,
						1321,
						1346,
						1383,
						1382,
						1364,
						1367,
						1373
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Dependencies/calendar-custom/Calendar.scss.js",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1198,
			"name": "\"src/Dependencies/calendar-custom/Calendar.scss.d\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/ducnm/Desktop/Add-on/rc365/src/Dependencies/calendar-custom/Calendar.scss.d.ts",
			"children": [
				{
					"id": 1281,
					"name": "bottomDate",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 83,
							"character": 31
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "bottomDate_4cbef05b"
					},
					"defaultValue": "\"bottomDate_4cbef05b\""
				},
				{
					"id": 1275,
					"name": "bottomLeftCornerDate",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 77,
							"character": 41
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "bottomLeftCornerDate_4cbef05b"
					},
					"defaultValue": "\"bottomLeftCornerDate_4cbef05b\""
				},
				{
					"id": 1276,
					"name": "bottomRightCornerDate",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 78,
							"character": 42
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "bottomRightCornerDate_4cbef05b"
					},
					"defaultValue": "\"bottomRightCornerDate_4cbef05b\""
				},
				{
					"id": 1265,
					"name": "calendarsInline",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 67,
							"character": 36
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "calendarsInline_4cbef05b"
					},
					"defaultValue": "\"calendarsInline_4cbef05b\""
				},
				{
					"id": 1237,
					"name": "closeButton",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 39,
							"character": 32
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "closeButton_4cbef05b"
					},
					"defaultValue": "\"closeButton_4cbef05b\""
				},
				{
					"id": 1213,
					"name": "currentDecade",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 15,
							"character": 34
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "currentDecade_4cbef05b"
					},
					"defaultValue": "\"currentDecade_4cbef05b\""
				},
				{
					"id": 1212,
					"name": "currentYear",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 14,
							"character": 32
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "currentYear_4cbef05b"
					},
					"defaultValue": "\"currentYear_4cbef05b\""
				},
				{
					"id": 1217,
					"name": "day",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 19,
							"character": 24
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "day_4cbef05b"
					},
					"defaultValue": "\"day_4cbef05b\""
				},
				{
					"id": 1226,
					"name": "dayBackground",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 28,
							"character": 34
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "dayBackground_4cbef05b"
					},
					"defaultValue": "\"dayBackground_4cbef05b\""
				},
				{
					"id": 1225,
					"name": "dayDisabled",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 27,
							"character": 32
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "dayDisabled_4cbef05b"
					},
					"defaultValue": "\"dayDisabled_4cbef05b\""
				},
				{
					"id": 1227,
					"name": "dayHover",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 29,
							"character": 29
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "dayHover_4cbef05b"
					},
					"defaultValue": "\"dayHover_4cbef05b\""
				},
				{
					"id": 1220,
					"name": "dayIsDisabled",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 22,
							"character": 34
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "dayIsDisabled_4cbef05b"
					},
					"defaultValue": "\"dayIsDisabled_4cbef05b\""
				},
				{
					"id": 1222,
					"name": "dayIsFocused",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 24,
							"character": 33
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "dayIsFocused_4cbef05b"
					},
					"defaultValue": "\"dayIsFocused_4cbef05b\""
				},
				{
					"id": 1223,
					"name": "dayIsHighlighted",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 25,
							"character": 37
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "dayIsHighlighted_4cbef05b"
					},
					"defaultValue": "\"dayIsHighlighted_4cbef05b\""
				},
				{
					"id": 1219,
					"name": "dayIsToday",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 21,
							"character": 31
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "dayIsToday_4cbef05b"
					},
					"defaultValue": "\"dayIsToday_4cbef05b\""
				},
				{
					"id": 1221,
					"name": "dayIsUnfocused",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 23,
							"character": 35
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "dayIsUnfocused_4cbef05b"
					},
					"defaultValue": "\"dayIsUnfocused_4cbef05b\""
				},
				{
					"id": 1206,
					"name": "dayPicker",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 8,
							"character": 30
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "dayPicker_4cbef05b"
					},
					"defaultValue": "\"dayPicker_4cbef05b\""
				},
				{
					"id": 1228,
					"name": "dayPress",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 30,
							"character": 29
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "dayPress_4cbef05b"
					},
					"defaultValue": "\"dayPress_4cbef05b\""
				},
				{
					"id": 1218,
					"name": "daySelection",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 20,
							"character": 33
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "daySelection_4cbef05b"
					},
					"defaultValue": "\"daySelection_4cbef05b\""
				},
				{
					"id": 1215,
					"name": "dayWrapper",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 17,
							"character": 31
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "dayWrapper_4cbef05b"
					},
					"defaultValue": "\"dayWrapper_4cbef05b\""
				},
				{
					"id": 1211,
					"name": "decade",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 13,
							"character": 27
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "decade_4cbef05b"
					},
					"defaultValue": "\"decade_4cbef05b\""
				},
				{
					"id": 1236,
					"name": "decadeComponents",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 38,
							"character": 37
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "decadeComponents_4cbef05b"
					},
					"defaultValue": "\"decadeComponents_4cbef05b\""
				},
				{
					"id": 1208,
					"name": "divider",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 10,
							"character": 28
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "divider_4cbef05b"
					},
					"defaultValue": "\"divider_4cbef05b\""
				},
				{
					"id": 1203,
					"name": "frame",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 5,
							"character": 26
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "frame_4cbef05b"
					},
					"defaultValue": "\"frame_4cbef05b\""
				},
				{
					"id": 1258,
					"name": "goToTodayIsDisabled",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 60,
							"character": 40
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "goToTodayIsDisabled_4cbef05b"
					},
					"defaultValue": "\"goToTodayIsDisabled_4cbef05b\""
				},
				{
					"id": 1257,
					"name": "goToday",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 59,
							"character": 28
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "goToday_4cbef05b"
					},
					"defaultValue": "\"goToday_4cbef05b\""
				},
				{
					"id": 1259,
					"name": "goTodayInlineMonth",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 61,
							"character": 39
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "goTodayInlineMonth_4cbef05b"
					},
					"defaultValue": "\"goTodayInlineMonth_4cbef05b\""
				},
				{
					"id": 1205,
					"name": "goTodaySpacing",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 7,
							"character": 35
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "goTodaySpacing_4cbef05b"
					},
					"defaultValue": "\"goTodaySpacing_4cbef05b\""
				},
				{
					"id": 1207,
					"name": "header",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 9,
							"character": 27
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "header_4cbef05b"
					},
					"defaultValue": "\"header_4cbef05b\""
				},
				{
					"id": 1250,
					"name": "headerToggleView",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 52,
							"character": 37
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "headerToggleView_4cbef05b"
					},
					"defaultValue": "\"headerToggleView_4cbef05b\""
				},
				{
					"id": 1201,
					"name": "holder",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 3,
							"character": 27
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "holder_4cbef05b"
					},
					"defaultValue": "\"holder_4cbef05b\""
				},
				{
					"id": 1268,
					"name": "holderWithButton",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 70,
							"character": 37
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "holderWithButton_4cbef05b"
					},
					"defaultValue": "\"holderWithButton_4cbef05b\""
				},
				{
					"id": 1254,
					"name": "isHighlighted",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 56,
							"character": 34
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "isHighlighted_4cbef05b"
					},
					"defaultValue": "\"isHighlighted_4cbef05b\""
				},
				{
					"id": 1260,
					"name": "isPickingYears",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 62,
							"character": 35
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "isPickingYears_4cbef05b"
					},
					"defaultValue": "\"isPickingYears_4cbef05b\""
				},
				{
					"id": 1282,
					"name": "leftdate",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 84,
							"character": 29
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "leftdate_4cbef05b"
					},
					"defaultValue": "\"leftdate_4cbef05b\""
				},
				{
					"id": 1209,
					"name": "monthAndYear",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 11,
							"character": 33
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "monthAndYear_4cbef05b"
					},
					"defaultValue": "\"monthAndYear_4cbef05b\""
				},
				{
					"id": 1234,
					"name": "monthComponents",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 36,
							"character": 36
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "monthComponents_4cbef05b"
					},
					"defaultValue": "\"monthComponents_4cbef05b\""
				},
				{
					"id": 1270,
					"name": "monthIsCurrentMonth",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 72,
							"character": 40
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "monthIsCurrentMonth_4cbef05b"
					},
					"defaultValue": "\"monthIsCurrentMonth_4cbef05b\""
				},
				{
					"id": 1269,
					"name": "monthIsHighlighted",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 71,
							"character": 39
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "monthIsHighlighted_4cbef05b"
					},
					"defaultValue": "\"monthIsHighlighted_4cbef05b\""
				},
				{
					"id": 1252,
					"name": "monthOption",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 54,
							"character": 32
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "monthOption_4cbef05b"
					},
					"defaultValue": "\"monthOption_4cbef05b\""
				},
				{
					"id": 1255,
					"name": "monthOptionIsDisabled",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 57,
							"character": 42
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "monthOptionIsDisabled_4cbef05b"
					},
					"defaultValue": "\"monthOptionIsDisabled_4cbef05b\""
				},
				{
					"id": 1261,
					"name": "monthPicker",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 63,
							"character": 32
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "monthPicker_4cbef05b"
					},
					"defaultValue": "\"monthPicker_4cbef05b\""
				},
				{
					"id": 1267,
					"name": "monthPickerAsOverlay",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 69,
							"character": 41
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "monthPickerAsOverlay_4cbef05b"
					},
					"defaultValue": "\"monthPickerAsOverlay_4cbef05b\""
				},
				{
					"id": 1266,
					"name": "monthPickerOnly",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 68,
							"character": 36
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "monthPickerOnly_4cbef05b"
					},
					"defaultValue": "\"monthPickerOnly_4cbef05b\""
				},
				{
					"id": 1263,
					"name": "monthPickerVisible",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 65,
							"character": 39
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "monthPickerVisible_4cbef05b"
					},
					"defaultValue": "\"monthPickerVisible_4cbef05b\""
				},
				{
					"id": 1278,
					"name": "monthSelection",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 80,
							"character": 35
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "monthSelection_4cbef05b"
					},
					"defaultValue": "\"monthSelection_4cbef05b\""
				},
				{
					"id": 1243,
					"name": "nextDecade",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 45,
							"character": 31
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "nextDecade_4cbef05b"
					},
					"defaultValue": "\"nextDecade_4cbef05b\""
				},
				{
					"id": 1249,
					"name": "nextDecadeIsDisabled",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 51,
							"character": 41
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "nextDecadeIsDisabled_4cbef05b"
					},
					"defaultValue": "\"nextDecadeIsDisabled_4cbef05b\""
				},
				{
					"id": 1239,
					"name": "nextMonth",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 41,
							"character": 30
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "nextMonth_4cbef05b"
					},
					"defaultValue": "\"nextMonth_4cbef05b\""
				},
				{
					"id": 1245,
					"name": "nextMonthIsDisabled",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 47,
							"character": 40
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "nextMonthIsDisabled_4cbef05b"
					},
					"defaultValue": "\"nextMonthIsDisabled_4cbef05b\""
				},
				{
					"id": 1241,
					"name": "nextYear",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 43,
							"character": 29
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "nextYear_4cbef05b"
					},
					"defaultValue": "\"nextYear_4cbef05b\""
				},
				{
					"id": 1247,
					"name": "nextYearIsDisabled",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 49,
							"character": 39
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "nextYearIsDisabled_4cbef05b"
					},
					"defaultValue": "\"nextYearIsDisabled_4cbef05b\""
				},
				{
					"id": 1251,
					"name": "optionGrid",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 53,
							"character": 31
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "optionGrid_4cbef05b"
					},
					"defaultValue": "\"optionGrid_4cbef05b\""
				},
				{
					"id": 1200,
					"name": "picker",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 2,
							"character": 27
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "picker_4cbef05b"
					},
					"defaultValue": "\"picker_4cbef05b\""
				},
				{
					"id": 1224,
					"name": "pickerIsFocused",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 26,
							"character": 36
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "pickerIsFocused_4cbef05b"
					},
					"defaultValue": "\"pickerIsFocused_4cbef05b\""
				},
				{
					"id": 1202,
					"name": "pickerIsOpened",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 4,
							"character": 35
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "pickerIsOpened_4cbef05b"
					},
					"defaultValue": "\"pickerIsOpened_4cbef05b\""
				},
				{
					"id": 1242,
					"name": "prevDecade",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 44,
							"character": 31
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "prevDecade_4cbef05b"
					},
					"defaultValue": "\"prevDecade_4cbef05b\""
				},
				{
					"id": 1248,
					"name": "prevDecadeIsDisabled",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 50,
							"character": 41
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "prevDecadeIsDisabled_4cbef05b"
					},
					"defaultValue": "\"prevDecadeIsDisabled_4cbef05b\""
				},
				{
					"id": 1238,
					"name": "prevMonth",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 40,
							"character": 30
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "prevMonth_4cbef05b"
					},
					"defaultValue": "\"prevMonth_4cbef05b\""
				},
				{
					"id": 1244,
					"name": "prevMonthIsDisabled",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 46,
							"character": 40
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "prevMonthIsDisabled_4cbef05b"
					},
					"defaultValue": "\"prevMonthIsDisabled_4cbef05b\""
				},
				{
					"id": 1240,
					"name": "prevYear",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 42,
							"character": 29
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "prevYear_4cbef05b"
					},
					"defaultValue": "\"prevYear_4cbef05b\""
				},
				{
					"id": 1246,
					"name": "prevYearIsDisabled",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 48,
							"character": 39
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "prevYearIsDisabled_4cbef05b"
					},
					"defaultValue": "\"prevYearIsDisabled_4cbef05b\""
				},
				{
					"id": 1280,
					"name": "rightDate",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 82,
							"character": 30
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "rightDate_4cbef05b"
					},
					"defaultValue": "\"rightDate_4cbef05b\""
				},
				{
					"id": 1199,
					"name": "root",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 1,
							"character": 25
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "root_4cbef05b"
					},
					"defaultValue": "\"root_4cbef05b\""
				},
				{
					"id": 1230,
					"name": "showWeekNumbers",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 32,
							"character": 36
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "showWeekNumbers_4cbef05b"
					},
					"defaultValue": "\"showWeekNumbers_4cbef05b\""
				},
				{
					"id": 1233,
					"name": "showWeekNumbersRTL",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 35,
							"character": 39
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "showWeekNumbersRTL_4cbef05b"
					},
					"defaultValue": "\"showWeekNumbersRTL_4cbef05b\""
				},
				{
					"id": 1214,
					"name": "table",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 16,
							"character": 26
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "table_4cbef05b"
					},
					"defaultValue": "\"table_4cbef05b\""
				},
				{
					"id": 1264,
					"name": "toggleMonthView",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 66,
							"character": 36
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "toggleMonthView_4cbef05b"
					},
					"defaultValue": "\"toggleMonthView_4cbef05b\""
				},
				{
					"id": 1279,
					"name": "topDate",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 81,
							"character": 28
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "topDate_4cbef05b"
					},
					"defaultValue": "\"topDate_4cbef05b\""
				},
				{
					"id": 1273,
					"name": "topLeftCornerDate",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 75,
							"character": 38
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "topLeftCornerDate_4cbef05b"
					},
					"defaultValue": "\"topLeftCornerDate_4cbef05b\""
				},
				{
					"id": 1274,
					"name": "topRightCornerDate",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 76,
							"character": 39
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "topRightCornerDate_4cbef05b"
					},
					"defaultValue": "\"topRightCornerDate_4cbef05b\""
				},
				{
					"id": 1229,
					"name": "weekBackground",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 31,
							"character": 35
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "weekBackground_4cbef05b"
					},
					"defaultValue": "\"weekBackground_4cbef05b\""
				},
				{
					"id": 1232,
					"name": "weekIsHighlighted",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 34,
							"character": 38
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "weekIsHighlighted_4cbef05b"
					},
					"defaultValue": "\"weekIsHighlighted_4cbef05b\""
				},
				{
					"id": 1231,
					"name": "weekNumbers",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 33,
							"character": 32
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "weekNumbers_4cbef05b"
					},
					"defaultValue": "\"weekNumbers_4cbef05b\""
				},
				{
					"id": 1277,
					"name": "weekSelection",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 79,
							"character": 34
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "weekSelection_4cbef05b"
					},
					"defaultValue": "\"weekSelection_4cbef05b\""
				},
				{
					"id": 1216,
					"name": "weekday",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 18,
							"character": 28
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "weekday_4cbef05b"
					},
					"defaultValue": "\"weekday_4cbef05b\""
				},
				{
					"id": 1204,
					"name": "wrap",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 6,
							"character": 25
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "wrap_4cbef05b"
					},
					"defaultValue": "\"wrap_4cbef05b\""
				},
				{
					"id": 1210,
					"name": "year",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 12,
							"character": 25
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "year_4cbef05b"
					},
					"defaultValue": "\"year_4cbef05b\""
				},
				{
					"id": 1235,
					"name": "yearComponents",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 37,
							"character": 35
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "yearComponents_4cbef05b"
					},
					"defaultValue": "\"yearComponents_4cbef05b\""
				},
				{
					"id": 1272,
					"name": "yearIsCurrentYear",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 74,
							"character": 38
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "yearIsCurrentYear_4cbef05b"
					},
					"defaultValue": "\"yearIsCurrentYear_4cbef05b\""
				},
				{
					"id": 1271,
					"name": "yearIsHighlighted",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 73,
							"character": 38
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "yearIsHighlighted_4cbef05b"
					},
					"defaultValue": "\"yearIsHighlighted_4cbef05b\""
				},
				{
					"id": 1253,
					"name": "yearOption",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 55,
							"character": 31
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "yearOption_4cbef05b"
					},
					"defaultValue": "\"yearOption_4cbef05b\""
				},
				{
					"id": 1256,
					"name": "yearOptionIsDisabled",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 58,
							"character": 41
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "yearOptionIsDisabled_4cbef05b"
					},
					"defaultValue": "\"yearOptionIsDisabled_4cbef05b\""
				},
				{
					"id": 1262,
					"name": "yearPicker",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
							"line": 64,
							"character": 31
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "yearPicker_4cbef05b"
					},
					"defaultValue": "\"yearPicker_4cbef05b\""
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1281,
						1275,
						1276,
						1265,
						1237,
						1213,
						1212,
						1217,
						1226,
						1225,
						1227,
						1220,
						1222,
						1223,
						1219,
						1221,
						1206,
						1228,
						1218,
						1215,
						1211,
						1236,
						1208,
						1203,
						1258,
						1257,
						1259,
						1205,
						1207,
						1250,
						1201,
						1268,
						1254,
						1260,
						1282,
						1209,
						1234,
						1270,
						1269,
						1252,
						1255,
						1261,
						1267,
						1266,
						1263,
						1278,
						1243,
						1249,
						1239,
						1245,
						1241,
						1247,
						1251,
						1200,
						1224,
						1202,
						1242,
						1248,
						1238,
						1244,
						1240,
						1246,
						1280,
						1199,
						1230,
						1233,
						1214,
						1264,
						1279,
						1273,
						1274,
						1229,
						1232,
						1231,
						1277,
						1216,
						1204,
						1210,
						1235,
						1272,
						1271,
						1253,
						1256,
						1262
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Dependencies/calendar-custom/Calendar.scss.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1394,
			"name": "\"src/Dependencies/calendar-custom/Calendar.types\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/ducnm/Desktop/Add-on/rc365/src/Dependencies/calendar-custom/Calendar.types.js",
			"sources": [
				{
					"fileName": "src/Dependencies/calendar-custom/Calendar.types.js",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1,
			"name": "\"src/Dependencies/calendar-custom/Calendar.types.d\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/ducnm/Desktop/Add-on/rc365/src/Dependencies/calendar-custom/Calendar.types.d.ts",
			"children": [
				{
					"id": 2,
					"name": "ICalendar",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "{@docCategory Calendar}"
					},
					"children": [
						{
							"id": 3,
							"name": "focus",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Sets focus to the selected date."
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 15,
									"character": 7
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 4,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 5,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									],
									"sources": [
										{
											"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
											"line": 15,
											"character": 8
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
							"line": 13,
							"character": 26
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"id": 347,
							"name": "Calendar"
						}
					]
				},
				{
					"id": 321,
					"name": "ICalendarFormatDateCallbacks",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "{@docCategory Calendar}"
					},
					"children": [
						{
							"id": 332,
							"name": "formatDay",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Callback to apply formatting to the days in the Day Picker calendar"
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 267,
									"character": 11
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 333,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 334,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {
												"isExported": true
											},
											"parameters": [
												{
													"id": 335,
													"name": "date",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExported": true
													},
													"type": {
														"type": "reference",
														"name": "Date"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
											"line": 267,
											"character": 12
										}
									]
								}
							}
						},
						{
							"id": 322,
							"name": "formatMonthDayYear",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Callback to apply formatting to mmmm d, yyyy formated dates"
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 259,
									"character": 20
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 323,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 324,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {
												"isExported": true
											},
											"parameters": [
												{
													"id": 325,
													"name": "date",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExported": true
													},
													"type": {
														"type": "reference",
														"name": "Date"
													}
												},
												{
													"id": 326,
													"name": "strings",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExported": true,
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 303,
														"name": "ICalendarStrings"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
											"line": 259,
											"character": 21
										}
									]
								}
							}
						},
						{
							"id": 327,
							"name": "formatMonthYear",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Callback to apply formatting to the month and year in the Day Picker header"
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 263,
									"character": 17
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 328,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 329,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {
												"isExported": true
											},
											"parameters": [
												{
													"id": 330,
													"name": "date",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExported": true
													},
													"type": {
														"type": "reference",
														"name": "Date"
													}
												},
												{
													"id": 331,
													"name": "strings",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExported": true,
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 303,
														"name": "ICalendarStrings"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
											"line": 263,
											"character": 18
										}
									]
								}
							}
						},
						{
							"id": 336,
							"name": "formatYear",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Callback to apply formatting to the year in the Month Picker header"
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 271,
									"character": 12
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 337,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 338,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {
												"isExported": true
											},
											"parameters": [
												{
													"id": 339,
													"name": "date",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExported": true
													},
													"type": {
														"type": "reference",
														"name": "Date"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
											"line": 271,
											"character": 13
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								332,
								322,
								327,
								336
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
							"line": 255,
							"character": 45
						}
					]
				},
				{
					"id": 317,
					"name": "ICalendarIconStrings",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "{@docCategory Calendar}"
					},
					"children": [
						{
							"id": 320,
							"name": "closeIcon",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Close icon",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "'CalculatorMultiply'\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 250,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 318,
							"name": "leftNavigation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "FabricMDL2Icons name for the left navigation icon.  Previous default: ChevronLeft.",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "'Up'\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 240,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 319,
							"name": "rightNavigation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "FabricMDL2Icons name for the right navigation icon.  Previous default: ChevronRight.",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "'Down'\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 245,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								320,
								318,
								319
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
							"line": 235,
							"character": 37
						}
					]
				},
				{
					"id": 6,
					"name": "ICalendarProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "{@docCategory Calendar}"
					},
					"children": [
						{
							"id": 69,
							"name": "about",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1773,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 69,
								"name": "HTMLAttributes.about"
							}
						},
						{
							"id": 52,
							"name": "accessKey",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1749,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 52,
								"name": "HTMLAttributes.accessKey"
							}
						},
						{
							"id": 41,
							"name": "allFocusable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Allows all dates and buttons to be focused, including disabled ones",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 165,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 91,
							"name": "aria-activedescendant",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application."
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1556,
									"character": 31
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 91,
								"name": "AriaAttributes.'aria-activedescendant'"
							}
						},
						{
							"id": 92,
							"name": "aria-atomic",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1558,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "stringLiteral",
										"value": "false"
									},
									{
										"type": "stringLiteral",
										"value": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 92,
								"name": "AriaAttributes.'aria-atomic'"
							}
						},
						{
							"id": 93,
							"name": "aria-autocomplete",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made."
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1563,
									"character": 27
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "none"
									},
									{
										"type": "stringLiteral",
										"value": "inline"
									},
									{
										"type": "stringLiteral",
										"value": "list"
									},
									{
										"type": "stringLiteral",
										"value": "both"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 93,
								"name": "AriaAttributes.'aria-autocomplete'"
							}
						},
						{
							"id": 94,
							"name": "aria-busy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user."
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1565,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "stringLiteral",
										"value": "false"
									},
									{
										"type": "stringLiteral",
										"value": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 94,
								"name": "AriaAttributes.'aria-busy'"
							}
						},
						{
							"id": 95,
							"name": "aria-checked",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.",
								"tags": [
									{
										"tag": "see",
										"text": "aria-pressed @see aria-selected.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1570,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "stringLiteral",
										"value": "false"
									},
									{
										"type": "stringLiteral",
										"value": "mixed"
									},
									{
										"type": "stringLiteral",
										"value": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 95,
								"name": "AriaAttributes.'aria-checked'"
							}
						},
						{
							"id": 96,
							"name": "aria-colcount",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Defines the total number of columns in a table, grid, or treegrid.",
								"tags": [
									{
										"tag": "see",
										"text": "aria-colindex.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1575,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 96,
								"name": "AriaAttributes.'aria-colcount'"
							}
						},
						{
							"id": 97,
							"name": "aria-colindex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.",
								"tags": [
									{
										"tag": "see",
										"text": "aria-colcount @see aria-colspan.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1580,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 97,
								"name": "AriaAttributes.'aria-colindex'"
							}
						},
						{
							"id": 98,
							"name": "aria-colspan",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.",
								"tags": [
									{
										"tag": "see",
										"text": "aria-colindex @see aria-rowspan.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1585,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 98,
								"name": "AriaAttributes.'aria-colspan'"
							}
						},
						{
							"id": 99,
							"name": "aria-controls",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Identifies the element (or elements) whose contents or presence are controlled by the current element.",
								"tags": [
									{
										"tag": "see",
										"text": "aria-owns.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1590,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 99,
								"name": "AriaAttributes.'aria-controls'"
							}
						},
						{
							"id": 100,
							"name": "aria-current",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Indicates the element that represents the current item within a container or set of related elements."
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1592,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "stringLiteral",
										"value": "false"
									},
									{
										"type": "stringLiteral",
										"value": "true"
									},
									{
										"type": "stringLiteral",
										"value": "page"
									},
									{
										"type": "stringLiteral",
										"value": "step"
									},
									{
										"type": "stringLiteral",
										"value": "location"
									},
									{
										"type": "stringLiteral",
										"value": "date"
									},
									{
										"type": "stringLiteral",
										"value": "time"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 100,
								"name": "AriaAttributes.'aria-current'"
							}
						},
						{
							"id": 101,
							"name": "aria-describedby",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Identifies the element (or elements) that describes the object.",
								"tags": [
									{
										"tag": "see",
										"text": "aria-labelledby\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1597,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 101,
								"name": "AriaAttributes.'aria-describedby'"
							}
						},
						{
							"id": 102,
							"name": "aria-details",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Identifies the element that provides a detailed, extended description for the object.",
								"tags": [
									{
										"tag": "see",
										"text": "aria-describedby.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1602,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 102,
								"name": "AriaAttributes.'aria-details'"
							}
						},
						{
							"id": 103,
							"name": "aria-disabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.",
								"tags": [
									{
										"tag": "see",
										"text": "aria-hidden @see aria-readonly.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1607,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "stringLiteral",
										"value": "false"
									},
									{
										"type": "stringLiteral",
										"value": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 103,
								"name": "AriaAttributes.'aria-disabled'"
							}
						},
						{
							"id": 104,
							"name": "aria-dropeffect",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Indicates what functions can be performed when a dragged object is released on the drop target.",
								"tags": [
									{
										"tag": "deprecated",
										"text": "in ARIA 1.1\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1612,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "none"
									},
									{
										"type": "stringLiteral",
										"value": "copy"
									},
									{
										"type": "stringLiteral",
										"value": "execute"
									},
									{
										"type": "stringLiteral",
										"value": "link"
									},
									{
										"type": "stringLiteral",
										"value": "move"
									},
									{
										"type": "stringLiteral",
										"value": "popup"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 104,
								"name": "AriaAttributes.'aria-dropeffect'"
							}
						},
						{
							"id": 105,
							"name": "aria-errormessage",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Identifies the element that provides an error message for the object.",
								"tags": [
									{
										"tag": "see",
										"text": "aria-invalid @see aria-describedby.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1617,
									"character": 27
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 105,
								"name": "AriaAttributes.'aria-errormessage'"
							}
						},
						{
							"id": 106,
							"name": "aria-expanded",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed."
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1619,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "stringLiteral",
										"value": "false"
									},
									{
										"type": "stringLiteral",
										"value": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 106,
								"name": "AriaAttributes.'aria-expanded'"
							}
						},
						{
							"id": 107,
							"name": "aria-flowto",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order."
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1624,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 107,
								"name": "AriaAttributes.'aria-flowto'"
							}
						},
						{
							"id": 108,
							"name": "aria-grabbed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Indicates an element's \"grabbed\" state in a drag-and-drop operation.",
								"tags": [
									{
										"tag": "deprecated",
										"text": "in ARIA 1.1\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1629,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "stringLiteral",
										"value": "false"
									},
									{
										"type": "stringLiteral",
										"value": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 108,
								"name": "AriaAttributes.'aria-grabbed'"
							}
						},
						{
							"id": 109,
							"name": "aria-haspopup",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1631,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "stringLiteral",
										"value": "false"
									},
									{
										"type": "stringLiteral",
										"value": "true"
									},
									{
										"type": "stringLiteral",
										"value": "menu"
									},
									{
										"type": "stringLiteral",
										"value": "listbox"
									},
									{
										"type": "stringLiteral",
										"value": "tree"
									},
									{
										"type": "stringLiteral",
										"value": "grid"
									},
									{
										"type": "stringLiteral",
										"value": "dialog"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 109,
								"name": "AriaAttributes.'aria-haspopup'"
							}
						},
						{
							"id": 110,
							"name": "aria-hidden",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Indicates whether the element is exposed to an accessibility API.",
								"tags": [
									{
										"tag": "see",
										"text": "aria-disabled.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1636,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "stringLiteral",
										"value": "false"
									},
									{
										"type": "stringLiteral",
										"value": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 110,
								"name": "AriaAttributes.'aria-hidden'"
							}
						},
						{
							"id": 111,
							"name": "aria-invalid",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Indicates the entered value does not conform to the format expected by the application.",
								"tags": [
									{
										"tag": "see",
										"text": "aria-errormessage.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1641,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "stringLiteral",
										"value": "false"
									},
									{
										"type": "stringLiteral",
										"value": "true"
									},
									{
										"type": "stringLiteral",
										"value": "grammar"
									},
									{
										"type": "stringLiteral",
										"value": "spelling"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 111,
								"name": "AriaAttributes.'aria-invalid'"
							}
						},
						{
							"id": 112,
							"name": "aria-keyshortcuts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element."
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1643,
									"character": 27
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 112,
								"name": "AriaAttributes.'aria-keyshortcuts'"
							}
						},
						{
							"id": 113,
							"name": "aria-label",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Defines a string value that labels the current element.",
								"tags": [
									{
										"tag": "see",
										"text": "aria-labelledby.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1648,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 113,
								"name": "AriaAttributes.'aria-label'"
							}
						},
						{
							"id": 114,
							"name": "aria-labelledby",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Identifies the element (or elements) that labels the current element.",
								"tags": [
									{
										"tag": "see",
										"text": "aria-describedby.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1653,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 114,
								"name": "AriaAttributes.'aria-labelledby'"
							}
						},
						{
							"id": 115,
							"name": "aria-level",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Defines the hierarchical level of an element within a structure."
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1655,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 115,
								"name": "AriaAttributes.'aria-level'"
							}
						},
						{
							"id": 116,
							"name": "aria-live",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1657,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "off"
									},
									{
										"type": "stringLiteral",
										"value": "assertive"
									},
									{
										"type": "stringLiteral",
										"value": "polite"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 116,
								"name": "AriaAttributes.'aria-live'"
							}
						},
						{
							"id": 117,
							"name": "aria-modal",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Indicates whether an element is modal when displayed."
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1659,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "stringLiteral",
										"value": "false"
									},
									{
										"type": "stringLiteral",
										"value": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 117,
								"name": "AriaAttributes.'aria-modal'"
							}
						},
						{
							"id": 118,
							"name": "aria-multiline",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Indicates whether a text box accepts multiple lines of input or only a single line."
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1661,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "stringLiteral",
										"value": "false"
									},
									{
										"type": "stringLiteral",
										"value": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 118,
								"name": "AriaAttributes.'aria-multiline'"
							}
						},
						{
							"id": 119,
							"name": "aria-multiselectable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Indicates that the user may select more than one item from the current selectable descendants."
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1663,
									"character": 30
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "stringLiteral",
										"value": "false"
									},
									{
										"type": "stringLiteral",
										"value": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 119,
								"name": "AriaAttributes.'aria-multiselectable'"
							}
						},
						{
							"id": 120,
							"name": "aria-orientation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1665,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "horizontal"
									},
									{
										"type": "stringLiteral",
										"value": "vertical"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 120,
								"name": "AriaAttributes.'aria-orientation'"
							}
						},
						{
							"id": 121,
							"name": "aria-owns",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.",
								"tags": [
									{
										"tag": "see",
										"text": "aria-controls.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1671,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 121,
								"name": "AriaAttributes.'aria-owns'"
							}
						},
						{
							"id": 122,
							"name": "aria-placeholder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format."
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1676,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 122,
								"name": "AriaAttributes.'aria-placeholder'"
							}
						},
						{
							"id": 123,
							"name": "aria-posinset",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.",
								"tags": [
									{
										"tag": "see",
										"text": "aria-setsize.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1681,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 123,
								"name": "AriaAttributes.'aria-posinset'"
							}
						},
						{
							"id": 124,
							"name": "aria-pressed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Indicates the current \"pressed\" state of toggle buttons.",
								"tags": [
									{
										"tag": "see",
										"text": "aria-checked @see aria-selected.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1686,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "stringLiteral",
										"value": "false"
									},
									{
										"type": "stringLiteral",
										"value": "mixed"
									},
									{
										"type": "stringLiteral",
										"value": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 124,
								"name": "AriaAttributes.'aria-pressed'"
							}
						},
						{
							"id": 125,
							"name": "aria-readonly",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Indicates that the element is not editable, but is otherwise operable.",
								"tags": [
									{
										"tag": "see",
										"text": "aria-disabled.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1691,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "stringLiteral",
										"value": "false"
									},
									{
										"type": "stringLiteral",
										"value": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 125,
								"name": "AriaAttributes.'aria-readonly'"
							}
						},
						{
							"id": 126,
							"name": "aria-relevant",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.",
								"tags": [
									{
										"tag": "see",
										"text": "aria-atomic.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1696,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "additions"
									},
									{
										"type": "stringLiteral",
										"value": "additions text"
									},
									{
										"type": "stringLiteral",
										"value": "all"
									},
									{
										"type": "stringLiteral",
										"value": "removals"
									},
									{
										"type": "stringLiteral",
										"value": "text"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 126,
								"name": "AriaAttributes.'aria-relevant'"
							}
						},
						{
							"id": 127,
							"name": "aria-required",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Indicates that user input is required on the element before a form may be submitted."
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1698,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "stringLiteral",
										"value": "false"
									},
									{
										"type": "stringLiteral",
										"value": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 127,
								"name": "AriaAttributes.'aria-required'"
							}
						},
						{
							"id": 128,
							"name": "aria-roledescription",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Defines a human-readable, author-localized description for the role of an element."
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1700,
									"character": 30
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 128,
								"name": "AriaAttributes.'aria-roledescription'"
							}
						},
						{
							"id": 129,
							"name": "aria-rowcount",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Defines the total number of rows in a table, grid, or treegrid.",
								"tags": [
									{
										"tag": "see",
										"text": "aria-rowindex.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1705,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 129,
								"name": "AriaAttributes.'aria-rowcount'"
							}
						},
						{
							"id": 130,
							"name": "aria-rowindex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.",
								"tags": [
									{
										"tag": "see",
										"text": "aria-rowcount @see aria-rowspan.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1710,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 130,
								"name": "AriaAttributes.'aria-rowindex'"
							}
						},
						{
							"id": 131,
							"name": "aria-rowspan",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.",
								"tags": [
									{
										"tag": "see",
										"text": "aria-rowindex @see aria-colspan.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1715,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 131,
								"name": "AriaAttributes.'aria-rowspan'"
							}
						},
						{
							"id": 132,
							"name": "aria-selected",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Indicates the current \"selected\" state of various widgets.",
								"tags": [
									{
										"tag": "see",
										"text": "aria-checked @see aria-pressed.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1720,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "stringLiteral",
										"value": "false"
									},
									{
										"type": "stringLiteral",
										"value": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 132,
								"name": "AriaAttributes.'aria-selected'"
							}
						},
						{
							"id": 133,
							"name": "aria-setsize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.",
								"tags": [
									{
										"tag": "see",
										"text": "aria-posinset.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1725,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 133,
								"name": "AriaAttributes.'aria-setsize'"
							}
						},
						{
							"id": 134,
							"name": "aria-sort",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Indicates if items in a table or grid are sorted in ascending or descending order."
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1727,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "none"
									},
									{
										"type": "stringLiteral",
										"value": "ascending"
									},
									{
										"type": "stringLiteral",
										"value": "descending"
									},
									{
										"type": "stringLiteral",
										"value": "other"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 134,
								"name": "AriaAttributes.'aria-sort'"
							}
						},
						{
							"id": 135,
							"name": "aria-valuemax",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Defines the maximum allowed value for a range widget."
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1729,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 135,
								"name": "AriaAttributes.'aria-valuemax'"
							}
						},
						{
							"id": 136,
							"name": "aria-valuemin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Defines the minimum allowed value for a range widget."
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1731,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 136,
								"name": "AriaAttributes.'aria-valuemin'"
							}
						},
						{
							"id": 137,
							"name": "aria-valuenow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Defines the current value for a range widget.",
								"tags": [
									{
										"tag": "see",
										"text": "aria-valuetext.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1736,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 137,
								"name": "AriaAttributes.'aria-valuenow'"
							}
						},
						{
							"id": 138,
							"name": "aria-valuetext",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Defines the human readable text alternative of aria-valuenow for a range widget."
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1738,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 138,
								"name": "AriaAttributes.'aria-valuetext'"
							}
						},
						{
							"id": 77,
							"name": "autoCapitalize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1783,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 77,
								"name": "HTMLAttributes.autoCapitalize"
							}
						},
						{
							"id": 78,
							"name": "autoCorrect",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1784,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 78,
								"name": "HTMLAttributes.autoCorrect"
							}
						},
						{
							"id": 24,
							"name": "autoNavigateOnSelection",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the month view should automatically navigate to the next or previous date range\ndepending on the selected date. If this property is set to true and the currently displayed\nmonth is March 2017, if the user clicks on a day outside the month, i.e., April 1st, the\npicker will automatically navigate to the month of April.",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 85,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 79,
							"name": "autoSave",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1785,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 79,
								"name": "HTMLAttributes.autoSave"
							}
						},
						{
							"id": 47,
							"name": "calendarData",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 124,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 47,
								"name": "ICalendarPropsFixed.calendarData"
							}
						},
						{
							"id": 139,
							"name": "children",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1346,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNode"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 139,
								"name": "DOMAttributes.children"
							}
						},
						{
							"id": 8,
							"name": "className",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Optional class name to add to the root element."
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 32,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"overwrites": {
								"type": "reference",
								"name": "HTMLAttributes.className"
							}
						},
						{
							"id": 80,
							"name": "color",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1786,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 80,
								"name": "HTMLAttributes.color"
							}
						},
						{
							"id": 7,
							"name": "componentRef",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Optional callback to access the ICalendar interface. Use this instead of ref for accessing\nthe public methods and properties of the component."
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 28,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2,
										"name": "ICalendar"
									}
								],
								"name": "IRefObject"
							},
							"overwrites": {
								"type": "reference",
								"name": "IBaseProps.componentRef"
							}
						},
						{
							"id": 53,
							"name": "contentEditable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1751,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Booleanish"
									},
									{
										"type": "stringLiteral",
										"value": "inherit"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 53,
								"name": "HTMLAttributes.contentEditable"
							}
						},
						{
							"id": 54,
							"name": "contextMenu",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1752,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 54,
								"name": "HTMLAttributes.contextMenu"
							}
						},
						{
							"id": 140,
							"name": "dangerouslySetInnerHTML",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1347,
									"character": 31
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 141,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"children": [
												{
													"id": 142,
													"name": "__html",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/react/index.d.ts",
															"line": 1348,
															"character": 18
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														142
													]
												}
											]
										}
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 140,
								"name": "DOMAttributes.dangerouslySetInnerHTML"
							}
						},
						{
							"id": 70,
							"name": "datatype",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1774,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 70,
								"name": "HTMLAttributes.datatype"
							}
						},
						{
							"id": 23,
							"name": "dateRangeType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The date range type indicating how  many days should be selected as the user\nselects days",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "DateRangeType.Day\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 77,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "DateRangeType"
							}
						},
						{
							"id": 33,
							"name": "dateTimeFormatter",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Apply additional formating to dates, for example localized date formatting."
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 127,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"id": 321,
								"name": "ICalendarFormatDateCallbacks"
							}
						},
						{
							"id": 48,
							"name": "defaultChecked",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1743,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 48,
								"name": "HTMLAttributes.defaultChecked"
							}
						},
						{
							"id": 49,
							"name": "defaultValue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1744,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "ReadonlyArray"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 49,
								"name": "HTMLAttributes.defaultValue"
							}
						},
						{
							"id": 55,
							"name": "dir",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1753,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 55,
								"name": "HTMLAttributes.dir"
							}
						},
						{
							"id": 56,
							"name": "draggable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1754,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "Booleanish"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 56,
								"name": "HTMLAttributes.draggable"
							}
						},
						{
							"id": 22,
							"name": "firstDayOfWeek",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The first day of the week for your locale.",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "DayOfWeek.Sunday\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 71,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"name": "DayOfWeek"
							}
						},
						{
							"id": 32,
							"name": "firstWeekOfYear",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Defines when the first week of the year should start, FirstWeekOfYear.FirstDay,\nFirstWeekOfYear.FirstFullWeek or FirstWeekOfYear.FirstFourDayWeek are the possible values",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "FirstWeekOfYear.FirstDay\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 123,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "FirstWeekOfYear"
							}
						},
						{
							"id": 57,
							"name": "hidden",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1755,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 57,
								"name": "HTMLAttributes.hidden"
							}
						},
						{
							"id": 28,
							"name": "highlightCurrentMonth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the month picker should highlight the current month",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 103,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 29,
							"name": "highlightSelectedMonth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the month picker should highlight the selected month",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 108,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 58,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1756,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 58,
								"name": "HTMLAttributes.id"
							}
						},
						{
							"id": 71,
							"name": "inlist",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1775,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 71,
								"name": "HTMLAttributes.inlist"
							}
						},
						{
							"id": 89,
							"name": "inputMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Hints at the type of data that might be entered by the user while editing the element or its contents",
								"tags": [
									{
										"tag": "see",
										"text": "https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1801,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "none"
									},
									{
										"type": "stringLiteral",
										"value": "text"
									},
									{
										"type": "stringLiteral",
										"value": "tel"
									},
									{
										"type": "stringLiteral",
										"value": "url"
									},
									{
										"type": "stringLiteral",
										"value": "email"
									},
									{
										"type": "stringLiteral",
										"value": "numeric"
									},
									{
										"type": "stringLiteral",
										"value": "decimal"
									},
									{
										"type": "stringLiteral",
										"value": "search"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 89,
								"name": "HTMLAttributes.inputMode"
							}
						},
						{
							"id": 90,
							"name": "is",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Specify that a standard HTML element should behave like a defined custom built-in element",
								"tags": [
									{
										"tag": "see",
										"text": "https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1806,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 90,
								"name": "HTMLAttributes.is"
							}
						},
						{
							"id": 18,
							"name": "isDayPickerVisible",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the day picker is shown beside the month picker or hidden.",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "true\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 53,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 17,
							"name": "isMonthPickerVisible",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the month picker is shown beside the day picker or hidden.",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "true\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 48,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 84,
							"name": "itemID",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1790,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 84,
								"name": "HTMLAttributes.itemID"
							}
						},
						{
							"id": 81,
							"name": "itemProp",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1787,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 81,
								"name": "HTMLAttributes.itemProp"
							}
						},
						{
							"id": 85,
							"name": "itemRef",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1791,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 85,
								"name": "HTMLAttributes.itemRef"
							}
						},
						{
							"id": 82,
							"name": "itemScope",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1788,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 82,
								"name": "HTMLAttributes.itemScope"
							}
						},
						{
							"id": 83,
							"name": "itemType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1789,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 83,
								"name": "HTMLAttributes.itemType"
							}
						},
						{
							"id": 59,
							"name": "lang",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1757,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 59,
								"name": "HTMLAttributes.lang"
							}
						},
						{
							"id": 35,
							"name": "maxDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If set the Calendar will not allow navigation to or selection of a date later than this value."
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 135,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 34,
							"name": "minDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If set the Calendar will not allow navigation to or selection of a date earlier than this value."
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 131,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 30,
							"name": "navigationIcons",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Customize navigation icons using ICalendarIconStrings"
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 112,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"id": 317,
								"name": "ICalendarIconStrings"
							}
						},
						{
							"id": 181,
							"name": "onAbort",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1402,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 181,
								"name": "DOMAttributes.onAbort"
							}
						},
						{
							"id": 182,
							"name": "onAbortCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1403,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 182,
								"name": "DOMAttributes.onAbortCapture"
							}
						},
						{
							"id": 297,
							"name": "onAnimationEnd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1532,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "AnimationEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 297,
								"name": "DOMAttributes.onAnimationEnd"
							}
						},
						{
							"id": 298,
							"name": "onAnimationEndCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1533,
									"character": 29
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "AnimationEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 298,
								"name": "DOMAttributes.onAnimationEndCapture"
							}
						},
						{
							"id": 299,
							"name": "onAnimationIteration",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1534,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "AnimationEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 299,
								"name": "DOMAttributes.onAnimationIteration"
							}
						},
						{
							"id": 300,
							"name": "onAnimationIterationCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1535,
									"character": 35
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "AnimationEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 300,
								"name": "DOMAttributes.onAnimationIterationCapture"
							}
						},
						{
							"id": 295,
							"name": "onAnimationStart",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1530,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "AnimationEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 295,
								"name": "DOMAttributes.onAnimationStart"
							}
						},
						{
							"id": 296,
							"name": "onAnimationStartCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1531,
									"character": 31
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "AnimationEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 296,
								"name": "DOMAttributes.onAnimationStartCapture"
							}
						},
						{
							"id": 225,
							"name": "onAuxClick",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1448,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "MouseEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 225,
								"name": "DOMAttributes.onAuxClick"
							}
						},
						{
							"id": 226,
							"name": "onAuxClickCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1449,
									"character": 25
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "MouseEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 226,
								"name": "DOMAttributes.onAuxClickCapture"
							}
						},
						{
							"id": 161,
							"name": "onBeforeInput",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1376,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "FormEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 161,
								"name": "DOMAttributes.onBeforeInput"
							}
						},
						{
							"id": 162,
							"name": "onBeforeInputCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1377,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "FormEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 162,
								"name": "DOMAttributes.onBeforeInputCapture"
							}
						},
						{
							"id": 157,
							"name": "onBlur",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1370,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "FocusEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 157,
								"name": "DOMAttributes.onBlur"
							}
						},
						{
							"id": 158,
							"name": "onBlurCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1371,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "FocusEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 158,
								"name": "DOMAttributes.onBlurCapture"
							}
						},
						{
							"id": 183,
							"name": "onCanPlay",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1404,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 183,
								"name": "DOMAttributes.onCanPlay"
							}
						},
						{
							"id": 184,
							"name": "onCanPlayCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1405,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 184,
								"name": "DOMAttributes.onCanPlayCapture"
							}
						},
						{
							"id": 185,
							"name": "onCanPlayThrough",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1406,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 185,
								"name": "DOMAttributes.onCanPlayThrough"
							}
						},
						{
							"id": 186,
							"name": "onCanPlayThroughCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1407,
									"character": 31
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 186,
								"name": "DOMAttributes.onCanPlayThroughCapture"
							}
						},
						{
							"id": 159,
							"name": "onChange",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1374,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "FormEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 159,
								"name": "DOMAttributes.onChange"
							}
						},
						{
							"id": 160,
							"name": "onChangeCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1375,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "FormEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 160,
								"name": "DOMAttributes.onChangeCapture"
							}
						},
						{
							"id": 227,
							"name": "onClick",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1450,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "MouseEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 227,
								"name": "DOMAttributes.onClick"
							}
						},
						{
							"id": 228,
							"name": "onClickCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1451,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "MouseEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 228,
								"name": "DOMAttributes.onClickCapture"
							}
						},
						{
							"id": 149,
							"name": "onCompositionEnd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1360,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "CompositionEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 149,
								"name": "DOMAttributes.onCompositionEnd"
							}
						},
						{
							"id": 150,
							"name": "onCompositionEndCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1361,
									"character": 31
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "CompositionEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 150,
								"name": "DOMAttributes.onCompositionEndCapture"
							}
						},
						{
							"id": 151,
							"name": "onCompositionStart",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1362,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "CompositionEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 151,
								"name": "DOMAttributes.onCompositionStart"
							}
						},
						{
							"id": 152,
							"name": "onCompositionStartCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1363,
									"character": 33
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "CompositionEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 152,
								"name": "DOMAttributes.onCompositionStartCapture"
							}
						},
						{
							"id": 153,
							"name": "onCompositionUpdate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1364,
									"character": 27
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "CompositionEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 153,
								"name": "DOMAttributes.onCompositionUpdate"
							}
						},
						{
							"id": 154,
							"name": "onCompositionUpdateCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1365,
									"character": 34
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "CompositionEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 154,
								"name": "DOMAttributes.onCompositionUpdateCapture"
							}
						},
						{
							"id": 229,
							"name": "onContextMenu",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1452,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "MouseEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 229,
								"name": "DOMAttributes.onContextMenu"
							}
						},
						{
							"id": 230,
							"name": "onContextMenuCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1453,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "MouseEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 230,
								"name": "DOMAttributes.onContextMenuCapture"
							}
						},
						{
							"id": 143,
							"name": "onCopy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1352,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ClipboardEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 143,
								"name": "DOMAttributes.onCopy"
							}
						},
						{
							"id": 144,
							"name": "onCopyCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1353,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ClipboardEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 144,
								"name": "DOMAttributes.onCopyCapture"
							}
						},
						{
							"id": 145,
							"name": "onCut",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1354,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ClipboardEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 145,
								"name": "DOMAttributes.onCut"
							}
						},
						{
							"id": 146,
							"name": "onCutCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1355,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ClipboardEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 146,
								"name": "DOMAttributes.onCutCapture"
							}
						},
						{
							"id": 14,
							"name": "onDismiss",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Callback issued when calendar is closed"
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 43,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 15,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 16,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 231,
							"name": "onDoubleClick",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1454,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "MouseEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 231,
								"name": "DOMAttributes.onDoubleClick"
							}
						},
						{
							"id": 232,
							"name": "onDoubleClickCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1455,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "MouseEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 232,
								"name": "DOMAttributes.onDoubleClickCapture"
							}
						},
						{
							"id": 233,
							"name": "onDrag",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1456,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "DragEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 233,
								"name": "DOMAttributes.onDrag"
							}
						},
						{
							"id": 234,
							"name": "onDragCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1457,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "DragEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 234,
								"name": "DOMAttributes.onDragCapture"
							}
						},
						{
							"id": 235,
							"name": "onDragEnd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1458,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "DragEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 235,
								"name": "DOMAttributes.onDragEnd"
							}
						},
						{
							"id": 236,
							"name": "onDragEndCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1459,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "DragEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 236,
								"name": "DOMAttributes.onDragEndCapture"
							}
						},
						{
							"id": 237,
							"name": "onDragEnter",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1460,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "DragEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 237,
								"name": "DOMAttributes.onDragEnter"
							}
						},
						{
							"id": 238,
							"name": "onDragEnterCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1461,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "DragEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 238,
								"name": "DOMAttributes.onDragEnterCapture"
							}
						},
						{
							"id": 239,
							"name": "onDragExit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1462,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "DragEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 239,
								"name": "DOMAttributes.onDragExit"
							}
						},
						{
							"id": 240,
							"name": "onDragExitCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1463,
									"character": 25
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "DragEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 240,
								"name": "DOMAttributes.onDragExitCapture"
							}
						},
						{
							"id": 241,
							"name": "onDragLeave",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1464,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "DragEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 241,
								"name": "DOMAttributes.onDragLeave"
							}
						},
						{
							"id": 242,
							"name": "onDragLeaveCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1465,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "DragEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 242,
								"name": "DOMAttributes.onDragLeaveCapture"
							}
						},
						{
							"id": 243,
							"name": "onDragOver",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1466,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "DragEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 243,
								"name": "DOMAttributes.onDragOver"
							}
						},
						{
							"id": 244,
							"name": "onDragOverCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1467,
									"character": 25
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "DragEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 244,
								"name": "DOMAttributes.onDragOverCapture"
							}
						},
						{
							"id": 245,
							"name": "onDragStart",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1468,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "DragEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 245,
								"name": "DOMAttributes.onDragStart"
							}
						},
						{
							"id": 246,
							"name": "onDragStartCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1469,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "DragEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 246,
								"name": "DOMAttributes.onDragStartCapture"
							}
						},
						{
							"id": 247,
							"name": "onDrop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1470,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "DragEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 247,
								"name": "DOMAttributes.onDrop"
							}
						},
						{
							"id": 248,
							"name": "onDropCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1471,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "DragEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 248,
								"name": "DOMAttributes.onDropCapture"
							}
						},
						{
							"id": 187,
							"name": "onDurationChange",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1408,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 187,
								"name": "DOMAttributes.onDurationChange"
							}
						},
						{
							"id": 188,
							"name": "onDurationChangeCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1409,
									"character": 31
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 188,
								"name": "DOMAttributes.onDurationChangeCapture"
							}
						},
						{
							"id": 189,
							"name": "onEmptied",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1410,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 189,
								"name": "DOMAttributes.onEmptied"
							}
						},
						{
							"id": 190,
							"name": "onEmptiedCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1411,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 190,
								"name": "DOMAttributes.onEmptiedCapture"
							}
						},
						{
							"id": 191,
							"name": "onEncrypted",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1412,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 191,
								"name": "DOMAttributes.onEncrypted"
							}
						},
						{
							"id": 192,
							"name": "onEncryptedCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1413,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 192,
								"name": "DOMAttributes.onEncryptedCapture"
							}
						},
						{
							"id": 193,
							"name": "onEnded",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1414,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 193,
								"name": "DOMAttributes.onEnded"
							}
						},
						{
							"id": 194,
							"name": "onEndedCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1415,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 194,
								"name": "DOMAttributes.onEndedCapture"
							}
						},
						{
							"id": 173,
							"name": "onError",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1390,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 173,
								"name": "DOMAttributes.onError"
							}
						},
						{
							"id": 174,
							"name": "onErrorCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1391,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 174,
								"name": "DOMAttributes.onErrorCapture"
							}
						},
						{
							"id": 155,
							"name": "onFocus",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1368,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "FocusEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 155,
								"name": "DOMAttributes.onFocus"
							}
						},
						{
							"id": 156,
							"name": "onFocusCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1369,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "FocusEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 156,
								"name": "DOMAttributes.onFocusCapture"
							}
						},
						{
							"id": 287,
							"name": "onGotPointerCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1516,
									"character": 27
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "PointerEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 287,
								"name": "DOMAttributes.onGotPointerCapture"
							}
						},
						{
							"id": 288,
							"name": "onGotPointerCaptureCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1517,
									"character": 34
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "PointerEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 288,
								"name": "DOMAttributes.onGotPointerCaptureCapture"
							}
						},
						{
							"id": 42,
							"name": "onHighLight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 123,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 43,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 44,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"parameters": [
														{
															"id": 45,
															"name": "day",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "reference",
																"name": "IDayInfo"
															}
														},
														{
															"id": 46,
															"name": "rangeDate",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "reference",
																"id": 654,
																"name": "rangeDateExample"
															}
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												}
											]
										}
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 42,
								"name": "ICalendarPropsFixed.onHighLight"
							}
						},
						{
							"id": 163,
							"name": "onInput",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1378,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "FormEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 163,
								"name": "DOMAttributes.onInput"
							}
						},
						{
							"id": 164,
							"name": "onInputCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1379,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "FormEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 164,
								"name": "DOMAttributes.onInputCapture"
							}
						},
						{
							"id": 169,
							"name": "onInvalid",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1384,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "FormEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 169,
								"name": "DOMAttributes.onInvalid"
							}
						},
						{
							"id": 170,
							"name": "onInvalidCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1385,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "FormEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 170,
								"name": "DOMAttributes.onInvalidCapture"
							}
						},
						{
							"id": 175,
							"name": "onKeyDown",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1394,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "KeyboardEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 175,
								"name": "DOMAttributes.onKeyDown"
							}
						},
						{
							"id": 176,
							"name": "onKeyDownCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1395,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "KeyboardEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 176,
								"name": "DOMAttributes.onKeyDownCapture"
							}
						},
						{
							"id": 177,
							"name": "onKeyPress",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1396,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "KeyboardEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 177,
								"name": "DOMAttributes.onKeyPress"
							}
						},
						{
							"id": 178,
							"name": "onKeyPressCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1397,
									"character": 25
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "KeyboardEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 178,
								"name": "DOMAttributes.onKeyPressCapture"
							}
						},
						{
							"id": 179,
							"name": "onKeyUp",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1398,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "KeyboardEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 179,
								"name": "DOMAttributes.onKeyUp"
							}
						},
						{
							"id": 180,
							"name": "onKeyUpCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1399,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "KeyboardEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 180,
								"name": "DOMAttributes.onKeyUpCapture"
							}
						},
						{
							"id": 171,
							"name": "onLoad",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1388,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 171,
								"name": "DOMAttributes.onLoad"
							}
						},
						{
							"id": 172,
							"name": "onLoadCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1389,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 172,
								"name": "DOMAttributes.onLoadCapture"
							}
						},
						{
							"id": 199,
							"name": "onLoadStart",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1420,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 199,
								"name": "DOMAttributes.onLoadStart"
							}
						},
						{
							"id": 200,
							"name": "onLoadStartCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1421,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 200,
								"name": "DOMAttributes.onLoadStartCapture"
							}
						},
						{
							"id": 195,
							"name": "onLoadedData",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1416,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 195,
								"name": "DOMAttributes.onLoadedData"
							}
						},
						{
							"id": 196,
							"name": "onLoadedDataCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1417,
									"character": 27
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 196,
								"name": "DOMAttributes.onLoadedDataCapture"
							}
						},
						{
							"id": 197,
							"name": "onLoadedMetadata",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1418,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 197,
								"name": "DOMAttributes.onLoadedMetadata"
							}
						},
						{
							"id": 198,
							"name": "onLoadedMetadataCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1419,
									"character": 31
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 198,
								"name": "DOMAttributes.onLoadedMetadataCapture"
							}
						},
						{
							"id": 289,
							"name": "onLostPointerCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1518,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "PointerEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 289,
								"name": "DOMAttributes.onLostPointerCapture"
							}
						},
						{
							"id": 290,
							"name": "onLostPointerCaptureCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1519,
									"character": 35
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "PointerEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 290,
								"name": "DOMAttributes.onLostPointerCaptureCapture"
							}
						},
						{
							"id": 249,
							"name": "onMouseDown",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1472,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "MouseEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 249,
								"name": "DOMAttributes.onMouseDown"
							}
						},
						{
							"id": 250,
							"name": "onMouseDownCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1473,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "MouseEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 250,
								"name": "DOMAttributes.onMouseDownCapture"
							}
						},
						{
							"id": 251,
							"name": "onMouseEnter",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1474,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "MouseEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 251,
								"name": "DOMAttributes.onMouseEnter"
							}
						},
						{
							"id": 252,
							"name": "onMouseLeave",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1475,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "MouseEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 252,
								"name": "DOMAttributes.onMouseLeave"
							}
						},
						{
							"id": 253,
							"name": "onMouseMove",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1476,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "MouseEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 253,
								"name": "DOMAttributes.onMouseMove"
							}
						},
						{
							"id": 254,
							"name": "onMouseMoveCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1477,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "MouseEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 254,
								"name": "DOMAttributes.onMouseMoveCapture"
							}
						},
						{
							"id": 255,
							"name": "onMouseOut",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1478,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "MouseEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 255,
								"name": "DOMAttributes.onMouseOut"
							}
						},
						{
							"id": 256,
							"name": "onMouseOutCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1479,
									"character": 25
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "MouseEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 256,
								"name": "DOMAttributes.onMouseOutCapture"
							}
						},
						{
							"id": 257,
							"name": "onMouseOver",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1480,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "MouseEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 257,
								"name": "DOMAttributes.onMouseOver"
							}
						},
						{
							"id": 258,
							"name": "onMouseOverCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1481,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "MouseEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 258,
								"name": "DOMAttributes.onMouseOverCapture"
							}
						},
						{
							"id": 259,
							"name": "onMouseUp",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1482,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "MouseEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 259,
								"name": "DOMAttributes.onMouseUp"
							}
						},
						{
							"id": 260,
							"name": "onMouseUpCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1483,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "MouseEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 260,
								"name": "DOMAttributes.onMouseUpCapture"
							}
						},
						{
							"id": 147,
							"name": "onPaste",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1356,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ClipboardEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 147,
								"name": "DOMAttributes.onPaste"
							}
						},
						{
							"id": 148,
							"name": "onPasteCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1357,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ClipboardEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 148,
								"name": "DOMAttributes.onPasteCapture"
							}
						},
						{
							"id": 201,
							"name": "onPause",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1422,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 201,
								"name": "DOMAttributes.onPause"
							}
						},
						{
							"id": 202,
							"name": "onPauseCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1423,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 202,
								"name": "DOMAttributes.onPauseCapture"
							}
						},
						{
							"id": 203,
							"name": "onPlay",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1424,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 203,
								"name": "DOMAttributes.onPlay"
							}
						},
						{
							"id": 204,
							"name": "onPlayCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1425,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 204,
								"name": "DOMAttributes.onPlayCapture"
							}
						},
						{
							"id": 205,
							"name": "onPlaying",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1426,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 205,
								"name": "DOMAttributes.onPlaying"
							}
						},
						{
							"id": 206,
							"name": "onPlayingCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1427,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 206,
								"name": "DOMAttributes.onPlayingCapture"
							}
						},
						{
							"id": 277,
							"name": "onPointerCancel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1506,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "PointerEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 277,
								"name": "DOMAttributes.onPointerCancel"
							}
						},
						{
							"id": 278,
							"name": "onPointerCancelCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1507,
									"character": 30
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "PointerEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 278,
								"name": "DOMAttributes.onPointerCancelCapture"
							}
						},
						{
							"id": 271,
							"name": "onPointerDown",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1500,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "PointerEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 271,
								"name": "DOMAttributes.onPointerDown"
							}
						},
						{
							"id": 272,
							"name": "onPointerDownCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1501,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "PointerEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 272,
								"name": "DOMAttributes.onPointerDownCapture"
							}
						},
						{
							"id": 279,
							"name": "onPointerEnter",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1508,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "PointerEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 279,
								"name": "DOMAttributes.onPointerEnter"
							}
						},
						{
							"id": 280,
							"name": "onPointerEnterCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1509,
									"character": 29
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "PointerEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 280,
								"name": "DOMAttributes.onPointerEnterCapture"
							}
						},
						{
							"id": 281,
							"name": "onPointerLeave",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1510,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "PointerEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 281,
								"name": "DOMAttributes.onPointerLeave"
							}
						},
						{
							"id": 282,
							"name": "onPointerLeaveCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1511,
									"character": 29
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "PointerEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 282,
								"name": "DOMAttributes.onPointerLeaveCapture"
							}
						},
						{
							"id": 273,
							"name": "onPointerMove",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1502,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "PointerEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 273,
								"name": "DOMAttributes.onPointerMove"
							}
						},
						{
							"id": 274,
							"name": "onPointerMoveCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1503,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "PointerEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 274,
								"name": "DOMAttributes.onPointerMoveCapture"
							}
						},
						{
							"id": 285,
							"name": "onPointerOut",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1514,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "PointerEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 285,
								"name": "DOMAttributes.onPointerOut"
							}
						},
						{
							"id": 286,
							"name": "onPointerOutCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1515,
									"character": 27
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "PointerEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 286,
								"name": "DOMAttributes.onPointerOutCapture"
							}
						},
						{
							"id": 283,
							"name": "onPointerOver",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1512,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "PointerEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 283,
								"name": "DOMAttributes.onPointerOver"
							}
						},
						{
							"id": 284,
							"name": "onPointerOverCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1513,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "PointerEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 284,
								"name": "DOMAttributes.onPointerOverCapture"
							}
						},
						{
							"id": 275,
							"name": "onPointerUp",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1504,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "PointerEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 275,
								"name": "DOMAttributes.onPointerUp"
							}
						},
						{
							"id": 276,
							"name": "onPointerUpCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1505,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "PointerEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 276,
								"name": "DOMAttributes.onPointerUpCapture"
							}
						},
						{
							"id": 207,
							"name": "onProgress",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1428,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 207,
								"name": "DOMAttributes.onProgress"
							}
						},
						{
							"id": 208,
							"name": "onProgressCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1429,
									"character": 25
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 208,
								"name": "DOMAttributes.onProgressCapture"
							}
						},
						{
							"id": 209,
							"name": "onRateChange",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1430,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 209,
								"name": "DOMAttributes.onRateChange"
							}
						},
						{
							"id": 210,
							"name": "onRateChangeCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1431,
									"character": 27
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 210,
								"name": "DOMAttributes.onRateChangeCapture"
							}
						},
						{
							"id": 165,
							"name": "onReset",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1380,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "FormEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 165,
								"name": "DOMAttributes.onReset"
							}
						},
						{
							"id": 166,
							"name": "onResetCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1381,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "FormEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 166,
								"name": "DOMAttributes.onResetCapture"
							}
						},
						{
							"id": 291,
							"name": "onScroll",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1522,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "UIEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 291,
								"name": "DOMAttributes.onScroll"
							}
						},
						{
							"id": 292,
							"name": "onScrollCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1523,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "UIEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 292,
								"name": "DOMAttributes.onScrollCapture"
							}
						},
						{
							"id": 211,
							"name": "onSeeked",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1432,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 211,
								"name": "DOMAttributes.onSeeked"
							}
						},
						{
							"id": 212,
							"name": "onSeekedCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1433,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 212,
								"name": "DOMAttributes.onSeekedCapture"
							}
						},
						{
							"id": 213,
							"name": "onSeeking",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1434,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 213,
								"name": "DOMAttributes.onSeeking"
							}
						},
						{
							"id": 214,
							"name": "onSeekingCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1435,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 214,
								"name": "DOMAttributes.onSeekingCapture"
							}
						},
						{
							"id": 261,
							"name": "onSelect",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1486,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 261,
								"name": "DOMAttributes.onSelect"
							}
						},
						{
							"id": 262,
							"name": "onSelectCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1487,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 262,
								"name": "DOMAttributes.onSelectCapture"
							}
						},
						{
							"id": 9,
							"name": "onSelectDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Callback issued when a date is selected",
								"tags": [
									{
										"tag": "param",
										"text": "The date the user selected",
										"param": "date"
									},
									{
										"tag": "param",
										"text": "The resultant list of dates that are selected based on the date range type set\nfor the component.\n",
										"param": "selectedDateRangeArray"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 39,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 10,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 11,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"parameters": [
														{
															"id": 12,
															"name": "date",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "reference",
																"name": "Date"
															}
														},
														{
															"id": 13,
															"name": "selectedDateRangeArray",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true,
																"isOptional": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"name": "Date"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 215,
							"name": "onStalled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1436,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 215,
								"name": "DOMAttributes.onStalled"
							}
						},
						{
							"id": 216,
							"name": "onStalledCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1437,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 216,
								"name": "DOMAttributes.onStalledCapture"
							}
						},
						{
							"id": 167,
							"name": "onSubmit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1382,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "FormEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 167,
								"name": "DOMAttributes.onSubmit"
							}
						},
						{
							"id": 168,
							"name": "onSubmitCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1383,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "FormEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 168,
								"name": "DOMAttributes.onSubmitCapture"
							}
						},
						{
							"id": 217,
							"name": "onSuspend",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1438,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 217,
								"name": "DOMAttributes.onSuspend"
							}
						},
						{
							"id": 218,
							"name": "onSuspendCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1439,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 218,
								"name": "DOMAttributes.onSuspendCapture"
							}
						},
						{
							"id": 219,
							"name": "onTimeUpdate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1440,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 219,
								"name": "DOMAttributes.onTimeUpdate"
							}
						},
						{
							"id": 220,
							"name": "onTimeUpdateCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1441,
									"character": 27
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 220,
								"name": "DOMAttributes.onTimeUpdateCapture"
							}
						},
						{
							"id": 263,
							"name": "onTouchCancel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1490,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "TouchEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 263,
								"name": "DOMAttributes.onTouchCancel"
							}
						},
						{
							"id": 264,
							"name": "onTouchCancelCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1491,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "TouchEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 264,
								"name": "DOMAttributes.onTouchCancelCapture"
							}
						},
						{
							"id": 265,
							"name": "onTouchEnd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1492,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "TouchEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 265,
								"name": "DOMAttributes.onTouchEnd"
							}
						},
						{
							"id": 266,
							"name": "onTouchEndCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1493,
									"character": 25
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "TouchEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 266,
								"name": "DOMAttributes.onTouchEndCapture"
							}
						},
						{
							"id": 267,
							"name": "onTouchMove",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1494,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "TouchEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 267,
								"name": "DOMAttributes.onTouchMove"
							}
						},
						{
							"id": 268,
							"name": "onTouchMoveCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1495,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "TouchEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 268,
								"name": "DOMAttributes.onTouchMoveCapture"
							}
						},
						{
							"id": 269,
							"name": "onTouchStart",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1496,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "TouchEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 269,
								"name": "DOMAttributes.onTouchStart"
							}
						},
						{
							"id": 270,
							"name": "onTouchStartCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1497,
									"character": 27
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "TouchEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 270,
								"name": "DOMAttributes.onTouchStartCapture"
							}
						},
						{
							"id": 301,
							"name": "onTransitionEnd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1538,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "TransitionEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 301,
								"name": "DOMAttributes.onTransitionEnd"
							}
						},
						{
							"id": 302,
							"name": "onTransitionEndCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1539,
									"character": 30
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "TransitionEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 302,
								"name": "DOMAttributes.onTransitionEndCapture"
							}
						},
						{
							"id": 221,
							"name": "onVolumeChange",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1442,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 221,
								"name": "DOMAttributes.onVolumeChange"
							}
						},
						{
							"id": 222,
							"name": "onVolumeChangeCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1443,
									"character": 29
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 222,
								"name": "DOMAttributes.onVolumeChangeCapture"
							}
						},
						{
							"id": 223,
							"name": "onWaiting",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1444,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 223,
								"name": "DOMAttributes.onWaiting"
							}
						},
						{
							"id": 224,
							"name": "onWaitingCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1445,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "ReactEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 224,
								"name": "DOMAttributes.onWaitingCapture"
							}
						},
						{
							"id": 293,
							"name": "onWheel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1526,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "WheelEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 293,
								"name": "DOMAttributes.onWheel"
							}
						},
						{
							"id": 294,
							"name": "onWheelCapture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1527,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "WheelEventHandler"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 294,
								"name": "DOMAttributes.onWheelCapture"
							}
						},
						{
							"id": 60,
							"name": "placeholder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1758,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 60,
								"name": "HTMLAttributes.placeholder"
							}
						},
						{
							"id": 72,
							"name": "prefix",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1776,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 72,
								"name": "HTMLAttributes.prefix"
							}
						},
						{
							"id": 73,
							"name": "property",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1777,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 73,
								"name": "HTMLAttributes.property"
							}
						},
						{
							"id": 67,
							"name": "radioGroup",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1767,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 67,
								"name": "HTMLAttributes.radioGroup"
							}
						},
						{
							"id": 74,
							"name": "resource",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1778,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 74,
								"name": "HTMLAttributes.resource"
							}
						},
						{
							"id": 36,
							"name": "restrictedDates",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If set the Calendar will not allow selection of dates in this array."
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 139,
									"character": 17
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Date"
								}
							}
						},
						{
							"id": 86,
							"name": "results",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1792,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 86,
								"name": "HTMLAttributes.results"
							}
						},
						{
							"id": 68,
							"name": "role",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1770,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 68,
								"name": "HTMLAttributes.role"
							}
						},
						{
							"id": 87,
							"name": "security",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1793,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 87,
								"name": "HTMLAttributes.security"
							}
						},
						{
							"id": 39,
							"name": "selectDateOnClick",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "When clicking on \"Today\", select the date and close the calendar.",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 155,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 26,
							"name": "shouldFocusOnMount",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "This property has been removed at 0.80.0 in place of the `focus` method, to be removed \\@ 1.0.0.",
								"tags": [
									{
										"tag": "deprecated",
										"text": "Replaced with the `focus` method.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 94,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 40,
							"name": "showCloseButton",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the close button should be shown or not",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 160,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 25,
							"name": "showGoToToday",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the \"Go to today\" link should be shown or not"
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 89,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 19,
							"name": "showMonthPickerAsOverlay",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Show month picker on top of date picker when visible.",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 58,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 37,
							"name": "showSixWeeksByDefault",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the calendar should show 6 weeks by default.",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 144,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 31,
							"name": "showWeekNumbers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the calendar should show the week number (weeks 1 to 53) before each week row",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 117,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 61,
							"name": "slot",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1759,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 61,
								"name": "HTMLAttributes.slot"
							}
						},
						{
							"id": 62,
							"name": "spellCheck",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1760,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "Booleanish"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 62,
								"name": "HTMLAttributes.spellCheck"
							}
						},
						{
							"id": 27,
							"name": "strings",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Localized strings to use in the Calendar"
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 98,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 303,
										"name": "ICalendarStrings"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 63,
							"name": "style",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1761,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "CSSProperties"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 63,
								"name": "HTMLAttributes.style"
							}
						},
						{
							"id": 50,
							"name": "suppressContentEditableWarning",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1745,
									"character": 38
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 50,
								"name": "HTMLAttributes.suppressContentEditableWarning"
							}
						},
						{
							"id": 51,
							"name": "suppressHydrationWarning",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1746,
									"character": 32
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 51,
								"name": "HTMLAttributes.suppressHydrationWarning"
							}
						},
						{
							"id": 64,
							"name": "tabIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1762,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 64,
								"name": "HTMLAttributes.tabIndex"
							}
						},
						{
							"id": 65,
							"name": "title",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1763,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 65,
								"name": "HTMLAttributes.title"
							}
						},
						{
							"id": 20,
							"name": "today",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Value of today. If null, current time in client machine will be used."
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 62,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 66,
							"name": "translate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1764,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "yes"
									},
									{
										"type": "stringLiteral",
										"value": "no"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 66,
								"name": "HTMLAttributes.translate"
							}
						},
						{
							"id": 75,
							"name": "typeof",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1779,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 75,
								"name": "HTMLAttributes.typeof"
							}
						},
						{
							"id": 88,
							"name": "unselectable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1794,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "on"
									},
									{
										"type": "stringLiteral",
										"value": "off"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 88,
								"name": "HTMLAttributes.unselectable"
							}
						},
						{
							"id": 21,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Default value of the Calendar, if any"
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 66,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 76,
							"name": "vocab",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1780,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 76,
								"name": "HTMLAttributes.vocab"
							}
						},
						{
							"id": 38,
							"name": "workWeekDays",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The days that are selectable when dateRangeType is WorkWeek.\nIf dateRangeType is not WorkWeek this property does nothing.",
								"tags": [
									{
										"tag": "defaultvalue",
										"text": "[Monday,Tuesday,Wednesday,Thursday,Friday]\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 150,
									"character": 14
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "DayOfWeek"
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								69,
								52,
								41,
								91,
								92,
								93,
								94,
								95,
								96,
								97,
								98,
								99,
								100,
								101,
								102,
								103,
								104,
								105,
								106,
								107,
								108,
								109,
								110,
								111,
								112,
								113,
								114,
								115,
								116,
								117,
								118,
								119,
								120,
								121,
								122,
								123,
								124,
								125,
								126,
								127,
								128,
								129,
								130,
								131,
								132,
								133,
								134,
								135,
								136,
								137,
								138,
								77,
								78,
								24,
								79,
								47,
								139,
								8,
								80,
								7,
								53,
								54,
								140,
								70,
								23,
								33,
								48,
								49,
								55,
								56,
								22,
								32,
								57,
								28,
								29,
								58,
								71,
								89,
								90,
								18,
								17,
								84,
								81,
								85,
								82,
								83,
								59,
								35,
								34,
								30,
								181,
								182,
								297,
								298,
								299,
								300,
								295,
								296,
								225,
								226,
								161,
								162,
								157,
								158,
								183,
								184,
								185,
								186,
								159,
								160,
								227,
								228,
								149,
								150,
								151,
								152,
								153,
								154,
								229,
								230,
								143,
								144,
								145,
								146,
								14,
								231,
								232,
								233,
								234,
								235,
								236,
								237,
								238,
								239,
								240,
								241,
								242,
								243,
								244,
								245,
								246,
								247,
								248,
								187,
								188,
								189,
								190,
								191,
								192,
								193,
								194,
								173,
								174,
								155,
								156,
								287,
								288,
								42,
								163,
								164,
								169,
								170,
								175,
								176,
								177,
								178,
								179,
								180,
								171,
								172,
								199,
								200,
								195,
								196,
								197,
								198,
								289,
								290,
								249,
								250,
								251,
								252,
								253,
								254,
								255,
								256,
								257,
								258,
								259,
								260,
								147,
								148,
								201,
								202,
								203,
								204,
								205,
								206,
								277,
								278,
								271,
								272,
								279,
								280,
								281,
								282,
								273,
								274,
								285,
								286,
								283,
								284,
								275,
								276,
								207,
								208,
								209,
								210,
								165,
								166,
								291,
								292,
								211,
								212,
								213,
								214,
								261,
								262,
								9,
								215,
								216,
								167,
								168,
								217,
								218,
								219,
								220,
								263,
								264,
								265,
								266,
								267,
								268,
								269,
								270,
								301,
								302,
								221,
								222,
								223,
								224,
								293,
								294,
								60,
								72,
								73,
								67,
								74,
								36,
								86,
								68,
								87,
								39,
								26,
								40,
								25,
								19,
								37,
								31,
								61,
								62,
								27,
								63,
								50,
								51,
								64,
								65,
								20,
								66,
								75,
								88,
								21,
								76,
								38
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
							"line": 20,
							"character": 31
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 665,
							"name": "ICalendarPropsFixed"
						},
						{
							"type": "reference",
							"typeArguments": [
								{
									"type": "reference",
									"id": 2,
									"name": "ICalendar"
								}
							],
							"name": "IBaseProps"
						},
						{
							"type": "reference",
							"typeArguments": [
								{
									"type": "reference",
									"name": "HTMLElement"
								}
							],
							"name": "HTMLAttributes"
						}
					]
				},
				{
					"id": 303,
					"name": "ICalendarStrings",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "{@docCategory Calendar}"
					},
					"children": [
						{
							"id": 315,
							"name": "closeButtonAriaLabel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Aria-label for the \"close\" button."
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 226,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 306,
							"name": "days",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An array of strings for the full names of days of the week.\nThe array is 0-based, so days[0] should be the full name of Sunday."
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 189,
									"character": 6
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 308,
							"name": "goToToday",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "String to render for button to direct the user to today's date."
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 198,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 304,
							"name": "months",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An array of strings for the full names of months.\nThe array is 0-based, so months[0] should be the full name of January."
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 179,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 310,
							"name": "nextMonthAriaLabel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Aria-label for the \"next month\" button."
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 206,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 312,
							"name": "nextYearAriaLabel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Aria-label for the \"next year\" button."
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 214,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 314,
							"name": "nextYearRangeAriaLabel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Aria-label for the \"next year range\" button."
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 222,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 309,
							"name": "prevMonthAriaLabel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Aria-label for the \"previous month\" button."
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 202,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 311,
							"name": "prevYearAriaLabel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Aria-label for the \"previous year\" button."
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 210,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 313,
							"name": "prevYearRangeAriaLabel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Aria-label for the \"previous year range\" button."
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 218,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 307,
							"name": "shortDays",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An array of strings for the initials of the days of the week.\nThe array is 0-based, so days[0] should be the initial of Sunday."
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 194,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 305,
							"name": "shortMonths",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An array of strings for the short names of months.\nThe array is 0-based, so shortMonths[0] should be the short name of January."
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 184,
									"character": 13
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 316,
							"name": "weekNumberFormatString",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Aria-label format string for the week number header. Should have 1 string param e.g. \"week number \\{0\\}\""
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
									"line": 230,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								315,
								306,
								308,
								304,
								310,
								312,
								314,
								309,
								311,
								313,
								307,
								305,
								316
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
							"line": 174,
							"character": 33
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						2,
						321,
						317,
						6,
						303
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Dependencies/calendar-custom/Calendar.types.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1395,
			"name": "\"src/Dependencies/calendar-custom/CalendarDay\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/ducnm/Desktop/Add-on/rc365/src/Dependencies/calendar-custom/CalendarDay.js",
			"children": [
				{
					"id": 1398,
					"name": "CalendarDay",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarDay.js",
							"line": 33,
							"character": 15
						}
					],
					"type": {
						"type": "reference",
						"id": 1398,
						"name": "CalendarDay"
					},
					"defaultValue": "(function (_super) {\n  __extends(CalendarDay, _super);\n  function CalendarDay(props) {\n    var _this = _super.call(this, props) || this;\n    _this.days = {};\n    _this._onKeyDown = function (callback, ev) {\n      if (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) {\n        callback();\n      }\n    };\n    _this._onDayKeyDown = function (originalDate, weekIndex, dayIndex) {\n      return function (ev) {\n        if (ev.which === KeyCodes.enter) {\n          _this._onSelectDate(originalDate, ev);\n          ev.preventDefault();\n        } else {\n          _this._navigateMonthEdge(ev, originalDate, weekIndex, dayIndex);\n        }\n      };\n    };\n    _this._onDayMouseDown = function (\n      originalDate,\n      weekIndex,\n      dayIndex,\n      dateRangeType\n    ) {\n      return function (ev) {\n        // set the press styling\n        if (dateRangeType === DateRangeType.Month) {\n          _this._applyFunctionToDayRefs(function (ref, day) {\n            if (\n              ref &&\n              day.originalDate.getMonth() === originalDate.getMonth() &&\n              day.isInBounds\n            ) {\n              ref.classList.add(styles.dayPress);\n            }\n          });\n        } else {\n          // week or work week view\n          _this._applyFunctionToDayRefs(function (ref, day, dayWeekIndex) {\n            if (ref && dayWeekIndex === weekIndex && day.isInBounds) {\n              ref.classList.add(styles.dayPress);\n              ref.classList.add(styles.dayIsHighlighted);\n            } else if (ref) {\n              ref.classList.remove(styles.dayIsHighlighted);\n            }\n          });\n        }\n      };\n    };\n    _this._onDayMouseUp = function (\n      originalDate,\n      weekIndex,\n      dayIndex,\n      dateRangeType\n    ) {\n      return function (ev) {\n        // remove press styling\n        if (dateRangeType === DateRangeType.Month) {\n          _this._applyFunctionToDayRefs(function (ref, day) {\n            if (\n              ref &&\n              day.originalDate.getMonth() === originalDate.getMonth() &&\n              day.isInBounds\n            ) {\n              ref.classList.remove(styles.dayPress);\n            }\n          });\n        } else {\n          // week or work week view\n          _this._applyFunctionToDayRefs(function (ref, day, dayWeekIndex) {\n            if (ref && dayWeekIndex === weekIndex && day.isInBounds) {\n              ref.classList.remove(styles.dayPress);\n            }\n          });\n        }\n      };\n    };\n    _this._onDayMouseOver = function (\n      originalDate,\n      weekIndex,\n      dayIndex,\n      dateRangeType\n    ) {\n      return function (ev) {\n        // set the hover styling on every day in the same month\n        if (dateRangeType === DateRangeType.Month) {\n          _this._applyFunctionToDayRefs(function (ref, day) {\n            if (\n              ref &&\n              day.originalDate.getMonth() === originalDate.getMonth() &&\n              day.isInBounds\n            ) {\n              ref.classList.add(styles.dayHover);\n            }\n          });\n        } else {\n          // week or work week view\n          _this._applyFunctionToDayRefs(function (ref, day, dayWeekIndex) {\n            if (ref && dayWeekIndex === weekIndex && day.isInBounds) {\n              ref.classList.add(styles.dayHover);\n            }\n          });\n        }\n      };\n    };\n    _this._onDayMouseLeave = function (\n      originalDate,\n      weekIndex,\n      dayIndex,\n      dateRangeType\n    ) {\n      return function (ev) {\n        // remove the hover and pressed styling\n        if (dateRangeType === DateRangeType.Month) {\n          _this._applyFunctionToDayRefs(function (ref, day) {\n            if (\n              ref &&\n              day.originalDate.getMonth() === originalDate.getMonth() &&\n              day.isInBounds\n            ) {\n              ref.classList.remove(styles.dayHover);\n            }\n          });\n        } else {\n          // week or work week view\n          _this._applyFunctionToDayRefs(function (ref, day, dayWeekIndex) {\n            if (ref && dayWeekIndex === weekIndex && day.isInBounds) {\n              ref.classList.remove(styles.dayHover);\n            }\n          });\n        }\n      };\n    };\n    _this._onTableMouseLeave = function (ev) {\n      if (\n        ev.target.contains &&\n        ev.relatedTarget &&\n        ev.relatedTarget.contains &&\n        ev.target.contains(ev.relatedTarget)\n      ) {\n        return;\n      }\n      _this._applyFunctionToDayRefs(function (ref, day) {\n        if (ref) {\n          ref.classList.remove(styles.dayHover);\n          ref.classList.remove(styles.dayPress);\n        }\n      });\n    };\n    _this._onTableMouseUp = function (ev) {\n      if (\n        ev.target.contains &&\n        ev.relatedTarget &&\n        ev.relatedTarget.contains &&\n        ev.target.contains(ev.relatedTarget)\n      ) {\n        return;\n      }\n      _this._applyFunctionToDayRefs(function (ref, day) {\n        if (ref) {\n          ref.classList.remove(styles.dayPress);\n        }\n      });\n    };\n    _this._onSelectDate = function (selectedDate, ev) {\n      var _a = _this.props,\n        onSelectDate = _a.onSelectDate,\n        dateRangeType = _a.dateRangeType,\n        firstDayOfWeek = _a.firstDayOfWeek,\n        navigatedDate = _a.navigatedDate,\n        autoNavigateOnSelection = _a.autoNavigateOnSelection,\n        minDate = _a.minDate,\n        maxDate = _a.maxDate,\n        workWeekDays = _a.workWeekDays;\n      if (ev) {\n        ev.stopPropagation();\n      }\n      var dateRange = getDateRangeArray(\n        selectedDate,\n        dateRangeType,\n        firstDayOfWeek,\n        workWeekDays\n      );\n      if (dateRangeType !== DateRangeType.Day) {\n        dateRange = _this._getBoundedDateRange(dateRange, minDate, maxDate);\n      }\n      dateRange = dateRange.filter(function (d) {\n        return !_this._getIsRestrictedDate(d);\n      });\n      if (onSelectDate) {\n        onSelectDate(selectedDate, dateRange);\n      }\n      // Navigate to next or previous month if needed\n      if (\n        autoNavigateOnSelection &&\n        selectedDate.getMonth() !== navigatedDate.getMonth()\n      ) {\n        var compareResult = compareDatePart(selectedDate, navigatedDate);\n        if (compareResult < 0) {\n          _this._onSelectPrevMonth();\n        } else if (compareResult > 0) {\n          _this._onSelectNextMonth();\n        }\n      }\n    };\n    _this._onSelectNextMonth = function () {\n      _this.props.onNavigateDate(\n        addMonths(_this.props.navigatedDate, 1),\n        false\n      );\n    };\n    _this._onSelectPrevMonth = function () {\n      _this.props.onNavigateDate(\n        addMonths(_this.props.navigatedDate, -1),\n        false\n      );\n    };\n    _this._onClose = function () {\n      if (_this.props.onDismiss) {\n        _this.props.onDismiss();\n      }\n    };\n    _this._onHeaderSelect = function () {\n      var onHeaderSelect = _this.props.onHeaderSelect;\n      if (onHeaderSelect) {\n        onHeaderSelect(true);\n      }\n    };\n    _this._onHeaderKeyDown = function (ev) {\n      var onHeaderSelect = _this.props.onHeaderSelect;\n      if (\n        onHeaderSelect &&\n        (ev.which === KeyCodes.enter || ev.which === KeyCodes.space)\n      ) {\n        onHeaderSelect(true);\n      }\n    };\n    _this._onPrevMonthKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter) {\n        _this._onKeyDown(_this._onSelectPrevMonth, ev);\n      }\n    };\n    _this._onNextMonthKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter) {\n        _this._onKeyDown(_this._onSelectNextMonth, ev);\n      }\n    };\n    _this._onCloseButtonKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter) {\n        _this._onKeyDown(_this._onClose, ev);\n      }\n    };\n    initializeComponentRef(_this);\n    _this.state = {\n      activeDescendantId: getId(\"DatePickerDay-active\"),\n      weeks: _this._getWeeks(props),\n    };\n    _this._onSelectNextMonth = _this._onSelectNextMonth.bind(_this);\n    _this._onSelectPrevMonth = _this._onSelectPrevMonth.bind(_this);\n    _this._onClose = _this._onClose.bind(_this);\n    return _this;\n  }\n  // tslint:disable-next-line function-name\n  CalendarDay.prototype.UNSAFE_componentWillReceiveProps = function (\n    nextProps\n  ) {\n    this.setState({\n      weeks: this._getWeeks(nextProps),\n    });\n  };\n  CalendarDay.prototype.render = function () {\n    var _a, _b;\n    var _this = this;\n    var calendarData = this.props.calendarData;\n    var _c = this.state,\n      activeDescendantId = _c.activeDescendantId,\n      weeks = _c.weeks;\n    var _d = this.props,\n      firstDayOfWeek = _d.firstDayOfWeek,\n      strings = _d.strings,\n      navigatedDate = _d.navigatedDate,\n      selectedDate = _d.selectedDate,\n      dateRangeType = _d.dateRangeType,\n      navigationIcons = _d.navigationIcons,\n      showWeekNumbers = _d.showWeekNumbers,\n      firstWeekOfYear = _d.firstWeekOfYear,\n      dateTimeFormatter = _d.dateTimeFormatter,\n      minDate = _d.minDate,\n      maxDate = _d.maxDate,\n      showCloseButton = _d.showCloseButton,\n      allFocusable = _d.allFocusable;\n    var dayPickerId = getId(\"DatePickerDay-dayPicker\");\n    var monthAndYearId = getId(\"DatePickerDay-monthAndYear\");\n    var leftNavigationIcon = navigationIcons.leftNavigation;\n    var rightNavigationIcon = navigationIcons.rightNavigation;\n    var closeNavigationIcon = navigationIcons.closeIcon;\n    var weekNumbers = showWeekNumbers\n      ? getWeekNumbersInMonth(\n          weeks.length,\n          firstDayOfWeek,\n          firstWeekOfYear,\n          navigatedDate\n        )\n      : null;\n    var selectedDateWeekNumber = showWeekNumbers\n      ? getWeekNumber(selectedDate, firstDayOfWeek, firstWeekOfYear)\n      : undefined;\n    // When the month is highlighted get the corner dates so that styles can be added to them\n    var weekCorners = this._getWeekCornerStyles(weeks, dateRangeType);\n    // determine if previous/next months are in bounds\n    var prevMonthInBounds = minDate\n      ? compareDatePart(minDate, getMonthStart(navigatedDate)) < 0\n      : true;\n    var nextMonthInBounds = maxDate\n      ? compareDatePart(getMonthEnd(navigatedDate), maxDate) < 0\n      : true;\n    return React.createElement(\n      \"div\",\n      {\n        className: css(\n          \"ms-DatePicker-dayPicker\",\n          styles.dayPicker,\n          showWeekNumbers &&\n            \"ms-DatePicker-showWeekNumbers\" &&\n            (getRTL() ? styles.showWeekNumbersRTL : styles.showWeekNumbers)\n        ),\n        id: dayPickerId,\n      },\n      React.createElement(\n        \"div\",\n        { className: css(\"ms-DatePicker-header\", styles.header) },\n        React.createElement(\n          \"div\",\n          {\n            \"aria-live\": \"polite\",\n            \"aria-relevant\": \"text\",\n            \"aria-atomic\": \"true\",\n            id: monthAndYearId,\n            className:\n              styles.monthAndYear /* ref: function (element) { return _this._setHeaderRef(element) }} ,*/,\n          },\n          this.props.onHeaderSelect\n            ? React.createElement(\n                \"div\",\n                {\n                  className: css(\n                    \"ms-DatePicker-monthAndYear js-showMonthPicker\",\n                    styles.headerToggleView\n                  ),\n                  onClick: this._onHeaderSelect,\n                  onKeyDown: this._onHeaderKeyDown,\n                  \"aria-label\": dateTimeFormatter.formatMonthYear(\n                    navigatedDate,\n                    strings\n                  ),\n                  role: \"button\",\n                  tabIndex: 0,\n                },\n                dateTimeFormatter.formatMonthYear(navigatedDate, strings)\n              )\n            : React.createElement(\n                \"div\",\n                {\n                  className: css(\n                    \"ms-DatePicker-monthAndYear\",\n                    styles.monthAndYear\n                  ),\n                },\n                dateTimeFormatter.formatMonthYear(navigatedDate, strings)\n              )\n        ),\n        React.createElement(\n          \"div\",\n          {\n            className: css(\n              \"ms-DatePicker-monthComponents\",\n              styles.monthComponents\n            ),\n          },\n          React.createElement(\n            \"div\",\n            {\n              className: css(\"ms-DatePicker-navContainer\", styles.navContainer),\n            },\n            React.createElement(\n              \"button\",\n              {\n                className: css(\n                  \"ms-DatePicker-prevMonth js-prevMonth\",\n                  styles.prevMonth,\n                  ((_a = {}),\n                  (_a[\n                    \"ms-DatePicker-prevMonth--disabled \" +\n                      styles.prevMonthIsDisabled\n                  ] = !prevMonthInBounds),\n                  _a)\n                ),\n                disabled: !allFocusable && !prevMonthInBounds,\n                \"aria-disabled\": !prevMonthInBounds,\n                onClick: prevMonthInBounds\n                  ? this._onSelectPrevMonth\n                  : undefined,\n                onKeyDown: prevMonthInBounds\n                  ? this._onPrevMonthKeyDown\n                  : undefined,\n                \"aria-controls\": dayPickerId,\n                title: strings.prevMonthAriaLabel\n                  ? strings.prevMonthAriaLabel +\n                    \" \" +\n                    strings.months[addMonths(navigatedDate, -1).getMonth()]\n                  : undefined,\n                role: \"button\",\n                type: \"button\",\n              },\n              React.createElement(Icon, { iconName: leftNavigationIcon })\n            ),\n            React.createElement(\n              \"button\",\n              {\n                className: css(\n                  \"ms-DatePicker-nextMonth js-nextMonth\",\n                  styles.nextMonth,\n                  ((_b = {}),\n                  (_b[\n                    \"ms-DatePicker-nextMonth--disabled \" +\n                      styles.nextMonthIsDisabled\n                  ] = !nextMonthInBounds),\n                  _b)\n                ),\n                disabled: !allFocusable && !nextMonthInBounds,\n                \"aria-disabled\": !nextMonthInBounds,\n                onClick: nextMonthInBounds\n                  ? this._onSelectNextMonth\n                  : undefined,\n                onKeyDown: nextMonthInBounds\n                  ? this._onNextMonthKeyDown\n                  : undefined,\n                \"aria-controls\": dayPickerId,\n                title: strings.nextMonthAriaLabel\n                  ? strings.nextMonthAriaLabel +\n                    \" \" +\n                    strings.months[addMonths(navigatedDate, 1).getMonth()]\n                  : undefined,\n                role: \"button\",\n                type: \"button\",\n              },\n              React.createElement(Icon, { iconName: rightNavigationIcon })\n            ),\n            showCloseButton &&\n              React.createElement(\n                \"button\",\n                {\n                  className: css(\n                    \"ms-DatePicker-closeButton js-closeButton\",\n                    styles.closeButton\n                  ),\n                  onClick: this._onClose,\n                  onKeyDown: this._onCloseButtonKeyDown,\n                  title: strings.closeButtonAriaLabel,\n                  role: \"button\",\n                  type: \"button\",\n                },\n                React.createElement(Icon, { iconName: closeNavigationIcon })\n              )\n          )\n        )\n      ),\n      React.createElement(\n        FocusZone,\n        null,\n        React.createElement(\n          \"table\",\n          {\n            className: css(\"ms-DatePicker-table\", styles.table),\n            \"aria-readonly\": \"true\",\n            \"aria-multiselectable\": \"false\",\n            \"aria-labelledby\": monthAndYearId,\n            \"aria-activedescendant\": activeDescendantId,\n            role: \"grid\",\n          },\n          React.createElement(\n            \"thead\",\n            null,\n            React.createElement(\n              \"tr\",\n              null,\n              showWeekNumbers &&\n                React.createElement(\"th\", {\n                  className: css(\"ms-DatePicker-weekday\", styles.weekday),\n                }),\n              strings.shortDays.map(function (val, index) {\n                return React.createElement(\n                  \"th\",\n                  {\n                    className: css(\"ms-DatePicker-weekday\", styles.weekday),\n                    role: \"columnheader\",\n                    scope: \"col\",\n                    key: index,\n                    title:\n                      strings.days[(index + firstDayOfWeek) % DAYS_IN_WEEK],\n                    \"aria-label\":\n                      strings.days[(index + firstDayOfWeek) % DAYS_IN_WEEK],\n                    \"data-is-focusable\": allFocusable ? true : undefined,\n                  },\n                  strings.shortDays[(index + firstDayOfWeek) % DAYS_IN_WEEK]\n                );\n              })\n            )\n          ),\n          React.createElement(\n            \"tbody\",\n            {\n              onMouseLeave:\n                dateRangeType !== DateRangeType.Day\n                  ? this._onTableMouseLeave\n                  : undefined,\n              onMouseUp:\n                dateRangeType !== DateRangeType.Day\n                  ? this._onTableMouseUp\n                  : undefined,\n            },\n            weeks.map(function (week, weekIndex) {\n              var _a;\n              return React.createElement(\n                \"tr\",\n                { key: weekNumbers ? weekNumbers[weekIndex] : weekIndex },\n                showWeekNumbers &&\n                  weekNumbers &&\n                  React.createElement(\n                    \"th\",\n                    {\n                      className: css(\n                        \"ms-DatePicker-weekNumbers\",\n                        \"ms-DatePicker-weekday\",\n                        styles.weekday,\n                        styles.weekNumbers\n                      ),\n                      key: weekIndex,\n                      title:\n                        weekNumbers &&\n                        strings.weekNumberFormatString &&\n                        format(\n                          strings.weekNumberFormatString,\n                          weekNumbers[weekIndex]\n                        ),\n                      \"aria-label\":\n                        weekNumbers &&\n                        strings.weekNumberFormatString &&\n                        format(\n                          strings.weekNumberFormatString,\n                          weekNumbers[weekIndex]\n                        ),\n                      scope: \"row\",\n                    },\n                    React.createElement(\n                      \"div\",\n                      {\n                        className: css(\n                          \"ms-DatePicker-day\",\n                          styles.day,\n                          ((_a = {}),\n                          (_a[\n                            \"ms-DatePicker-week--highlighted \" +\n                              styles.weekIsHighlighted\n                          ] =\n                            selectedDateWeekNumber === weekNumbers[weekIndex]),\n                          _a)\n                        ),\n                      },\n                      React.createElement(\"span\", null, weekNumbers[weekIndex])\n                    )\n                  ),\n                week.map(function (day, dayIndex) {\n                  // call function highlight date choiced\n                  let HighLightDays = _this.props.onHighLight(\n                    day,\n                    calendarData\n                  );\n\n                  var _a, _b;\n                  var isNavigatedDate = compareDates(\n                    navigatedDate,\n                    day.originalDate\n                  );\n                  return React.createElement(\n                    \"td\",\n                    {\n                      key: day.key,\n                      onClick: day.isInBounds ? day.onSelected : undefined,\n                      className: css(\n                        styles.dayWrapper,\n                        \"ms-DatePicker-day\",\n                        _this._getHighlightedCornerStyle(\n                          weekCorners,\n                          dayIndex,\n                          weekIndex\n                        ),\n                        ((_a = {}),\n                        (_a[\n                          \"ms-DatePicker-weekBackground \" +\n                            styles.weekBackground\n                        ] =\n                          day.isSelected &&\n                          (dateRangeType === DateRangeType.Week ||\n                            dateRangeType === DateRangeType.WorkWeek)),\n                        (_a[\n                          \"ms-DatePicker-dayBackground \" + styles.dayBackground\n                        ] = dateRangeType === DateRangeType.Day),\n                        (_a[\n                          \"ms-DatePicker-day--highlighted \" +\n                            styles.dayIsHighlighted\n                        ] =\n                          day.isSelected &&\n                          dateRangeType === DateRangeType.Day &&\n                          calendarData.selectedDate !== \"\"),\n                        (_a[HighLightDays[0] + styles.dayIsFocused] =\n                          day.isInBounds && day.isInMonth),\n                        (_a[HighLightDays[1] + styles.dayIsUnfocused] =\n                          day.isInBounds && !day.isInMonth),\n                        (_a[styles.daySelection] =\n                          dateRangeType === DateRangeType.Day),\n                        (_a[styles.weekSelection] =\n                          dateRangeType === DateRangeType.Week ||\n                          dateRangeType === DateRangeType.WorkWeek),\n                        (_a[styles.monthSelection] =\n                          dateRangeType === DateRangeType.Month),\n                        _a)\n                      ),\n                      ref: function (element) {\n                        return _this._setDayCellRef(\n                          element,\n                          day,\n                          isNavigatedDate\n                        );\n                      },\n                      onMouseOver:\n                        dateRangeType !== DateRangeType.Day && day.isInBounds\n                          ? _this._onDayMouseOver(\n                              day.originalDate,\n                              weekIndex,\n                              dayIndex,\n                              dateRangeType\n                            )\n                          : undefined,\n                      onMouseLeave:\n                        dateRangeType !== DateRangeType.Day && day.isInBounds\n                          ? _this._onDayMouseLeave(\n                              day.originalDate,\n                              weekIndex,\n                              dayIndex,\n                              dateRangeType\n                            )\n                          : undefined,\n                      onMouseDown:\n                        dateRangeType !== DateRangeType.Day && day.isInBounds\n                          ? _this._onDayMouseDown(\n                              day.originalDate,\n                              weekIndex,\n                              dayIndex,\n                              dateRangeType\n                            )\n                          : undefined,\n                      onMouseUp:\n                        dateRangeType !== DateRangeType.Day && day.isInBounds\n                          ? _this._onDayMouseUp(\n                              day.originalDate,\n                              weekIndex,\n                              dayIndex,\n                              dateRangeType\n                            )\n                          : undefined,\n                      role: \"gridcell\",\n                    },\n                    React.createElement(\n                      \"button\",\n                      {\n                        key: day.key + \"button\",\n                        onClick: day.isInBounds ? day.onSelected : undefined,\n                        className: css(\n                          styles.day,\n                          \"ms-DatePicker-day-button\",\n                          ((_b = {}),\n                          (_b[\n                            \"ms-DatePicker-day--disabled \" +\n                              styles.dayIsDisabled\n                          ] = !day.isInBounds),\n                          (_b[\"ms-DatePicker-day--today \" + styles.dayIsToday] =\n                            day.isToday),\n                          _b)\n                        ),\n                        onKeyDown: _this._onDayKeyDown(\n                          day.originalDate,\n                          weekIndex,\n                          dayIndex\n                        ),\n                        \"aria-label\": dateTimeFormatter.formatMonthDayYear(\n                          day.originalDate,\n                          strings\n                        ),\n                        id: isNavigatedDate ? activeDescendantId : undefined,\n                        \"aria-readonly\": true,\n                        \"aria-selected\": day.isInBounds\n                          ? day.isSelected\n                          : undefined,\n                        \"data-is-focusable\":\n                          allFocusable || (day.isInBounds ? true : undefined),\n                        ref: function (element) {\n                          return _this._setDayRef(\n                            element,\n                            day,\n                            isNavigatedDate\n                          );\n                        },\n                        disabled: !allFocusable && !day.isInBounds,\n                        \"aria-disabled\": !day.isInBounds,\n                        type: \"button\",\n                      },\n                      React.createElement(\n                        \"span\",\n                        { \"aria-hidden\": \"true\" },\n                        dateTimeFormatter.formatDay(day.originalDate)\n                      )\n                    )\n                  );\n                })\n              );\n            })\n          )\n        )\n      )\n    );\n  };\n  CalendarDay.prototype.focus = function () {\n    if (this.navigatedDay) {\n      this.navigatedDay.tabIndex = 0;\n      this.navigatedDay.focus();\n    }\n  };\n  CalendarDay.prototype._setDayRef = function (element, day, isNavigatedDate) {\n    if (isNavigatedDate) {\n      this.navigatedDay = element;\n    }\n  };\n  CalendarDay.prototype._setDayCellRef = function (\n    element,\n    day,\n    isNavigatedDate\n  ) {\n    this.days[day.key] = element;\n  };\n  CalendarDay.prototype._getWeekCornerStyles = function (weeks, dateRangeType) {\n    var _this = this;\n    var weekCornersStyled = {};\n    switch (dateRangeType) {\n      case DateRangeType.Month:\n        /* need to handle setting all of the corners on arbitrarily shaped blobs\n                      __\n                   __|A |\n                  |B |C |__\n                  |D |E |F |\n        \n                  in this case, A needs top left rounded, top right rounded\n                  B needs top left rounded\n                  C doesn't need any rounding\n                  D needs bottom left rounded\n                  E doesn't need any rounding\n                  F needs top right rounding\n                */\n        // if there's an item above, lose both top corners. Item below, lose both bottom corners, etc.\n        weeks.forEach(function (week, weekIndex) {\n          week.forEach(function (day, dayIndex) {\n            var above =\n              weeks[weekIndex - 1] &&\n              weeks[weekIndex - 1][dayIndex] &&\n              weeks[weekIndex - 1][dayIndex].originalDate.getMonth() ===\n                weeks[weekIndex][dayIndex].originalDate.getMonth();\n            var below =\n              weeks[weekIndex + 1] &&\n              weeks[weekIndex + 1][dayIndex] &&\n              weeks[weekIndex + 1][dayIndex].originalDate.getMonth() ===\n                weeks[weekIndex][dayIndex].originalDate.getMonth();\n            var left =\n              weeks[weekIndex][dayIndex - 1] &&\n              weeks[weekIndex][dayIndex - 1].originalDate.getMonth() ===\n                weeks[weekIndex][dayIndex].originalDate.getMonth();\n            var right =\n              weeks[weekIndex][dayIndex + 1] &&\n              weeks[weekIndex][dayIndex + 1].originalDate.getMonth() ===\n                weeks[weekIndex][dayIndex].originalDate.getMonth();\n            var roundedTopLeft = !above && !left;\n            var roundedTopRight = !above && !right;\n            var roundedBottomLeft = !below && !left;\n            var roundedBottomRight = !below && !right;\n            var style = \"\";\n            if (roundedTopLeft) {\n              style = getRTL()\n                ? style.concat(styles.topRightCornerDate + \" \")\n                : style.concat(styles.topLeftCornerDate + \" \");\n            }\n            if (roundedTopRight) {\n              style = getRTL()\n                ? style.concat(styles.topLeftCornerDate + \" \")\n                : style.concat(styles.topRightCornerDate + \" \");\n            }\n            if (roundedBottomLeft) {\n              style = getRTL()\n                ? style.concat(styles.bottomRightCornerDate + \" \")\n                : style.concat(styles.bottomLeftCornerDate + \" \");\n            }\n            if (roundedBottomRight) {\n              style = getRTL()\n                ? style.concat(styles.bottomLeftCornerDate + \" \")\n                : style.concat(styles.bottomRightCornerDate + \" \");\n            }\n            if (!above) {\n              style = style.concat(styles.topDate + \" \");\n            }\n            if (!below) {\n              style = style.concat(styles.bottomDate + \" \");\n            }\n            if (!right) {\n              style = style.concat(styles.rightDate + \" \");\n            }\n            if (!left) {\n              style = style.concat(styles.leftdate + \" \");\n            }\n            weekCornersStyled[weekIndex + \"_\" + dayIndex] = style;\n          });\n        });\n        break;\n      case DateRangeType.Week:\n      case DateRangeType.WorkWeek:\n        weeks.forEach(function (week, weekIndex) {\n          var minIndex = findIndex(week, function (item) {\n            return item.isInBounds;\n          });\n          var maxIndex = _this._findLastIndex(week, function (item) {\n            return item.isInBounds;\n          });\n          var leftStyle =\n            styles.topLeftCornerDate + \" \" + styles.bottomLeftCornerDate;\n          var rightStyle =\n            styles.topRightCornerDate + \" \" + styles.bottomRightCornerDate;\n          weekCornersStyled[weekIndex + \"_\" + minIndex] = getRTL()\n            ? rightStyle\n            : leftStyle;\n          weekCornersStyled[weekIndex + \"_\" + maxIndex] = getRTL()\n            ? leftStyle\n            : rightStyle;\n        });\n        break;\n      default:\n        break;\n    }\n    return weekCornersStyled;\n  };\n  CalendarDay.prototype._getHighlightedCornerStyle = function (\n    weekCorners,\n    dayIndex,\n    weekIndex\n  ) {\n    var cornerStyle = weekCorners[weekIndex + \"_\" + dayIndex]\n      ? weekCorners[weekIndex + \"_\" + dayIndex]\n      : \"\";\n    return cornerStyle;\n  };\n  CalendarDay.prototype._navigateMonthEdge = function (\n    ev,\n    date,\n    weekIndex,\n    dayIndex\n  ) {\n    var _a = this.props,\n      minDate = _a.minDate,\n      maxDate = _a.maxDate;\n    var targetDate = undefined;\n    if (weekIndex === 0 && ev.which === KeyCodes.up) {\n      targetDate = addWeeks(date, -1);\n    } else if (\n      weekIndex === this.state.weeks.length - 1 &&\n      ev.which === KeyCodes.down\n    ) {\n      targetDate = addWeeks(date, 1);\n    } else if (\n      dayIndex === 0 &&\n      ev.which === getRTLSafeKeyCode(KeyCodes.left)\n    ) {\n      targetDate = addDays(date, -1);\n    } else if (\n      dayIndex === DAYS_IN_WEEK - 1 &&\n      ev.which === getRTLSafeKeyCode(KeyCodes.right)\n    ) {\n      targetDate = addDays(date, 1);\n    }\n    // Don't navigate to out-of-bounds date\n    if (\n      targetDate &&\n      (minDate ? compareDatePart(minDate, targetDate) < 1 : true) &&\n      (maxDate ? compareDatePart(targetDate, maxDate) < 1 : true)\n    ) {\n      this.props.onNavigateDate(targetDate, true);\n      ev.preventDefault();\n    }\n  };\n  CalendarDay.prototype._applyFunctionToDayRefs = function (func) {\n    var _this = this;\n    if (this.state.weeks) {\n      this.state.weeks.map(function (week, weekIndex) {\n        week.map(function (day) {\n          var ref = _this.days[day.key];\n          func(ref, day, weekIndex);\n          return day;\n        });\n        return week;\n      });\n    }\n    return;\n  };\n  CalendarDay.prototype._getWeeks = function (propsToUse) {\n    var navigatedDate = propsToUse.navigatedDate,\n      selectedDate = propsToUse.selectedDate,\n      dateRangeType = propsToUse.dateRangeType,\n      firstDayOfWeek = propsToUse.firstDayOfWeek,\n      today = propsToUse.today,\n      minDate = propsToUse.minDate,\n      maxDate = propsToUse.maxDate,\n      showSixWeeksByDefault = propsToUse.showSixWeeksByDefault,\n      workWeekDays = propsToUse.workWeekDays;\n    var date = new Date(\n      navigatedDate.getFullYear(),\n      navigatedDate.getMonth(),\n      1\n    );\n    var todaysDate = today || new Date();\n    var weeks = [];\n    // Cycle the date backwards to get to the first day of the week.\n    while (date.getDay() !== firstDayOfWeek) {\n      date.setDate(date.getDate() - 1);\n    }\n    // a flag to indicate whether all days of the week are in the month\n    var isAllDaysOfWeekOutOfMonth = false;\n    // in work week view we want to select the whole week\n    var selectedDateRangeType =\n      dateRangeType === DateRangeType.WorkWeek\n        ? DateRangeType.Week\n        : dateRangeType;\n    var selectedDates = getDateRangeArray(\n      selectedDate,\n      selectedDateRangeType,\n      firstDayOfWeek,\n      workWeekDays\n    );\n    if (dateRangeType !== DateRangeType.Day) {\n      selectedDates = this._getBoundedDateRange(\n        selectedDates,\n        minDate,\n        maxDate\n      );\n    }\n    var shouldGetWeeks = true;\n    for (var weekIndex = 0; shouldGetWeeks; weekIndex++) {\n      var week = [];\n      isAllDaysOfWeekOutOfMonth = true;\n      for (var dayIndex = 0; dayIndex < DAYS_IN_WEEK; dayIndex++) {\n        var originalDate = new Date(date.toString());\n        var dayInfo = {\n          key: date.toString(),\n          date: date.getDate().toString(),\n          originalDate: originalDate,\n          isInMonth: date.getMonth() === navigatedDate.getMonth(),\n          isToday: compareDates(todaysDate, date),\n          isSelected: isInDateRangeArray(date, selectedDates),\n          onSelected: this._onSelectDate.bind(this, originalDate),\n          isInBounds:\n            (minDate ? compareDatePart(minDate, date) < 1 : true) &&\n            (maxDate ? compareDatePart(date, maxDate) < 1 : true) &&\n            !this._getIsRestrictedDate(date),\n        };\n        week.push(dayInfo);\n        if (dayInfo.isInMonth) {\n          isAllDaysOfWeekOutOfMonth = false;\n        }\n        date.setDate(date.getDate() + 1);\n      }\n      // We append the condition of the loop depending upon the showSixWeeksByDefault prop.\n      shouldGetWeeks = showSixWeeksByDefault\n        ? !isAllDaysOfWeekOutOfMonth || weekIndex <= 5\n        : !isAllDaysOfWeekOutOfMonth;\n      if (shouldGetWeeks) {\n        weeks.push(week);\n      }\n    }\n    return weeks;\n  };\n  CalendarDay.prototype._getIsRestrictedDate = function (date) {\n    var restrictedDates = this.props.restrictedDates;\n    if (!restrictedDates) {\n      return false;\n    }\n    var restrictedDate = find(restrictedDates, function (rd) {\n      return compareDates(rd, date);\n    });\n    return restrictedDate ? true : false;\n  };\n  CalendarDay.prototype._getBoundedDateRange = function (\n    dateRange,\n    minDate,\n    maxDate\n  ) {\n    var boundedDateRange = __spreadArrays(dateRange);\n    if (minDate) {\n      boundedDateRange = boundedDateRange.filter(function (date) {\n        return compareDatePart(date, minDate) >= 0;\n      });\n    }\n    if (maxDate) {\n      boundedDateRange = boundedDateRange.filter(function (date) {\n        return compareDatePart(date, maxDate) <= 0;\n      });\n    }\n    return boundedDateRange;\n  };\n  /**\n   * Returns the index of the last element in the array where the predicate is true, and -1\n   * otherwise\n   * @param items Array of items to be iterated over using the predicate\n   * @param predicate find calls predicate once for each element of the array, in descending\n   * order, until it finds one where predicate returns true if such an element is found.\n   */\n  CalendarDay.prototype._findLastIndex = function (items, predicate) {\n    for (var i = items.length - 1; i >= 0; i--) {\n      var item = items[i];\n      if (predicate(item)) {\n        return i;\n      }\n    }\n    return -1;\n  };\n  return CalendarDay;\n})(React.Component)"
				},
				{
					"id": 1397,
					"name": "DAYS_IN_WEEK",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarDay.js",
							"line": 32,
							"character": 16
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "7"
				},
				{
					"id": 1396,
					"name": "styles",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarDay.js",
							"line": 31,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"id": 1198,
						"name": "\"C:/Users/ducnm/Desktop/Add-on/rc365/src/Dependencies/calendar-custom/Calendar.scss\""
					},
					"defaultValue": "stylesImport"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1398,
						1397,
						1396
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Dependencies/calendar-custom/CalendarDay.js",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 439,
			"name": "\"src/Dependencies/calendar-custom/CalendarDay.d\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/ducnm/Desktop/Add-on/rc365/src/Dependencies/calendar-custom/CalendarDay.d.ts",
			"children": [
				{
					"id": 497,
					"name": "CalendarDay",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 537,
							"name": "SS",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						}
					],
					"children": [
						{
							"id": 500,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 501,
									"name": "new CalendarDay",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {
										"isExported": true
									},
									"parameters": [
										{
											"id": 502,
											"name": "props",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"id": 455,
												"name": "ICalendarDayProps"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 497,
										"name": "CalendarDay"
									},
									"overwrites": {
										"type": "reference",
										"name": "Component.__constructor"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 49,
									"character": 17
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Component.__constructor"
							}
						},
						{
							"id": 523,
							"name": "_applyFunctionToDayRefs",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 67,
									"character": 35
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 536,
							"name": "_findLastIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the index of the last element in the array where the predicate is true, and -1\notherwise",
								"tags": [
									{
										"tag": "param",
										"text": "Array of items to be iterated over using the predicate",
										"param": "items"
									},
									{
										"tag": "param",
										"text": "find calls predicate once for each element of the array, in descending\norder, until it finds one where predicate returns true if such an element is found.\n",
										"param": "predicate"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 87,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 535,
							"name": "_getBoundedDateRange",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 79,
									"character": 32
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 513,
							"name": "_getHighlightedCornerStyle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 57,
									"character": 38
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 534,
							"name": "_getIsRestrictedDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 78,
									"character": 32
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 512,
							"name": "_getWeekCornerStyles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 56,
									"character": 32
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 533,
							"name": "_getWeeks",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 77,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 514,
							"name": "_navigateMonthEdge",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 58,
									"character": 30
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 527,
							"name": "_onClose",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 71,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 532,
							"name": "_onCloseButtonKeyDown",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 76,
									"character": 33
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 516,
							"name": "_onDayKeyDown",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 60,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 517,
							"name": "_onDayMouseDown",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 61,
									"character": 27
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 520,
							"name": "_onDayMouseLeave",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 64,
									"character": 28
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 519,
							"name": "_onDayMouseOver",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 63,
									"character": 27
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 518,
							"name": "_onDayMouseUp",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 62,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 529,
							"name": "_onHeaderKeyDown",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 73,
									"character": 28
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 528,
							"name": "_onHeaderSelect",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 72,
									"character": 27
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 515,
							"name": "_onKeyDown",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 59,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 531,
							"name": "_onNextMonthKeyDown",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 75,
									"character": 31
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 530,
							"name": "_onPrevMonthKeyDown",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 74,
									"character": 31
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 524,
							"name": "_onSelectDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 68,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 525,
							"name": "_onSelectNextMonth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 69,
									"character": 30
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 526,
							"name": "_onSelectPrevMonth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 70,
									"character": 30
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 521,
							"name": "_onTableMouseLeave",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 65,
									"character": 30
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 522,
							"name": "_onTableMouseUp",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 66,
									"character": 27
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 511,
							"name": "_setDayCellRef",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 55,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 510,
							"name": "_setDayRef",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 54,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 579,
							"name": "context",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\nShould be used with type annotation or static contextType.",
								"text": "```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n",
								"tags": [
									{
										"tag": "see",
										"text": "https://reactjs.org/docs/context.html\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 484,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 412,
								"name": "Component.context"
							}
						},
						{
							"id": 499,
							"name": "days",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 49,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 498,
							"name": "navigatedDay",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 48,
									"character": 24
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 598,
							"name": "props",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 509,
									"character": 22
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 455,
												"name": "ICalendarDayProps"
											}
										],
										"name": "Readonly"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 599,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExported": true
													},
													"children": [
														{
															"id": 600,
															"name": "children",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isExported": true,
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/react/index.d.ts",
																	"line": 509,
																	"character": 57
																}
															],
															"type": {
																"type": "reference",
																"name": "ReactNode"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																600
															]
														}
													],
													"sources": [
														{
															"fileName": "node_modules/@types/react/index.d.ts",
															"line": 509,
															"character": 47
														}
													]
												}
											}
										],
										"name": "Readonly"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 431,
								"name": "Component.props"
							}
						},
						{
							"id": 602,
							"name": "refs",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "deprecated",
										"text": "\nhttps://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 515,
									"character": 12
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 603,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExported": true
									},
									"indexSignature": [
										{
											"id": 604,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {
												"isExported": true
											},
											"parameters": [
												{
													"id": 605,
													"name": "key",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExported": true
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "ReactInstance"
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/react/index.d.ts",
											"line": 515,
											"character": 13
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 435,
								"name": "Component.refs"
							}
						},
						{
							"id": 601,
							"name": "state",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 510,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 494,
										"name": "ICalendarDayState"
									}
								],
								"name": "Readonly"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 434,
								"name": "Component.state"
							}
						},
						{
							"id": 578,
							"name": "contextType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If set, `this.context` will be set at runtime to the current value of the given Context.",
								"text": "Usage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n",
								"tags": [
									{
										"tag": "see",
										"text": "https://reactjs.org/docs/context.html#classcontexttype\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 466,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Context"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 411,
								"name": "Component.contextType"
							}
						},
						{
							"id": 562,
							"name": "UNSAFE_componentWillMount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 563,
									"name": "UNSAFE_componentWillMount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
										"text": "This method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use componentDidMount or the constructor instead"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 395,
										"name": "DeprecatedLifecycle.UNSAFE_componentWillMount"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 710,
									"character": 33
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 395,
								"name": "DeprecatedLifecycle.UNSAFE_componentWillMount"
							}
						},
						{
							"id": 503,
							"name": "UNSAFE_componentWillReceiveProps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 504,
									"name": "UNSAFE_componentWillReceiveProps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"parameters": [
										{
											"id": 505,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"id": 455,
												"name": "ICalendarDayProps"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"overwrites": {
										"type": "reference",
										"id": 741,
										"name": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 51,
									"character": 36
								}
							],
							"overwrites": {
								"type": "reference",
								"id": 741,
								"name": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps"
							}
						},
						{
							"id": 573,
							"name": "UNSAFE_componentWillUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 574,
									"name": "UNSAFE_componentWillUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
										"text": "Note: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use getSnapshotBeforeUpdate instead"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 575,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 455,
														"name": "ICalendarDayProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 576,
											"name": "nextState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 494,
														"name": "ICalendarDayState"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 577,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 406,
										"name": "DeprecatedLifecycle.UNSAFE_componentWillUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 770,
									"character": 34
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 406,
								"name": "DeprecatedLifecycle.UNSAFE_componentWillUpdate"
							}
						},
						{
							"id": 547,
							"name": "componentDidCatch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 548,
									"name": "componentDidCatch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount."
									},
									"parameters": [
										{
											"id": 549,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 550,
											"name": "errorInfo",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"name": "ErrorInfo"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 385,
										"name": "ComponentLifecycle.componentDidCatch"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 639,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 385,
								"name": "ComponentLifecycle.componentDidCatch"
							}
						},
						{
							"id": 538,
							"name": "componentDidMount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 539,
									"name": "componentDidMount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called immediately after a component is mounted. Setting state here will trigger re-rendering."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 376,
										"name": "ComponentLifecycle.componentDidMount"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 618,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 376,
								"name": "ComponentLifecycle.componentDidMount"
							}
						},
						{
							"id": 555,
							"name": "componentDidUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 556,
									"name": "componentDidUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called immediately after updating occurs. Not called for the initial render.",
										"text": "The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n"
									},
									"parameters": [
										{
											"id": 557,
											"name": "prevProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 455,
														"name": "ICalendarDayProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 558,
											"name": "prevState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 494,
														"name": "ICalendarDayState"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 559,
											"name": "snapshot",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 537,
												"name": "SS"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 555,
										"name": "NewLifecycle.componentDidUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 681,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 555,
								"name": "NewLifecycle.componentDidUpdate"
							}
						},
						{
							"id": 560,
							"name": "componentWillMount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 561,
									"name": "componentWillMount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
										"text": "Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use componentDidMount or the constructor instead; will stop working in React 17"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 393,
										"name": "DeprecatedLifecycle.componentWillMount"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 696,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 393,
								"name": "DeprecatedLifecycle.componentWillMount"
							}
						},
						{
							"id": 564,
							"name": "componentWillReceiveProps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 565,
									"name": "componentWillReceiveProps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
										"text": "Calling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use static getDerivedStateFromProps instead; will stop working in React 17"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 566,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 455,
														"name": "ICalendarDayProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 567,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 397,
										"name": "DeprecatedLifecycle.componentWillReceiveProps"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 725,
									"character": 33
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 397,
								"name": "DeprecatedLifecycle.componentWillReceiveProps"
							}
						},
						{
							"id": 545,
							"name": "componentWillUnmount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 546,
									"name": "componentWillUnmount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 383,
										"name": "ComponentLifecycle.componentWillUnmount"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 634,
									"character": 28
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 383,
								"name": "ComponentLifecycle.componentWillUnmount"
							}
						},
						{
							"id": 568,
							"name": "componentWillUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 569,
									"name": "componentWillUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
										"text": "Note: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 570,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 455,
														"name": "ICalendarDayProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 571,
											"name": "nextState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 494,
														"name": "ICalendarDayState"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 572,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 401,
										"name": "DeprecatedLifecycle.componentWillUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 755,
									"character": 27
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 401,
								"name": "DeprecatedLifecycle.componentWillUpdate"
							}
						},
						{
							"id": 508,
							"name": "focus",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 509,
									"name": "focus",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 53,
									"character": 9
								}
							]
						},
						{
							"id": 593,
							"name": "forceUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 594,
									"name": "forceUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"parameters": [
										{
											"id": 595,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 596,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {
																"isExported": true
															},
															"signatures": [
																{
																	"id": 597,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {
																		"isExported": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 426,
										"name": "Component.forceUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 501,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 426,
								"name": "Component.forceUpdate"
							}
						},
						{
							"id": 551,
							"name": "getSnapshotBeforeUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 552,
									"name": "getSnapshotBeforeUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.",
										"text": "Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n"
									},
									"parameters": [
										{
											"id": 553,
											"name": "prevProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 455,
														"name": "ICalendarDayProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 554,
											"name": "prevState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 494,
														"name": "ICalendarDayState"
													}
												],
												"name": "Readonly"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "SS"
											},
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 389,
										"name": "NewLifecycle.getSnapshotBeforeUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 675,
									"character": 31
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 389,
								"name": "NewLifecycle.getSnapshotBeforeUpdate"
							}
						},
						{
							"id": 506,
							"name": "render",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 507,
									"name": "render",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"name": "Element"
									},
									"overwrites": {
										"type": "reference",
										"name": "Component.render"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 52,
									"character": 10
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Component.render"
							}
						},
						{
							"id": 580,
							"name": "setState",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 581,
									"name": "setState",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"typeParameter": [
										{
											"id": 582,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"id": 494,
													"name": "ICalendarDayState"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 583,
											"name": "state",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 584,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {
																"isExported": true
															},
															"signatures": [
																{
																	"id": 585,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {
																		"isExported": true
																	},
																	"parameters": [
																		{
																			"id": 586,
																			"name": "prevState",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {
																				"isExported": true
																			},
																			"type": {
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "reference",
																						"id": 494,
																						"name": "ICalendarDayState"
																					}
																				],
																				"name": "Readonly"
																			}
																		},
																		{
																			"id": 587,
																			"name": "props",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {
																				"isExported": true
																			},
																			"type": {
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "reference",
																						"id": 455,
																						"name": "ICalendarDayProps"
																					}
																				],
																				"name": "Readonly"
																			}
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "intrinsic",
																				"name": "null"
																			},
																			{
																				"type": "unknown",
																				"name": "S"
																			},
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 588,
																					"name": "__type",
																					"kind": 65536,
																					"kindString": "Type literal",
																					"flags": {
																						"isExported": true
																					}
																				}
																			}
																		]
																	}
																}
															],
															"sources": [
																{
																	"fileName": "node_modules/@types/react/index.d.ts",
																	"line": 497,
																	"character": 18
																}
															]
														}
													},
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "null"
															},
															{
																"type": "unknown",
																"name": "S"
															},
															{
																"type": "reflection",
																"declaration": {
																	"id": 589,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {
																		"isExported": true
																	}
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 590,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 591,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {
																"isExported": true
															},
															"signatures": [
																{
																	"id": 592,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {
																		"isExported": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 413,
										"name": "Component.setState"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 496,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 413,
								"name": "Component.setState"
							}
						},
						{
							"id": 540,
							"name": "shouldComponentUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 541,
									"name": "shouldComponentUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called to determine whether the change in props and state should trigger a re-render.",
										"text": "`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n"
									},
									"parameters": [
										{
											"id": 542,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 455,
														"name": "ICalendarDayProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 543,
											"name": "nextState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 494,
														"name": "ICalendarDayState"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 544,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 378,
										"name": "ComponentLifecycle.shouldComponentUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 629,
									"character": 29
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 378,
								"name": "ComponentLifecycle.shouldComponentUpdate"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								500
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								523,
								536,
								535,
								513,
								534,
								512,
								533,
								514,
								527,
								532,
								516,
								517,
								520,
								519,
								518,
								529,
								528,
								515,
								531,
								530,
								524,
								525,
								526,
								521,
								522,
								511,
								510,
								579,
								499,
								498,
								598,
								602,
								601,
								578
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								562,
								503,
								573,
								547,
								538,
								555,
								560,
								564,
								545,
								568,
								508,
								593,
								551,
								506,
								580,
								540
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
							"line": 47,
							"character": 32
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"typeArguments": [
								{
									"type": "reference",
									"id": 455,
									"name": "ICalendarDayProps"
								},
								{
									"type": "reference",
									"id": 494,
									"name": "ICalendarDayState"
								}
							],
							"name": "Component"
						}
					]
				},
				{
					"id": 452,
					"name": "ICalendarDay",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 453,
							"name": "focus",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 454,
									"name": "focus",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 16,
									"character": 9
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								453
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
							"line": 15,
							"character": 29
						}
					]
				},
				{
					"id": 455,
					"name": "ICalendarDayProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 491,
							"name": "allFocusable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 41,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 475,
							"name": "autoNavigateOnSelection",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 28,
									"character": 27
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 456,
							"name": "componentRef",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 19,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 452,
										"name": "ICalendarDay"
									}
								],
								"name": "IRefObject"
							}
						},
						{
							"id": 474,
							"name": "dateRangeType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 27,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "DateRangeType"
							}
						},
						{
							"id": 484,
							"name": "dateTimeFormatter",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 34,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"id": 321,
								"name": "ICalendarFormatDateCallbacks"
							}
						},
						{
							"id": 473,
							"name": "firstDayOfWeek",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 26,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "DayOfWeek"
							}
						},
						{
							"id": 483,
							"name": "firstWeekOfYear",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 33,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "FirstWeekOfYear"
							}
						},
						{
							"id": 493,
							"name": "key",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 137,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "Key"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 493,
								"name": "Attributes.key"
							}
						},
						{
							"id": 487,
							"name": "maxDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 37,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 486,
							"name": "minDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 36,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 459,
							"name": "navigatedDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 22,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 476,
							"name": "navigationIcons",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 29,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"id": 317,
								"name": "ICalendarIconStrings"
							}
						},
						{
							"id": 470,
							"name": "onDismiss",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 25,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 471,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 472,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 478,
							"name": "onHeaderSelect",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 31,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 479,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 480,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"parameters": [
														{
															"id": 481,
															"name": "focus",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 465,
							"name": "onNavigateDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 24,
									"character": 18
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 466,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 467,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {
												"isExported": true
											},
											"parameters": [
												{
													"id": 468,
													"name": "date",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExported": true
													},
													"type": {
														"type": "reference",
														"name": "Date"
													}
												},
												{
													"id": 469,
													"name": "focusOnNavigatedDay",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExported": true
													},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									],
									"sources": [
										{
											"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
											"line": 24,
											"character": 19
										}
									]
								}
							}
						},
						{
							"id": 460,
							"name": "onSelectDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 23,
									"character": 16
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 461,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 462,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {
												"isExported": true
											},
											"parameters": [
												{
													"id": 463,
													"name": "date",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExported": true
													},
													"type": {
														"type": "reference",
														"name": "Date"
													}
												},
												{
													"id": 464,
													"name": "selectedDateRangeArray",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExported": true,
														"isOptional": true
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "Date"
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									],
									"sources": [
										{
											"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
											"line": 23,
											"character": 17
										}
									]
								}
							}
						},
						{
							"id": 492,
							"name": "ref",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 143,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 497,
										"name": "CalendarDay"
									}
								],
								"name": "LegacyRef"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 492,
								"name": "ClassAttributes.ref"
							}
						},
						{
							"id": 488,
							"name": "restrictedDates",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 38,
									"character": 19
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Date"
								}
							}
						},
						{
							"id": 458,
							"name": "selectedDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 21,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 490,
							"name": "showCloseButton",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 40,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 485,
							"name": "showSixWeeksByDefault",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 35,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 482,
							"name": "showWeekNumbers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 32,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 457,
							"name": "strings",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 20,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"id": 303,
								"name": "ICalendarStrings"
							}
						},
						{
							"id": 477,
							"name": "today",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 30,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 489,
							"name": "workWeekDays",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 39,
									"character": 16
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "DayOfWeek"
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								491,
								475,
								456,
								474,
								484,
								473,
								483,
								493,
								487,
								486,
								459,
								476,
								470,
								478,
								465,
								460,
								492,
								488,
								458,
								490,
								485,
								482,
								457,
								477,
								489
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
							"line": 18,
							"character": 34
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"typeArguments": [
								{
									"type": "reference",
									"id": 497,
									"name": "CalendarDay"
								}
							],
							"name": "ClassAttributes"
						}
					]
				},
				{
					"id": 494,
					"name": "ICalendarDayState",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 495,
							"name": "activeDescendantId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 44,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 496,
							"name": "weeks",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 45,
									"character": 9
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"id": 440,
										"name": "IDayInfo"
									}
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								495,
								496
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
							"line": 43,
							"character": 34
						}
					]
				},
				{
					"id": 440,
					"name": "IDayInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 442,
							"name": "date",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 7,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 447,
							"name": "isInBounds",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 12,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 444,
							"name": "isInMonth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 9,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 446,
							"name": "isSelected",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 11,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 445,
							"name": "isToday",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 10,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 441,
							"name": "key",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 6,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 448,
							"name": "onSelected",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 13,
									"character": 14
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 449,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 450,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {
												"isExported": true
											},
											"parameters": [
												{
													"id": 451,
													"name": "ev",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExported": true
													},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "HTMLElement"
															}
														],
														"name": "SyntheticEvent"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									],
									"sources": [
										{
											"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
											"line": 13,
											"character": 15
										}
									]
								}
							}
						},
						{
							"id": 443,
							"name": "originalDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
									"line": 8,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								442,
								447,
								444,
								446,
								445,
								441,
								448,
								443
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
							"line": 5,
							"character": 25
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						497
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						452,
						455,
						494,
						440
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Dependencies/calendar-custom/CalendarDay.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1560,
			"name": "\"src/Dependencies/calendar-custom/CalendarMonth\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/ducnm/Desktop/Add-on/rc365/src/Dependencies/calendar-custom/CalendarMonth.js",
			"children": [
				{
					"id": 1563,
					"name": "CalendarMonth",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarMonth.js",
							"line": 24,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"id": 1563,
						"name": "CalendarMonth"
					},
					"defaultValue": "(function (_super) {\n  __extends(CalendarMonth, _super);\n  function CalendarMonth(props) {\n    var _this = _super.call(this, props) || this;\n    _this._navigatedMonthRef = React.createRef();\n    _this._onCalendarYearRef = function (ref) {\n      _this._calendarYearRef = ref;\n    };\n    _this._onKeyDown = function (callback, ev) {\n      if (ev.which === KeyCodes.enter) {\n        callback();\n      }\n    };\n    _this._onSelectYear = function (selectedYear) {\n      _this._focusOnUpdate = true;\n      var _a = _this.props,\n        navigatedDate = _a.navigatedDate,\n        onNavigateDate = _a.onNavigateDate,\n        maxDate = _a.maxDate,\n        minDate = _a.minDate;\n      var navYear = navigatedDate.getFullYear();\n      if (navYear !== selectedYear) {\n        var newNavigationDate = new Date(navigatedDate.getTime());\n        newNavigationDate.setFullYear(selectedYear);\n        // for min and max dates, adjust the new navigation date - perhaps this should be\n        // checked on the master navigation date handler (i.e. in Calendar)\n        if (maxDate && newNavigationDate > maxDate) {\n          newNavigationDate = setMonth(newNavigationDate, maxDate.getMonth());\n        } else if (minDate && newNavigationDate < minDate) {\n          newNavigationDate = setMonth(newNavigationDate, minDate.getMonth());\n        }\n        onNavigateDate(newNavigationDate, true);\n      }\n      _this.setState({ isYearPickerVisible: false });\n    };\n    _this._yearToString = function (year) {\n      var _a = _this.props,\n        navigatedDate = _a.navigatedDate,\n        dateTimeFormatter = _a.dateTimeFormatter;\n      if (dateTimeFormatter) {\n        // create a date based on the current nav date\n        var yearFormattingDate = new Date(navigatedDate.getTime());\n        yearFormattingDate.setFullYear(year);\n        return dateTimeFormatter.formatYear(yearFormattingDate);\n      }\n      return String(year);\n    };\n    _this._yearRangeToString = function (yearRange) {\n      return (\n        _this._yearToString(yearRange.fromYear) +\n        \" - \" +\n        _this._yearToString(yearRange.toYear)\n      );\n    };\n    _this._yearRangeToNextDecadeLabel = function (yearRange) {\n      var strings = _this.props.strings;\n      return strings.nextYearRangeAriaLabel\n        ? strings.nextYearRangeAriaLabel +\n            \" \" +\n            _this._yearRangeToString(yearRange)\n        : \"\";\n    };\n    _this._yearRangeToPrevDecadeLabel = function (yearRange) {\n      var strings = _this.props.strings;\n      return strings.prevYearRangeAriaLabel\n        ? strings.prevYearRangeAriaLabel +\n            \" \" +\n            _this._yearRangeToString(yearRange)\n        : \"\";\n    };\n    _this._onRenderYear = function (year) {\n      return _this._yearToString(year);\n    };\n    _this._onSelectNextYear = function () {\n      var _a = _this.props,\n        navigatedDate = _a.navigatedDate,\n        onNavigateDate = _a.onNavigateDate;\n      onNavigateDate(addYears(navigatedDate, 1), false);\n    };\n    _this._onSelectNextYearKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter) {\n        _this._onKeyDown(_this._onSelectNextYear, ev);\n      }\n    };\n    _this._onSelectPrevYear = function () {\n      var _a = _this.props,\n        navigatedDate = _a.navigatedDate,\n        onNavigateDate = _a.onNavigateDate;\n      onNavigateDate(addYears(navigatedDate, -1), false);\n    };\n    _this._onSelectPrevYearKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter) {\n        _this._onKeyDown(_this._onSelectPrevYear, ev);\n      }\n    };\n    _this._onSelectMonthKeyDown = function (index) {\n      return function (ev) {\n        return _this._onKeyDown(function () {\n          return _this._onSelectMonth(index);\n        }, ev);\n      };\n    };\n    _this._onSelectMonth = function (newMonth) {\n      var _a = _this.props,\n        navigatedDate = _a.navigatedDate,\n        onNavigateDate = _a.onNavigateDate,\n        onHeaderSelect = _a.onHeaderSelect;\n      // If header is clickable the calendars are overlayed, switch back to day picker when month is clicked\n      if (onHeaderSelect) {\n        onHeaderSelect(true);\n      }\n      onNavigateDate(setMonth(navigatedDate, newMonth), true);\n    };\n    _this._onHeaderSelect = function () {\n      var _a = _this.props,\n        onHeaderSelect = _a.onHeaderSelect,\n        yearPickerHidden = _a.yearPickerHidden;\n      if (!yearPickerHidden) {\n        _this._focusOnUpdate = true;\n        _this.setState({ isYearPickerVisible: true });\n      } else if (onHeaderSelect) {\n        onHeaderSelect(true);\n      }\n    };\n    _this._onYearPickerHeaderSelect = function (focus) {\n      _this._focusOnUpdate = focus;\n      _this.setState({ isYearPickerVisible: false });\n    };\n    _this._onHeaderKeyDown = function (ev) {\n      if (\n        _this._onHeaderSelect &&\n        (ev.which === KeyCodes.enter || ev.which === KeyCodes.space)\n      ) {\n        _this._onHeaderSelect();\n      }\n    };\n    initializeComponentRef(_this);\n    _this._selectMonthCallbacks = [];\n    props.strings.shortMonths.map(function (month, index) {\n      _this._selectMonthCallbacks[index] = _this._onSelectMonth.bind(\n        _this,\n        index\n      );\n      return month;\n    });\n    _this._isCurrentMonth = _this._isCurrentMonth.bind(_this);\n    _this._onSelectNextYear = _this._onSelectNextYear.bind(_this);\n    _this._onSelectPrevYear = _this._onSelectPrevYear.bind(_this);\n    _this._onSelectMonth = _this._onSelectMonth.bind(_this);\n    _this.state = { isYearPickerVisible: false };\n    return _this;\n  }\n  CalendarMonth.prototype.componentDidUpdate = function () {\n    if (this._focusOnUpdate) {\n      this.focus();\n      this._focusOnUpdate = false;\n    }\n  };\n  CalendarMonth.prototype.render = function () {\n    var _a, _b;\n    var _this = this;\n    var _c = this.props,\n      navigatedDate = _c.navigatedDate,\n      selectedDate = _c.selectedDate,\n      strings = _c.strings,\n      today = _c.today,\n      highlightCurrentMonth = _c.highlightCurrentMonth,\n      highlightSelectedMonth = _c.highlightSelectedMonth,\n      navigationIcons = _c.navigationIcons,\n      dateTimeFormatter = _c.dateTimeFormatter,\n      minDate = _c.minDate,\n      maxDate = _c.maxDate,\n      yearPickerHidden = _c.yearPickerHidden;\n    if (this.state.isYearPickerVisible) {\n      // default the year picker to the current navigated date\n      var currentSelectedDate = navigatedDate\n        ? navigatedDate.getFullYear()\n        : undefined;\n      return React.createElement(CalendarYear, {\n        key:\n          \"calendarYear_\" +\n          (currentSelectedDate && currentSelectedDate.toString()),\n        minYear: minDate ? minDate.getFullYear() : undefined,\n        maxYear: maxDate ? maxDate.getFullYear() : undefined,\n        onSelectYear: this._onSelectYear,\n        navigationIcons: navigationIcons,\n        onHeaderSelect: this._onYearPickerHeaderSelect,\n        selectedYear: currentSelectedDate,\n        onRenderYear: this._onRenderYear,\n        strings: {\n          rangeAriaLabel: this._yearRangeToString,\n          prevRangeAriaLabel: this._yearRangeToPrevDecadeLabel,\n          nextRangeAriaLabel: this._yearRangeToNextDecadeLabel,\n        },\n        ref: this._onCalendarYearRef,\n      });\n    }\n    var rowIndexes = [];\n    for (var i = 0; i < strings.shortMonths.length / MONTHS_PER_ROW; i++) {\n      rowIndexes.push(i);\n    }\n    var leftNavigationIcon = navigationIcons.leftNavigation;\n    var rightNavigationIcon = navigationIcons.rightNavigation;\n    // determine if previous/next years are in bounds\n    var isPrevYearInBounds = minDate\n      ? compareDatePart(minDate, getYearStart(navigatedDate)) < 0\n      : true;\n    var isNextYearInBounds = maxDate\n      ? compareDatePart(getYearEnd(navigatedDate), maxDate) < 0\n      : true;\n    return React.createElement(\n      \"div\",\n      { className: css(\"ms-DatePicker-monthPicker\", styles.monthPicker) },\n      React.createElement(\n        \"div\",\n        { className: css(\"ms-DatePicker-header\", styles.header) },\n        this.props.onHeaderSelect || !yearPickerHidden\n          ? React.createElement(\n              \"div\",\n              {\n                className: css(\n                  \"ms-DatePicker-currentYear js-showYearPicker\",\n                  styles.currentYear,\n                  styles.headerToggleView\n                ),\n                onClick: this._onHeaderSelect,\n                onKeyDown: this._onHeaderKeyDown,\n                \"aria-label\": dateTimeFormatter.formatYear(navigatedDate),\n                role: \"button\",\n                \"aria-atomic\": true,\n                \"aria-live\": \"polite\",\n                tabIndex: 0,\n              },\n              dateTimeFormatter.formatYear(navigatedDate)\n            )\n          : React.createElement(\n              \"div\",\n              {\n                className: css(\n                  \"ms-DatePicker-currentYear js-showYearPicker\",\n                  styles.currentYear\n                ),\n              },\n              dateTimeFormatter.formatYear(navigatedDate)\n            ),\n        React.createElement(\n          \"div\",\n          {\n            className: css(\n              \"ms-DatePicker-yearComponents\",\n              styles.yearComponents\n            ),\n          },\n          React.createElement(\n            \"div\",\n            {\n              className: css(\"ms-DatePicker-navContainer\", styles.navContainer),\n            },\n            React.createElement(\n              \"button\",\n              {\n                className: css(\n                  \"ms-DatePicker-prevYear js-prevYear\",\n                  styles.prevYear,\n                  ((_a = {}),\n                  (_a[\n                    \"ms-DatePicker-prevYear--disabled \" +\n                      styles.prevYearIsDisabled\n                  ] = !isPrevYearInBounds),\n                  _a)\n                ),\n                disabled: !isPrevYearInBounds,\n                onClick: isPrevYearInBounds\n                  ? this._onSelectPrevYear\n                  : undefined,\n                onKeyDown: isPrevYearInBounds\n                  ? this._onSelectPrevYearKeyDown\n                  : undefined,\n                title: strings.prevYearAriaLabel\n                  ? strings.prevYearAriaLabel +\n                    \" \" +\n                    dateTimeFormatter.formatYear(addYears(navigatedDate, -1))\n                  : undefined,\n                role: \"button\",\n                type: \"button\",\n              },\n              React.createElement(Icon, {\n                iconName: getRTL() ? rightNavigationIcon : leftNavigationIcon,\n              })\n            ),\n            React.createElement(\n              \"button\",\n              {\n                className: css(\n                  \"ms-DatePicker-nextYear js-nextYear\",\n                  styles.nextYear,\n                  ((_b = {}),\n                  (_b[\n                    \"ms-DatePicker-nextYear--disabled \" +\n                      styles.nextYearIsDisabled\n                  ] = !isNextYearInBounds),\n                  _b)\n                ),\n                disabled: !isNextYearInBounds,\n                onClick: isNextYearInBounds\n                  ? this._onSelectNextYear\n                  : undefined,\n                onKeyDown: isNextYearInBounds\n                  ? this._onSelectNextYearKeyDown\n                  : undefined,\n                title: strings.nextYearAriaLabel\n                  ? strings.nextYearAriaLabel +\n                    \" \" +\n                    dateTimeFormatter.formatYear(addYears(navigatedDate, 1))\n                  : undefined,\n                role: \"button\",\n                type: \"button\",\n              },\n              React.createElement(Icon, {\n                iconName: getRTL() ? leftNavigationIcon : rightNavigationIcon,\n              })\n            )\n          )\n        )\n      ),\n      React.createElement(\n        FocusZone,\n        null,\n        React.createElement(\n          \"div\",\n          {\n            className: css(\"ms-DatePicker-optionGrid\", styles.optionGrid),\n            role: \"grid\",\n            \"aria-readonly\": \"true\",\n          },\n          rowIndexes.map(function (rowNum) {\n            var monthsForRow = strings.shortMonths.slice(\n              rowNum * MONTHS_PER_ROW,\n              (rowNum + 1) * MONTHS_PER_ROW\n            );\n            return React.createElement(\n              \"div\",\n              { key: \"monthRow_\" + rowNum, role: \"row\" },\n              monthsForRow.map(function (month, index) {\n                var _a;\n                var monthIndex = rowNum * MONTHS_PER_ROW + index;\n                var indexedMonth = setMonth(navigatedDate, monthIndex);\n                var isCurrentMonth = _this._isCurrentMonth(\n                  monthIndex,\n                  navigatedDate.getFullYear(),\n                  today\n                );\n                var isNavigatedMonth = navigatedDate.getMonth() === monthIndex;\n                var isSelectedMonth = selectedDate.getMonth() === monthIndex;\n                var isSelectedYear =\n                  selectedDate.getFullYear() === navigatedDate.getFullYear();\n                var isInBounds =\n                  (minDate\n                    ? compareDatePart(minDate, getMonthEnd(indexedMonth)) < 1\n                    : true) &&\n                  (maxDate\n                    ? compareDatePart(getMonthStart(indexedMonth), maxDate) < 1\n                    : true);\n                return React.createElement(\n                  \"button\",\n                  {\n                    role: \"gridcell\",\n                    className: css(\n                      \"ms-DatePicker-monthOption\",\n                      styles.monthOption,\n                      ((_a = {}),\n                      (_a[\n                        \"ms-DatePicker-day--today \" + styles.monthIsCurrentMonth\n                      ] = highlightCurrentMonth && isCurrentMonth),\n                      (_a[\n                        \"ms-DatePicker-day--highlighted \" +\n                          styles.monthIsHighlighted\n                      ] =\n                        (highlightCurrentMonth || highlightSelectedMonth) &&\n                        isSelectedMonth &&\n                        isSelectedYear),\n                      (_a[\n                        \"ms-DatePicker-monthOption--disabled \" +\n                          styles.monthOptionIsDisabled\n                      ] = !isInBounds),\n                      _a)\n                    ),\n                    disabled: !isInBounds,\n                    key: monthIndex,\n                    onClick: isInBounds\n                      ? _this._selectMonthCallbacks[monthIndex]\n                      : undefined,\n                    onKeyDown: isInBounds\n                      ? _this._onSelectMonthKeyDown(monthIndex)\n                      : undefined,\n                    \"aria-label\": dateTimeFormatter.formatMonthYear(\n                      indexedMonth,\n                      strings\n                    ),\n                    \"aria-selected\": isNavigatedMonth,\n                    \"data-is-focusable\": isInBounds ? true : undefined,\n                    ref: isNavigatedMonth\n                      ? _this._navigatedMonthRef\n                      : undefined,\n                    type: \"button\",\n                  },\n                  month\n                );\n              })\n            );\n          })\n        )\n      )\n    );\n  };\n  CalendarMonth.prototype.focus = function () {\n    if (this._calendarYearRef) {\n      this._calendarYearRef.focus();\n    } else if (this._navigatedMonthRef.current) {\n      this._navigatedMonthRef.current.tabIndex = 0;\n      this._navigatedMonthRef.current.focus();\n    }\n  };\n  CalendarMonth.prototype._isCurrentMonth = function (month, year, today) {\n    return today.getFullYear() === year && today.getMonth() === month;\n  };\n  return CalendarMonth;\n})(React.Component)"
				},
				{
					"id": 1562,
					"name": "MONTHS_PER_ROW",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarMonth.js",
							"line": 23,
							"character": 18
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "4"
				},
				{
					"id": 1561,
					"name": "styles",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarMonth.js",
							"line": 22,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"id": 1198,
						"name": "\"C:/Users/ducnm/Desktop/Add-on/rc365/src/Dependencies/calendar-custom/Calendar.scss\""
					},
					"defaultValue": "stylesImport"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1563,
						1562,
						1561
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Dependencies/calendar-custom/CalendarMonth.js",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1067,
			"name": "\"src/Dependencies/calendar-custom/CalendarMonth.d\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/ducnm/Desktop/Add-on/rc365/src/Dependencies/calendar-custom/CalendarMonth.d.ts",
			"children": [
				{
					"id": 1097,
					"name": "CalendarMonth",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 1134,
							"name": "SS",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						}
					],
					"children": [
						{
							"id": 1107,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1108,
									"name": "new CalendarMonth",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {
										"isExported": true
									},
									"parameters": [
										{
											"id": 1109,
											"name": "props",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"id": 1071,
												"name": "ICalendarMonthProps"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1097,
										"name": "CalendarMonth"
									},
									"overwrites": {
										"type": "reference",
										"name": "Component.__constructor"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 38,
									"character": 27
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Component.__constructor"
							}
						},
						{
							"id": 1104,
							"name": "_calendarYearRef",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 36,
									"character": 28
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1106,
							"name": "_focusOnUpdate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 38,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1117,
							"name": "_isCurrentMonth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 44,
									"character": 27
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1105,
							"name": "_navigatedMonthRef",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 37,
									"character": 30
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1116,
							"name": "_onCalendarYearRef",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 43,
									"character": 30
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1133,
							"name": "_onHeaderKeyDown",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 60,
									"character": 28
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1131,
							"name": "_onHeaderSelect",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 58,
									"character": 27
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1118,
							"name": "_onKeyDown",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 45,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1124,
							"name": "_onRenderYear",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 51,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1130,
							"name": "_onSelectMonth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 57,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1129,
							"name": "_onSelectMonthKeyDown",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 56,
									"character": 33
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1125,
							"name": "_onSelectNextYear",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 52,
									"character": 29
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1126,
							"name": "_onSelectNextYearKeyDown",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 53,
									"character": 36
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1127,
							"name": "_onSelectPrevYear",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 54,
									"character": 29
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1128,
							"name": "_onSelectPrevYearKeyDown",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 55,
									"character": 36
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1119,
							"name": "_onSelectYear",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 46,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1132,
							"name": "_onYearPickerHeaderSelect",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 59,
									"character": 37
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1103,
							"name": "_selectMonthCallbacks",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 35,
									"character": 33
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1122,
							"name": "_yearRangeToNextDecadeLabel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 49,
									"character": 39
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1123,
							"name": "_yearRangeToPrevDecadeLabel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 50,
									"character": 39
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1121,
							"name": "_yearRangeToString",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 48,
									"character": 30
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1120,
							"name": "_yearToString",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 47,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1175,
							"name": "context",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\nShould be used with type annotation or static contextType.",
								"text": "```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n",
								"tags": [
									{
										"tag": "see",
										"text": "https://reactjs.org/docs/context.html\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 484,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 412,
								"name": "Component.context"
							}
						},
						{
							"id": 1194,
							"name": "props",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 509,
									"character": 22
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 1071,
												"name": "ICalendarMonthProps"
											}
										],
										"name": "Readonly"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 1195,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExported": true
													},
													"children": [
														{
															"id": 1196,
															"name": "children",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isExported": true,
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/react/index.d.ts",
																	"line": 509,
																	"character": 57
																}
															],
															"type": {
																"type": "reference",
																"name": "ReactNode"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																1196
															]
														}
													],
													"sources": [
														{
															"fileName": "node_modules/@types/react/index.d.ts",
															"line": 509,
															"character": 47
														}
													]
												}
											}
										],
										"name": "Readonly"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 431,
								"name": "Component.props"
							}
						},
						{
							"id": 1098,
							"name": "refs",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "deprecated",
										"text": "unused, prefer 'ref' and 'componentRef' of ICalendarMonthProps.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 31,
									"character": 8
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1099,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExported": true
									},
									"indexSignature": [
										{
											"id": 1100,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {
												"isExported": true
											},
											"parameters": [
												{
													"id": 1101,
													"name": "key",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExported": true
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "React.ReactInstance"
											}
										}
									],
									"children": [
										{
											"id": 1102,
											"name": "navigatedMonth",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
													"line": 33,
													"character": 22
												}
											],
											"type": {
												"type": "reference",
												"name": "HTMLElement"
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												1102
											]
										}
									],
									"sources": [
										{
											"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
											"line": 31,
											"character": 9
										}
									]
								}
							},
							"overwrites": {
								"type": "reference",
								"id": 435,
								"name": "Component.refs"
							}
						},
						{
							"id": 1197,
							"name": "state",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 510,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1095,
										"name": "ICalendarMonthState"
									}
								],
								"name": "Readonly"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 434,
								"name": "Component.state"
							}
						},
						{
							"id": 1174,
							"name": "contextType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If set, `this.context` will be set at runtime to the current value of the given Context.",
								"text": "Usage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n",
								"tags": [
									{
										"tag": "see",
										"text": "https://reactjs.org/docs/context.html#classcontexttype\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 466,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Context"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 411,
								"name": "Component.contextType"
							}
						},
						{
							"id": 1154,
							"name": "UNSAFE_componentWillMount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 1155,
									"name": "UNSAFE_componentWillMount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
										"text": "This method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use componentDidMount or the constructor instead"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 395,
										"name": "DeprecatedLifecycle.UNSAFE_componentWillMount"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 710,
									"character": 33
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 395,
								"name": "DeprecatedLifecycle.UNSAFE_componentWillMount"
							}
						},
						{
							"id": 1160,
							"name": "UNSAFE_componentWillReceiveProps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 1161,
									"name": "UNSAFE_componentWillReceiveProps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
										"text": "Calling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use static getDerivedStateFromProps instead"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1162,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1071,
														"name": "ICalendarMonthProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 1163,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 741,
										"name": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 742,
									"character": 40
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 741,
								"name": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps"
							}
						},
						{
							"id": 1169,
							"name": "UNSAFE_componentWillUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 1170,
									"name": "UNSAFE_componentWillUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
										"text": "Note: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use getSnapshotBeforeUpdate instead"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1171,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1071,
														"name": "ICalendarMonthProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 1172,
											"name": "nextState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1095,
														"name": "ICalendarMonthState"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 1173,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 406,
										"name": "DeprecatedLifecycle.UNSAFE_componentWillUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 770,
									"character": 34
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 406,
								"name": "DeprecatedLifecycle.UNSAFE_componentWillUpdate"
							}
						},
						{
							"id": 1144,
							"name": "componentDidCatch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 1145,
									"name": "componentDidCatch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount."
									},
									"parameters": [
										{
											"id": 1146,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 1147,
											"name": "errorInfo",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"name": "ErrorInfo"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 385,
										"name": "ComponentLifecycle.componentDidCatch"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 639,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 385,
								"name": "ComponentLifecycle.componentDidCatch"
							}
						},
						{
							"id": 1135,
							"name": "componentDidMount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 1136,
									"name": "componentDidMount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called immediately after a component is mounted. Setting state here will trigger re-rendering."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 376,
										"name": "ComponentLifecycle.componentDidMount"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 618,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 376,
								"name": "ComponentLifecycle.componentDidMount"
							}
						},
						{
							"id": 1110,
							"name": "componentDidUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1111,
									"name": "componentDidUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"overwrites": {
										"type": "reference",
										"id": 555,
										"name": "NewLifecycle.componentDidUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 40,
									"character": 22
								}
							],
							"overwrites": {
								"type": "reference",
								"id": 555,
								"name": "NewLifecycle.componentDidUpdate"
							}
						},
						{
							"id": 1152,
							"name": "componentWillMount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 1153,
									"name": "componentWillMount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
										"text": "Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use componentDidMount or the constructor instead; will stop working in React 17"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 393,
										"name": "DeprecatedLifecycle.componentWillMount"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 696,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 393,
								"name": "DeprecatedLifecycle.componentWillMount"
							}
						},
						{
							"id": 1156,
							"name": "componentWillReceiveProps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 1157,
									"name": "componentWillReceiveProps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
										"text": "Calling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use static getDerivedStateFromProps instead; will stop working in React 17"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1158,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1071,
														"name": "ICalendarMonthProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 1159,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 397,
										"name": "DeprecatedLifecycle.componentWillReceiveProps"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 725,
									"character": 33
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 397,
								"name": "DeprecatedLifecycle.componentWillReceiveProps"
							}
						},
						{
							"id": 1142,
							"name": "componentWillUnmount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 1143,
									"name": "componentWillUnmount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 383,
										"name": "ComponentLifecycle.componentWillUnmount"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 634,
									"character": 28
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 383,
								"name": "ComponentLifecycle.componentWillUnmount"
							}
						},
						{
							"id": 1164,
							"name": "componentWillUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 1165,
									"name": "componentWillUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
										"text": "Note: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1166,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1071,
														"name": "ICalendarMonthProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 1167,
											"name": "nextState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1095,
														"name": "ICalendarMonthState"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 1168,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 401,
										"name": "DeprecatedLifecycle.componentWillUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 755,
									"character": 27
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 401,
								"name": "DeprecatedLifecycle.componentWillUpdate"
							}
						},
						{
							"id": 1114,
							"name": "focus",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1115,
									"name": "focus",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 42,
									"character": 9
								}
							]
						},
						{
							"id": 1189,
							"name": "forceUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1190,
									"name": "forceUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"parameters": [
										{
											"id": 1191,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 1192,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {
																"isExported": true
															},
															"signatures": [
																{
																	"id": 1193,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {
																		"isExported": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 426,
										"name": "Component.forceUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 501,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 426,
								"name": "Component.forceUpdate"
							}
						},
						{
							"id": 1148,
							"name": "getSnapshotBeforeUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 1149,
									"name": "getSnapshotBeforeUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.",
										"text": "Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n"
									},
									"parameters": [
										{
											"id": 1150,
											"name": "prevProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1071,
														"name": "ICalendarMonthProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 1151,
											"name": "prevState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1095,
														"name": "ICalendarMonthState"
													}
												],
												"name": "Readonly"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "SS"
											},
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 389,
										"name": "NewLifecycle.getSnapshotBeforeUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 675,
									"character": 31
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 389,
								"name": "NewLifecycle.getSnapshotBeforeUpdate"
							}
						},
						{
							"id": 1112,
							"name": "render",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1113,
									"name": "render",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"name": "Element"
									},
									"overwrites": {
										"type": "reference",
										"name": "Component.render"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 41,
									"character": 10
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Component.render"
							}
						},
						{
							"id": 1176,
							"name": "setState",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1177,
									"name": "setState",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"typeParameter": [
										{
											"id": 1178,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"id": 1095,
													"name": "ICalendarMonthState"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 1179,
											"name": "state",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 1180,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {
																"isExported": true
															},
															"signatures": [
																{
																	"id": 1181,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {
																		"isExported": true
																	},
																	"parameters": [
																		{
																			"id": 1182,
																			"name": "prevState",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {
																				"isExported": true
																			},
																			"type": {
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "reference",
																						"id": 1095,
																						"name": "ICalendarMonthState"
																					}
																				],
																				"name": "Readonly"
																			}
																		},
																		{
																			"id": 1183,
																			"name": "props",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {
																				"isExported": true
																			},
																			"type": {
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "reference",
																						"id": 1071,
																						"name": "ICalendarMonthProps"
																					}
																				],
																				"name": "Readonly"
																			}
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "intrinsic",
																				"name": "null"
																			},
																			{
																				"type": "unknown",
																				"name": "S"
																			},
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 1184,
																					"name": "__type",
																					"kind": 65536,
																					"kindString": "Type literal",
																					"flags": {
																						"isExported": true
																					}
																				}
																			}
																		]
																	}
																}
															],
															"sources": [
																{
																	"fileName": "node_modules/@types/react/index.d.ts",
																	"line": 497,
																	"character": 18
																}
															]
														}
													},
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "null"
															},
															{
																"type": "unknown",
																"name": "S"
															},
															{
																"type": "reflection",
																"declaration": {
																	"id": 1185,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {
																		"isExported": true
																	}
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 1186,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 1187,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {
																"isExported": true
															},
															"signatures": [
																{
																	"id": 1188,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {
																		"isExported": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 413,
										"name": "Component.setState"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 496,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 413,
								"name": "Component.setState"
							}
						},
						{
							"id": 1137,
							"name": "shouldComponentUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 1138,
									"name": "shouldComponentUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called to determine whether the change in props and state should trigger a re-render.",
										"text": "`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n"
									},
									"parameters": [
										{
											"id": 1139,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1071,
														"name": "ICalendarMonthProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 1140,
											"name": "nextState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1095,
														"name": "ICalendarMonthState"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 1141,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 378,
										"name": "ComponentLifecycle.shouldComponentUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 629,
									"character": 29
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 378,
								"name": "ComponentLifecycle.shouldComponentUpdate"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1107
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1104,
								1106,
								1117,
								1105,
								1116,
								1133,
								1131,
								1118,
								1124,
								1130,
								1129,
								1125,
								1126,
								1127,
								1128,
								1119,
								1132,
								1103,
								1122,
								1123,
								1121,
								1120,
								1175,
								1194,
								1098,
								1197,
								1174
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1154,
								1160,
								1169,
								1144,
								1135,
								1110,
								1152,
								1156,
								1142,
								1164,
								1114,
								1189,
								1148,
								1112,
								1176,
								1137
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
							"line": 27,
							"character": 34
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"typeArguments": [
								{
									"type": "reference",
									"id": 1071,
									"name": "ICalendarMonthProps"
								},
								{
									"type": "reference",
									"id": 1095,
									"name": "ICalendarMonthState"
								}
							],
							"name": "Component"
						}
					]
				},
				{
					"id": 1068,
					"name": "ICalendarMonth",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1069,
							"name": "focus",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1070,
									"name": "focus",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 5,
									"character": 9
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1069
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
							"line": 4,
							"character": 31
						}
					]
				},
				{
					"id": 1071,
					"name": "ICalendarMonthProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1072,
							"name": "componentRef",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 8,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1068,
										"name": "ICalendarMonth"
									}
								],
								"name": "IRefObject"
							}
						},
						{
							"id": 1089,
							"name": "dateTimeFormatter",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 18,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"id": 321,
								"name": "ICalendarFormatDateCallbacks"
							}
						},
						{
							"id": 1082,
							"name": "highlightCurrentMonth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 14,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1083,
							"name": "highlightSelectedMonth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 15,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1094,
							"name": "key",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 137,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "Key"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 493,
								"name": "Attributes.key"
							}
						},
						{
							"id": 1091,
							"name": "maxDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 20,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 1090,
							"name": "minDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 19,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 1073,
							"name": "navigatedDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 9,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 1088,
							"name": "navigationIcons",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 17,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"id": 317,
								"name": "ICalendarIconStrings"
							}
						},
						{
							"id": 1084,
							"name": "onHeaderSelect",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 16,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1085,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 1086,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"parameters": [
														{
															"id": 1087,
															"name": "focus",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 1076,
							"name": "onNavigateDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 12,
									"character": 18
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1077,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1078,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {
												"isExported": true
											},
											"parameters": [
												{
													"id": 1079,
													"name": "date",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExported": true
													},
													"type": {
														"type": "reference",
														"name": "Date"
													}
												},
												{
													"id": 1080,
													"name": "focusOnNavigatedDay",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExported": true
													},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									],
									"sources": [
										{
											"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
											"line": 12,
											"character": 19
										}
									]
								}
							}
						},
						{
							"id": 1093,
							"name": "ref",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 143,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1097,
										"name": "CalendarMonth"
									}
								],
								"name": "LegacyRef"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 492,
								"name": "ClassAttributes.ref"
							}
						},
						{
							"id": 1074,
							"name": "selectedDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 10,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 1075,
							"name": "strings",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 11,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"id": 303,
								"name": "ICalendarStrings"
							}
						},
						{
							"id": 1081,
							"name": "today",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 13,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 1092,
							"name": "yearPickerHidden",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 21,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1072,
								1089,
								1082,
								1083,
								1094,
								1091,
								1090,
								1073,
								1088,
								1084,
								1076,
								1093,
								1074,
								1075,
								1081,
								1092
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
							"line": 7,
							"character": 36
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"typeArguments": [
								{
									"type": "reference",
									"id": 1097,
									"name": "CalendarMonth"
								}
							],
							"name": "ClassAttributes"
						}
					]
				},
				{
					"id": 1095,
					"name": "ICalendarMonthState",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1096,
							"name": "isYearPickerVisible",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "State used to show/hide month picker"
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
									"line": 25,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1096
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
							"line": 23,
							"character": 36
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1097
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1068,
						1071,
						1095
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Dependencies/calendar-custom/CalendarMonth.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1564,
			"name": "\"src/Dependencies/calendar-custom/CalendarYear\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/ducnm/Desktop/Add-on/rc365/src/Dependencies/calendar-custom/CalendarYear.js",
			"children": [
				{
					"id": 1566,
					"name": "CELL_COUNT",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarYear.js",
							"line": 8,
							"character": 14
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "12"
				},
				{
					"id": 1581,
					"name": "CalendarYear",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarYear.js",
							"line": 410,
							"character": 16
						}
					],
					"type": {
						"type": "reference",
						"id": 1581,
						"name": "CalendarYear"
					},
					"defaultValue": "(function (_super) {\n  __extends(CalendarYear, _super);\n  function CalendarYear(props) {\n    var _this = _super.call(this, props) || this;\n    _this._gridRef = React.createRef();\n    _this._onNavNext = function () {\n      _this.setState({ fromYear: _this.state.fromYear + CELL_COUNT });\n    };\n    _this._onNavPrev = function () {\n      _this.setState({ fromYear: _this.state.fromYear - CELL_COUNT });\n    };\n    _this._renderHeader = function () {\n      return React.createElement(\n        CalendarYearHeader,\n        __assign({}, _this.props, {\n          fromYear: _this.state.fromYear,\n          toYear: _this.state.fromYear + CELL_COUNT - 1,\n          onSelectPrev: _this._onNavPrev,\n          onSelectNext: _this._onNavNext,\n        })\n      );\n    };\n    _this._renderGrid = function () {\n      return React.createElement(\n        CalendarYearGrid,\n        __assign({}, _this.props, {\n          fromYear: _this.state.fromYear,\n          toYear: _this.state.fromYear + CELL_COUNT - 1,\n          ref: _this._gridRef,\n        })\n      );\n    };\n    _this.state = _this._calculateInitialStateFromProps(props);\n    return _this;\n  }\n  CalendarYear.prototype.focus = function () {\n    if (this._gridRef.current) {\n      this._gridRef.current.focus();\n    }\n  };\n  CalendarYear.prototype.render = function () {\n    return React.createElement(\n      \"div\",\n      { className: css(\"ms-DatePicker-yearPicker\", styles.yearPicker) },\n      this._renderHeader(),\n      this._renderGrid()\n    );\n  };\n  CalendarYear.prototype._calculateInitialStateFromProps = function (props) {\n    var selectedYear = props.selectedYear,\n      navigatedYear = props.navigatedYear;\n    var rangeYear = selectedYear || navigatedYear || new Date().getFullYear();\n    var fromYear = Math.floor(rangeYear / 10) * 10;\n    return {\n      fromYear: fromYear,\n      navigatedYear: navigatedYear,\n      selectedYear: selectedYear,\n    };\n  };\n  return CalendarYear;\n})(React.Component)"
				},
				{
					"id": 1575,
					"name": "CalendarYearGrid",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarYear.js",
							"line": 85,
							"character": 20
						}
					],
					"type": {
						"type": "reference",
						"id": 1575,
						"name": "CalendarYearGrid"
					},
					"defaultValue": "(function (_super) {\n  __extends(CalendarYearGrid, _super);\n  function CalendarYearGrid() {\n    var _this = (_super !== null && _super.apply(this, arguments)) || this;\n    _this._selectedCellRef = React.createRef();\n    _this._currentCellRef = React.createRef();\n    _this._renderCell = function (year) {\n      var selected = year === _this.props.selectedYear;\n      var _a = _this.props,\n        minYear = _a.minYear,\n        maxYear = _a.maxYear,\n        onSelectYear = _a.onSelectYear;\n      var disabled =\n        (minYear !== undefined && year < minYear) ||\n        (maxYear !== undefined && year > maxYear);\n      var current = year === new Date().getFullYear();\n      return React.createElement(CalendarYearGridCell, {\n        key: year,\n        year: year,\n        selected: selected,\n        current: current,\n        disabled: disabled,\n        onSelectYear: onSelectYear,\n        ref: selected\n          ? _this._selectedCellRef\n          : current\n          ? _this._currentCellRef\n          : undefined,\n      });\n    };\n    return _this;\n  }\n  CalendarYearGrid.prototype.focus = function () {\n    if (this._selectedCellRef.current) {\n      this._selectedCellRef.current.focus();\n    } else if (this._currentCellRef.current) {\n      this._currentCellRef.current.focus();\n    }\n  };\n  CalendarYearGrid.prototype.render = function () {\n    var _a = this.props,\n      fromYear = _a.fromYear,\n      toYear = _a.toYear;\n    var year = fromYear;\n    var cells = [];\n    while (year <= toYear) {\n      cells.push(this._renderCell(year));\n      year++;\n    }\n    return React.createElement(\n      FocusZone,\n      null,\n      React.createElement(\n        \"div\",\n        {\n          className: css(\"ms-DatePicker-optionGrid\", styles.optionGrid),\n          role: \"grid\",\n        },\n        React.createElement(\"div\", { role: \"row\" }, cells)\n      )\n    );\n  };\n  return CalendarYearGrid;\n})(React.Component)"
				},
				{
					"id": 1574,
					"name": "CalendarYearGridCell",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarYear.js",
							"line": 18,
							"character": 24
						}
					],
					"type": {
						"type": "reference",
						"id": 1574,
						"name": "CalendarYearGridCell"
					},
					"defaultValue": "(function (_super) {\n  __extends(CalendarYearGridCell, _super);\n  function CalendarYearGridCell() {\n    var _this = (_super !== null && _super.apply(this, arguments)) || this;\n    _this._buttonRef = React.createRef();\n    _this._onRenderYear = function () {\n      var _a = _this.props,\n        year = _a.year,\n        onRenderYear = _a.onRenderYear;\n      if (onRenderYear) {\n        return onRenderYear(year);\n      }\n      return year;\n    };\n    _this._onClick = function () {\n      if (_this.props.onSelectYear) {\n        _this.props.onSelectYear(_this.props.year);\n      }\n    };\n    _this._onKeyDown = function (ev) {\n      if (_this.props.onSelectYear && ev.which === KeyCodes.enter) {\n        _this.props.onSelectYear(_this.props.year);\n      }\n    };\n    return _this;\n  }\n  CalendarYearGridCell.prototype.focus = function () {\n    if (this._buttonRef.current) {\n      this._buttonRef.current.focus();\n    }\n  };\n  CalendarYearGridCell.prototype.render = function () {\n    var _a;\n    var _b = this.props,\n      year = _b.year,\n      selected = _b.selected,\n      disabled = _b.disabled,\n      onSelectYear = _b.onSelectYear;\n    return React.createElement(\n      \"button\",\n      {\n        className: css(\n          \"ms-DatePicker-yearOption\",\n          styles.yearOption,\n          ((_a = {}),\n          (_a[\n            \"ms-DatePicker-day--highlighted \" + styles.yearIsHighlighted\n          ] = selected),\n          (_a[\n            \"ms-DatePicker-yearOption--disabled \" + styles.yearOptionIsDisabled\n          ] = disabled),\n          _a)\n        ),\n        type: \"button\",\n        role: \"gridcell\",\n        onClick: !disabled && onSelectYear ? this._onClick : undefined,\n        onKeyDown: !disabled && onSelectYear ? this._onKeyDown : undefined,\n        disabled: disabled,\n        \"aria-label\": String(year),\n        \"aria-selected\": selected,\n        ref: this._buttonRef,\n      },\n      this._onRenderYear()\n    );\n  };\n  return CalendarYearGridCell;\n})(React.Component)"
				},
				{
					"id": 1580,
					"name": "CalendarYearHeader",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarYear.js",
							"line": 385,
							"character": 22
						}
					],
					"type": {
						"type": "reference",
						"id": 1580,
						"name": "CalendarYearHeader"
					},
					"defaultValue": "(function (_super) {\n  __extends(CalendarYearHeader, _super);\n  function CalendarYearHeader() {\n    var _this = (_super !== null && _super.apply(this, arguments)) || this;\n    _this._onRenderTitle = function () {\n      if (_this.props.onRenderTitle) {\n        return _this.props.onRenderTitle(_this.props);\n      }\n      return React.createElement(CalendarYearTitle, __assign({}, _this.props));\n    };\n    _this._onRenderNav = function () {\n      return React.createElement(CalendarYearNav, __assign({}, _this.props));\n    };\n    return _this;\n  }\n  CalendarYearHeader.prototype.render = function () {\n    return React.createElement(\n      \"div\",\n      { className: css(\"ms-DatePicker-header\", styles.header) },\n      this._onRenderTitle(),\n      this._onRenderNav()\n    );\n  };\n  return CalendarYearHeader;\n})(React.Component)"
				},
				{
					"id": 1578,
					"name": "CalendarYearNav",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarYear.js",
							"line": 287,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"id": 1578,
						"name": "CalendarYearNav"
					},
					"defaultValue": "(function (_super) {\n  __extends(CalendarYearNav, _super);\n  function CalendarYearNav() {\n    return (_super !== null && _super.apply(this, arguments)) || this;\n  }\n  CalendarYearNav.prototype.render = function () {\n    return React.createElement(\n      \"div\",\n      {\n        className: css(\n          \"ms-DatePicker-decadeComponents\",\n          styles.decadeComponents\n        ),\n      },\n      React.createElement(\n        \"div\",\n        { className: css(\"ms-DatePicker-navContainer\", styles.navContainer) },\n        React.createElement(CalendarYearNavPrev, __assign({}, this.props)),\n        React.createElement(CalendarYearNavNext, __assign({}, this.props))\n      )\n    );\n  };\n  return CalendarYearNav;\n})(React.Component)"
				},
				{
					"id": 1577,
					"name": "CalendarYearNavNext",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarYear.js",
							"line": 217,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"id": 1577,
						"name": "CalendarYearNavNext"
					},
					"defaultValue": "(function (_super) {\n  __extends(CalendarYearNavNext, _super);\n  function CalendarYearNavNext() {\n    var _this = (_super !== null && _super.apply(this, arguments)) || this;\n    _this._onSelectNext = function () {\n      if (!_this.isDisabled && _this.props.onSelectNext) {\n        _this.props.onSelectNext();\n      }\n    };\n    _this._onKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter) {\n        _this._onSelectNext();\n      }\n    };\n    return _this;\n  }\n  CalendarYearNavNext.prototype.render = function () {\n    var _a;\n    var iconStrings = this.props.navigationIcons || DefaultNavigationIcons;\n    var strings = this.props.strings || DefaultCalendarYearStrings;\n    var nextRangeAriaLabel = strings.nextRangeAriaLabel;\n    var nextRange = {\n      fromYear: this.props.fromYear + CELL_COUNT,\n      toYear: this.props.toYear + CELL_COUNT,\n    };\n    var nextAriaLabel = nextRangeAriaLabel\n      ? typeof nextRangeAriaLabel === \"string\"\n        ? nextRangeAriaLabel\n        : nextRangeAriaLabel(nextRange)\n      : undefined;\n    var onSelectNext = this.props.onSelectNext;\n    var disabled = this.isDisabled;\n    return React.createElement(\n      \"button\",\n      {\n        className: css(\n          \"ms-DatePicker-nextDecade\",\n          styles.nextDecade,\n          ((_a = {}),\n          (_a[\n            \"ms-DatePicker-nextDecade--disabled \" + styles.nextDecadeIsDisabled\n          ] = disabled),\n          _a)\n        ),\n        onClick: !disabled && onSelectNext ? this._onSelectNext : undefined,\n        onKeyDown: !disabled && onSelectNext ? this._onKeyDown : undefined,\n        type: \"button\",\n        tabIndex: 0,\n        title: nextAriaLabel,\n        disabled: this.isDisabled,\n      },\n      React.createElement(Icon, {\n        iconName: getRTL()\n          ? iconStrings.leftNavigation\n          : iconStrings.rightNavigation,\n      })\n    );\n  };\n  Object.defineProperty(CalendarYearNavNext.prototype, \"isDisabled\", {\n    get: function () {\n      var maxYear = this.props.maxYear;\n      return (\n        maxYear !== undefined && this.props.fromYear + CELL_COUNT > maxYear\n      );\n    },\n    enumerable: true,\n    configurable: true,\n  });\n  return CalendarYearNavNext;\n})(React.Component)"
				},
				{
					"id": 1576,
					"name": "CalendarYearNavPrev",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarYear.js",
							"line": 149,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"id": 1576,
						"name": "CalendarYearNavPrev"
					},
					"defaultValue": "(function (_super) {\n  __extends(CalendarYearNavPrev, _super);\n  function CalendarYearNavPrev() {\n    var _this = (_super !== null && _super.apply(this, arguments)) || this;\n    _this._onSelectPrev = function () {\n      if (!_this.isDisabled && _this.props.onSelectPrev) {\n        _this.props.onSelectPrev();\n      }\n    };\n    _this._onKeyDown = function (ev) {\n      if (ev.which === KeyCodes.enter) {\n        _this._onSelectPrev();\n      }\n    };\n    return _this;\n  }\n  CalendarYearNavPrev.prototype.render = function () {\n    var _a;\n    var iconStrings = this.props.navigationIcons || DefaultNavigationIcons;\n    var strings = this.props.strings || DefaultCalendarYearStrings;\n    var prevRangeAriaLabel = strings.prevRangeAriaLabel;\n    var prevRange = {\n      fromYear: this.props.fromYear - CELL_COUNT,\n      toYear: this.props.toYear - CELL_COUNT,\n    };\n    var prevAriaLabel = prevRangeAriaLabel\n      ? typeof prevRangeAriaLabel === \"string\"\n        ? prevRangeAriaLabel\n        : prevRangeAriaLabel(prevRange)\n      : undefined;\n    var disabled = this.isDisabled;\n    var onSelectPrev = this.props.onSelectPrev;\n    return React.createElement(\n      \"button\",\n      {\n        className: css(\n          \"ms-DatePicker-prevDecade\",\n          styles.prevDecade,\n          ((_a = {}),\n          (_a[\n            \"ms-DatePicker-prevDecade--disabled \" + styles.prevDecadeIsDisabled\n          ] = disabled),\n          _a)\n        ),\n        onClick: !disabled && onSelectPrev ? this._onSelectPrev : undefined,\n        onKeyDown: !disabled && onSelectPrev ? this._onKeyDown : undefined,\n        type: \"button\",\n        tabIndex: 0,\n        title: prevAriaLabel,\n        disabled: disabled,\n      },\n      React.createElement(Icon, {\n        iconName: getRTL()\n          ? iconStrings.rightNavigation\n          : iconStrings.leftNavigation,\n      })\n    );\n  };\n  Object.defineProperty(CalendarYearNavPrev.prototype, \"isDisabled\", {\n    get: function () {\n      var minYear = this.props.minYear;\n      return minYear !== undefined && this.props.fromYear < minYear;\n    },\n    enumerable: true,\n    configurable: true,\n  });\n  return CalendarYearNavPrev;\n})(React.Component)"
				},
				{
					"id": 1579,
					"name": "CalendarYearTitle",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarYear.js",
							"line": 311,
							"character": 21
						}
					],
					"type": {
						"type": "reference",
						"id": 1579,
						"name": "CalendarYearTitle"
					},
					"defaultValue": "(function (_super) {\n  __extends(CalendarYearTitle, _super);\n  function CalendarYearTitle() {\n    var _this = (_super !== null && _super.apply(this, arguments)) || this;\n    _this._onHeaderSelect = function () {\n      if (_this.props.onHeaderSelect) {\n        _this.props.onHeaderSelect(true);\n      }\n    };\n    _this._onHeaderKeyDown = function (ev) {\n      if (\n        _this.props.onHeaderSelect &&\n        (ev.which === KeyCodes.enter || ev.which === KeyCodes.space)\n      ) {\n        _this.props.onHeaderSelect(true);\n      }\n    };\n    _this._onRenderYear = function (year) {\n      if (_this.props.onRenderYear) {\n        return _this.props.onRenderYear(year);\n      }\n      return year;\n    };\n    return _this;\n  }\n  CalendarYearTitle.prototype.render = function () {\n    var _a = this.props,\n      fromYear = _a.fromYear,\n      toYear = _a.toYear,\n      onHeaderSelect = _a.onHeaderSelect;\n    if (onHeaderSelect) {\n      var strings = this.props.strings || DefaultCalendarYearStrings;\n      var rangeAriaLabel = strings.rangeAriaLabel;\n      var ariaLabel = rangeAriaLabel\n        ? typeof rangeAriaLabel === \"string\"\n          ? rangeAriaLabel\n          : rangeAriaLabel(this.props)\n        : undefined;\n      return React.createElement(\n        \"div\",\n        {\n          className: css(\n            \"ms-DatePicker-currentDecade js-showYearPicker\",\n            styles.currentDecade,\n            styles.headerToggleView\n          ),\n          onClick: this._onHeaderSelect,\n          onKeyDown: this._onHeaderKeyDown,\n          \"aria-label\": ariaLabel,\n          role: \"button\",\n          \"aria-atomic\": true,\n          \"aria-live\": \"polite\",\n          tabIndex: 0,\n        },\n        this._onRenderYear(fromYear),\n        \" - \",\n        this._onRenderYear(toYear)\n      );\n    }\n    return React.createElement(\n      \"div\",\n      {\n        className: css(\n          \"ms-DatePicker-currentDecade js-showYearPicker\",\n          styles.currentDecade\n        ),\n      },\n      this._onRenderYear(fromYear),\n      \" - \",\n      this._onRenderYear(toYear)\n    );\n  };\n  return CalendarYearTitle;\n})(React.Component)"
				},
				{
					"id": 1565,
					"name": "styles",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarYear.js",
							"line": 7,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"id": 1198,
						"name": "\"C:/Users/ducnm/Desktop/Add-on/rc365/src/Dependencies/calendar-custom/Calendar.scss\""
					},
					"defaultValue": "stylesImport"
				},
				{
					"id": 1567,
					"name": "DefaultCalendarYearStrings",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {},
					"children": [
						{
							"id": 1569,
							"name": "nextRangeAriaLabel",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.js",
									"line": 11,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "undefined"
							},
							"defaultValue": "undefined"
						},
						{
							"id": 1568,
							"name": "prevRangeAriaLabel",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.js",
									"line": 10,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "undefined"
							},
							"defaultValue": "undefined"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								1569,
								1568
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarYear.js",
							"line": 9,
							"character": 30
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 1570,
					"name": "DefaultNavigationIcons",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {},
					"children": [
						{
							"id": 1573,
							"name": "closeIcon",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.js",
									"line": 16,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"CalculatorMultiply\""
						},
						{
							"id": 1571,
							"name": "leftNavigation",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.js",
									"line": 14,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Up\""
						},
						{
							"id": 1572,
							"name": "rightNavigation",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.js",
									"line": 15,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Down\""
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								1573,
								1571,
								1572
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarYear.js",
							"line": 13,
							"character": 26
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1566,
						1581,
						1575,
						1574,
						1580,
						1578,
						1577,
						1576,
						1579,
						1565
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						1567,
						1570
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Dependencies/calendar-custom/CalendarYear.js",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1399,
			"name": "\"src/Dependencies/calendar-custom/CalendarYear.d\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/ducnm/Desktop/Add-on/rc365/src/Dependencies/calendar-custom/CalendarYear.d.ts",
			"children": [
				{
					"id": 1473,
					"name": "CalendarYear",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 1487,
							"name": "SS",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						}
					],
					"children": [
						{
							"id": 1475,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1476,
									"name": "new CalendarYear",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {
										"isExported": true
									},
									"parameters": [
										{
											"id": 1477,
											"name": "props",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"id": 1413,
												"name": "ICalendarYearProps"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1473,
										"name": "CalendarYear"
									},
									"overwrites": {
										"type": "reference",
										"name": "Component.__constructor"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 41,
									"character": 21
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Component.__constructor"
							}
						},
						{
							"id": 1486,
							"name": "_calculateInitialStateFromProps",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 49,
									"character": 43
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1474,
							"name": "_gridRef",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 41,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1482,
							"name": "_onNavNext",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 45,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1483,
							"name": "_onNavPrev",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 46,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1485,
							"name": "_renderGrid",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 48,
									"character": 23
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1484,
							"name": "_renderHeader",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 47,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1533,
							"name": "context",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\nShould be used with type annotation or static contextType.",
								"text": "```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n",
								"tags": [
									{
										"tag": "see",
										"text": "https://reactjs.org/docs/context.html\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 484,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 412,
								"name": "Component.context"
							}
						},
						{
							"id": 1552,
							"name": "props",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 509,
									"character": 22
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 1413,
												"name": "ICalendarYearProps"
											}
										],
										"name": "Readonly"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 1553,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExported": true
													},
													"children": [
														{
															"id": 1554,
															"name": "children",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isExported": true,
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/react/index.d.ts",
																	"line": 509,
																	"character": 57
																}
															],
															"type": {
																"type": "reference",
																"name": "ReactNode"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																1554
															]
														}
													],
													"sources": [
														{
															"fileName": "node_modules/@types/react/index.d.ts",
															"line": 509,
															"character": 47
														}
													]
												}
											}
										],
										"name": "Readonly"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 431,
								"name": "Component.props"
							}
						},
						{
							"id": 1556,
							"name": "refs",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "deprecated",
										"text": "\nhttps://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 515,
									"character": 12
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1557,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExported": true
									},
									"indexSignature": [
										{
											"id": 1558,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {
												"isExported": true
											},
											"parameters": [
												{
													"id": 1559,
													"name": "key",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExported": true
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "ReactInstance"
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/react/index.d.ts",
											"line": 515,
											"character": 13
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 435,
								"name": "Component.refs"
							}
						},
						{
							"id": 1555,
							"name": "state",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 510,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1469,
										"name": "ICalendarYearState"
									}
								],
								"name": "Readonly"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 434,
								"name": "Component.state"
							}
						},
						{
							"id": 1532,
							"name": "contextType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If set, `this.context` will be set at runtime to the current value of the given Context.",
								"text": "Usage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n",
								"tags": [
									{
										"tag": "see",
										"text": "https://reactjs.org/docs/context.html#classcontexttype\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 466,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Context"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 411,
								"name": "Component.contextType"
							}
						},
						{
							"id": 1512,
							"name": "UNSAFE_componentWillMount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 1513,
									"name": "UNSAFE_componentWillMount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
										"text": "This method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use componentDidMount or the constructor instead"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 395,
										"name": "DeprecatedLifecycle.UNSAFE_componentWillMount"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 710,
									"character": 33
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 395,
								"name": "DeprecatedLifecycle.UNSAFE_componentWillMount"
							}
						},
						{
							"id": 1518,
							"name": "UNSAFE_componentWillReceiveProps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 1519,
									"name": "UNSAFE_componentWillReceiveProps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
										"text": "Calling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use static getDerivedStateFromProps instead"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1520,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1413,
														"name": "ICalendarYearProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 1521,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 741,
										"name": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 742,
									"character": 40
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 741,
								"name": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps"
							}
						},
						{
							"id": 1527,
							"name": "UNSAFE_componentWillUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 1528,
									"name": "UNSAFE_componentWillUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
										"text": "Note: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use getSnapshotBeforeUpdate instead"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1529,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1413,
														"name": "ICalendarYearProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 1530,
											"name": "nextState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1469,
														"name": "ICalendarYearState"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 1531,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 406,
										"name": "DeprecatedLifecycle.UNSAFE_componentWillUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 770,
									"character": 34
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 406,
								"name": "DeprecatedLifecycle.UNSAFE_componentWillUpdate"
							}
						},
						{
							"id": 1497,
							"name": "componentDidCatch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 1498,
									"name": "componentDidCatch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount."
									},
									"parameters": [
										{
											"id": 1499,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 1500,
											"name": "errorInfo",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"name": "ErrorInfo"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 385,
										"name": "ComponentLifecycle.componentDidCatch"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 639,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 385,
								"name": "ComponentLifecycle.componentDidCatch"
							}
						},
						{
							"id": 1488,
							"name": "componentDidMount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 1489,
									"name": "componentDidMount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called immediately after a component is mounted. Setting state here will trigger re-rendering."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 376,
										"name": "ComponentLifecycle.componentDidMount"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 618,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 376,
								"name": "ComponentLifecycle.componentDidMount"
							}
						},
						{
							"id": 1505,
							"name": "componentDidUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 1506,
									"name": "componentDidUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called immediately after updating occurs. Not called for the initial render.",
										"text": "The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n"
									},
									"parameters": [
										{
											"id": 1507,
											"name": "prevProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1413,
														"name": "ICalendarYearProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 1508,
											"name": "prevState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1469,
														"name": "ICalendarYearState"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 1509,
											"name": "snapshot",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 1487,
												"name": "SS"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 555,
										"name": "NewLifecycle.componentDidUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 681,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 555,
								"name": "NewLifecycle.componentDidUpdate"
							}
						},
						{
							"id": 1510,
							"name": "componentWillMount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 1511,
									"name": "componentWillMount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
										"text": "Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use componentDidMount or the constructor instead; will stop working in React 17"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 393,
										"name": "DeprecatedLifecycle.componentWillMount"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 696,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 393,
								"name": "DeprecatedLifecycle.componentWillMount"
							}
						},
						{
							"id": 1514,
							"name": "componentWillReceiveProps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 1515,
									"name": "componentWillReceiveProps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
										"text": "Calling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use static getDerivedStateFromProps instead; will stop working in React 17"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1516,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1413,
														"name": "ICalendarYearProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 1517,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 397,
										"name": "DeprecatedLifecycle.componentWillReceiveProps"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 725,
									"character": 33
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 397,
								"name": "DeprecatedLifecycle.componentWillReceiveProps"
							}
						},
						{
							"id": 1495,
							"name": "componentWillUnmount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 1496,
									"name": "componentWillUnmount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 383,
										"name": "ComponentLifecycle.componentWillUnmount"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 634,
									"character": 28
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 383,
								"name": "ComponentLifecycle.componentWillUnmount"
							}
						},
						{
							"id": 1522,
							"name": "componentWillUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 1523,
									"name": "componentWillUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
										"text": "Note: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1524,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1413,
														"name": "ICalendarYearProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 1525,
											"name": "nextState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1469,
														"name": "ICalendarYearState"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 1526,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 401,
										"name": "DeprecatedLifecycle.componentWillUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 755,
									"character": 27
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 401,
								"name": "DeprecatedLifecycle.componentWillUpdate"
							}
						},
						{
							"id": 1478,
							"name": "focus",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1479,
									"name": "focus",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"implementationOf": {
										"type": "reference",
										"id": 1412,
										"name": "ICalendarYear.focus"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 43,
									"character": 9
								}
							],
							"implementationOf": {
								"type": "reference",
								"id": 1411,
								"name": "ICalendarYear.focus"
							}
						},
						{
							"id": 1547,
							"name": "forceUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1548,
									"name": "forceUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"parameters": [
										{
											"id": 1549,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 1550,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {
																"isExported": true
															},
															"signatures": [
																{
																	"id": 1551,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {
																		"isExported": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 426,
										"name": "Component.forceUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 501,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 426,
								"name": "Component.forceUpdate"
							}
						},
						{
							"id": 1501,
							"name": "getSnapshotBeforeUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 1502,
									"name": "getSnapshotBeforeUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.",
										"text": "Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n"
									},
									"parameters": [
										{
											"id": 1503,
											"name": "prevProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1413,
														"name": "ICalendarYearProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 1504,
											"name": "prevState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1469,
														"name": "ICalendarYearState"
													}
												],
												"name": "Readonly"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "SS"
											},
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 389,
										"name": "NewLifecycle.getSnapshotBeforeUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 675,
									"character": 31
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 389,
								"name": "NewLifecycle.getSnapshotBeforeUpdate"
							}
						},
						{
							"id": 1480,
							"name": "render",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1481,
									"name": "render",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"name": "Element"
									},
									"overwrites": {
										"type": "reference",
										"name": "Component.render"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 44,
									"character": 10
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Component.render"
							}
						},
						{
							"id": 1534,
							"name": "setState",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1535,
									"name": "setState",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"typeParameter": [
										{
											"id": 1536,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"id": 1469,
													"name": "ICalendarYearState"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 1537,
											"name": "state",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 1538,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {
																"isExported": true
															},
															"signatures": [
																{
																	"id": 1539,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {
																		"isExported": true
																	},
																	"parameters": [
																		{
																			"id": 1540,
																			"name": "prevState",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {
																				"isExported": true
																			},
																			"type": {
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "reference",
																						"id": 1469,
																						"name": "ICalendarYearState"
																					}
																				],
																				"name": "Readonly"
																			}
																		},
																		{
																			"id": 1541,
																			"name": "props",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {
																				"isExported": true
																			},
																			"type": {
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "reference",
																						"id": 1413,
																						"name": "ICalendarYearProps"
																					}
																				],
																				"name": "Readonly"
																			}
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "intrinsic",
																				"name": "null"
																			},
																			{
																				"type": "unknown",
																				"name": "S"
																			},
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 1542,
																					"name": "__type",
																					"kind": 65536,
																					"kindString": "Type literal",
																					"flags": {
																						"isExported": true
																					}
																				}
																			}
																		]
																	}
																}
															],
															"sources": [
																{
																	"fileName": "node_modules/@types/react/index.d.ts",
																	"line": 497,
																	"character": 18
																}
															]
														}
													},
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "null"
															},
															{
																"type": "unknown",
																"name": "S"
															},
															{
																"type": "reflection",
																"declaration": {
																	"id": 1543,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {
																		"isExported": true
																	}
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 1544,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 1545,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {
																"isExported": true
															},
															"signatures": [
																{
																	"id": 1546,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {
																		"isExported": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 413,
										"name": "Component.setState"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 496,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 413,
								"name": "Component.setState"
							}
						},
						{
							"id": 1490,
							"name": "shouldComponentUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 1491,
									"name": "shouldComponentUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Called to determine whether the change in props and state should trigger a re-render.",
										"text": "`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n"
									},
									"parameters": [
										{
											"id": 1492,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1413,
														"name": "ICalendarYearProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 1493,
											"name": "nextState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1469,
														"name": "ICalendarYearState"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 1494,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 378,
										"name": "ComponentLifecycle.shouldComponentUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 629,
									"character": 29
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 378,
								"name": "ComponentLifecycle.shouldComponentUpdate"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1475
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1486,
								1474,
								1482,
								1483,
								1485,
								1484,
								1533,
								1552,
								1556,
								1555,
								1532
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1512,
								1518,
								1527,
								1497,
								1488,
								1505,
								1510,
								1514,
								1495,
								1522,
								1478,
								1547,
								1501,
								1480,
								1534,
								1490
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
							"line": 40,
							"character": 33
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"typeArguments": [
								{
									"type": "reference",
									"id": 1413,
									"name": "ICalendarYearProps"
								},
								{
									"type": "reference",
									"id": 1469,
									"name": "ICalendarYearState"
								}
							],
							"name": "Component"
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"id": 1410,
							"name": "ICalendarYear"
						}
					]
				},
				{
					"id": 1410,
					"name": "ICalendarYear",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1411,
							"name": "focus",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1412,
									"name": "focus",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 16,
									"character": 9
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1411
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
							"line": 15,
							"character": 30
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"id": 1473,
							"name": "CalendarYear"
						}
					]
				},
				{
					"id": 1437,
					"name": "ICalendarYearHeaderProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1465,
							"name": "className",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 28,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1435,
								"name": "ICalendarYearProps.className"
							}
						},
						{
							"id": 1467,
							"name": "fromYear",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 4,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1401,
								"name": "ICalendarYearRange.fromYear"
							}
						},
						{
							"id": 1448,
							"name": "maxYear",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 23,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1418,
								"name": "ICalendarYearProps.maxYear"
							}
						},
						{
							"id": 1447,
							"name": "minYear",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 22,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1417,
								"name": "ICalendarYearProps.minYear"
							}
						},
						{
							"id": 1445,
							"name": "navigatedYear",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 20,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1415,
								"name": "ICalendarYearProps.navigatedYear"
							}
						},
						{
							"id": 1444,
							"name": "navigationIcons",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 19,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"id": 317,
								"name": "ICalendarIconStrings"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1414,
								"name": "ICalendarYearProps.navigationIcons"
							}
						},
						{
							"id": 1449,
							"name": "onHeaderSelect",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 24,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1450,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 1451,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"parameters": [
														{
															"id": 1452,
															"name": "focus",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1419,
								"name": "ICalendarYearProps.onHeaderSelect"
							}
						},
						{
							"id": 1457,
							"name": "onRenderTitle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 26,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1458,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 1459,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"parameters": [
														{
															"id": 1460,
															"name": "props",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "reference",
																"id": 1437,
																"name": "ICalendarYearHeaderProps"
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "React.ReactNode"
													}
												}
											]
										}
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1427,
								"name": "ICalendarYearProps.onRenderTitle"
							}
						},
						{
							"id": 1461,
							"name": "onRenderYear",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 27,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1462,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 1463,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"parameters": [
														{
															"id": 1464,
															"name": "year",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "React.ReactNode"
													}
												}
											]
										}
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1431,
								"name": "ICalendarYearProps.onRenderYear"
							}
						},
						{
							"id": 1441,
							"name": "onSelectNext",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 33,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1442,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 1443,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 1438,
							"name": "onSelectPrev",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 32,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1439,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 1440,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 1453,
							"name": "onSelectYear",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 25,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1454,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 1455,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"parameters": [
														{
															"id": 1456,
															"name": "year",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1423,
								"name": "ICalendarYearProps.onSelectYear"
							}
						},
						{
							"id": 1446,
							"name": "selectedYear",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 21,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1416,
								"name": "ICalendarYearProps.selectedYear"
							}
						},
						{
							"id": 1466,
							"name": "strings",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 29,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"id": 1406,
								"name": "ICalendarYearStrings"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1436,
								"name": "ICalendarYearProps.strings"
							}
						},
						{
							"id": 1468,
							"name": "toYear",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 5,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1402,
								"name": "ICalendarYearRange.toYear"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1465,
								1467,
								1448,
								1447,
								1445,
								1444,
								1449,
								1457,
								1461,
								1441,
								1438,
								1453,
								1446,
								1466,
								1468
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
							"line": 31,
							"character": 41
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 1413,
							"name": "ICalendarYearProps"
						},
						{
							"type": "reference",
							"id": 1400,
							"name": "ICalendarYearRange"
						}
					]
				},
				{
					"id": 1413,
					"name": "ICalendarYearProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1435,
							"name": "className",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 28,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1418,
							"name": "maxYear",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 23,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 1417,
							"name": "minYear",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 22,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 1415,
							"name": "navigatedYear",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 20,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 1414,
							"name": "navigationIcons",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 19,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"id": 317,
								"name": "ICalendarIconStrings"
							}
						},
						{
							"id": 1419,
							"name": "onHeaderSelect",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 24,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1420,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 1421,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"parameters": [
														{
															"id": 1422,
															"name": "focus",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 1427,
							"name": "onRenderTitle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 26,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1428,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 1429,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"parameters": [
														{
															"id": 1430,
															"name": "props",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "reference",
																"id": 1437,
																"name": "ICalendarYearHeaderProps"
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "React.ReactNode"
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 1431,
							"name": "onRenderYear",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 27,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1432,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 1433,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"parameters": [
														{
															"id": 1434,
															"name": "year",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "React.ReactNode"
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 1423,
							"name": "onSelectYear",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 25,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1424,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 1425,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"parameters": [
														{
															"id": 1426,
															"name": "year",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 1416,
							"name": "selectedYear",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 21,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 1436,
							"name": "strings",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 29,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"id": 1406,
								"name": "ICalendarYearStrings"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1435,
								1418,
								1417,
								1415,
								1414,
								1419,
								1427,
								1431,
								1423,
								1416,
								1436
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
							"line": 18,
							"character": 35
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"id": 1437,
							"name": "ICalendarYearHeaderProps"
						}
					]
				},
				{
					"id": 1400,
					"name": "ICalendarYearRange",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1401,
							"name": "fromYear",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 4,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1402,
							"name": "toYear",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 5,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1401,
								1402
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
							"line": 3,
							"character": 35
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"id": 1437,
							"name": "ICalendarYearHeaderProps"
						}
					]
				},
				{
					"id": 1403,
					"name": "ICalendarYearRangeToString",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1404,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"parameters": [
								{
									"id": 1405,
									"name": "range",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"id": 1400,
										"name": "ICalendarYearRange"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
							"line": 7,
							"character": 43
						}
					]
				},
				{
					"id": 1469,
					"name": "ICalendarYearState",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1470,
							"name": "fromYear",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 36,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1471,
							"name": "navigatedYear",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 37,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 1472,
							"name": "selectedYear",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 38,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1470,
								1471,
								1472
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
							"line": 35,
							"character": 35
						}
					]
				},
				{
					"id": 1406,
					"name": "ICalendarYearStrings",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1409,
							"name": "nextRangeAriaLabel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 13,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"id": 1403,
										"name": "ICalendarYearRangeToString"
									}
								]
							}
						},
						{
							"id": 1408,
							"name": "prevRangeAriaLabel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 12,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"id": 1403,
										"name": "ICalendarYearRangeToString"
									}
								]
							}
						},
						{
							"id": 1407,
							"name": "rangeAriaLabel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
									"line": 11,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"id": 1403,
										"name": "ICalendarYearRangeToString"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1409,
								1408,
								1407
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
							"line": 10,
							"character": 37
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1473
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1410,
						1437,
						1413,
						1400,
						1403,
						1469,
						1406
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Dependencies/calendar-custom/CalendarYear.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 627,
			"name": "\"src/Dependencies/calendar-custom/CalenderInline\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/ducnm/Desktop/Add-on/rc365/src/Dependencies/calendar-custom/CalenderInline.tsx",
			"children": [
				{
					"id": 672,
					"name": "CalendarInline",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 710,
							"name": "SS",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"children": [
						{
							"id": 673,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 674,
									"name": "new CalendarInline",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 675,
											"name": "props",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 634,
												"name": "ICalendarInlineExampleProps"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 672,
										"name": "CalendarInline"
									},
									"overwrites": {
										"type": "reference",
										"name": "Component.__constructor"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 127,
									"character": 80
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Component.__constructor"
							}
						},
						{
							"id": 756,
							"name": "context",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\nShould be used with type annotation or static contextType.",
								"text": "```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n",
								"tags": [
									{
										"tag": "see",
										"text": "https://reactjs.org/docs/context.html\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 484,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 412,
								"name": "Component.context"
							}
						},
						{
							"id": 775,
							"name": "props",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 509,
									"character": 22
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 634,
												"name": "ICalendarInlineExampleProps"
											}
										],
										"name": "Readonly"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 776,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 777,
															"name": "children",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/react/index.d.ts",
																	"line": 509,
																	"character": 57
																}
															],
															"type": {
																"type": "reference",
																"name": "ReactNode"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																777
															]
														}
													],
													"sources": [
														{
															"fileName": "node_modules/@types/react/index.d.ts",
															"line": 509,
															"character": 47
														}
													]
												}
											}
										],
										"name": "Readonly"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 431,
								"name": "Component.props"
							}
						},
						{
							"id": 779,
							"name": "refs",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "deprecated",
										"text": "\nhttps://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 515,
									"character": 12
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 780,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExported": true
									},
									"indexSignature": [
										{
											"id": 781,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 782,
													"name": "key",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "ReactInstance"
											}
										}
									],
									"sources": [
										{
											"fileName": "node_modules/@types/react/index.d.ts",
											"line": 515,
											"character": 13
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 435,
								"name": "Component.refs"
							}
						},
						{
							"id": 778,
							"name": "state",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 510,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Readonly"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 434,
								"name": "Component.state"
							}
						},
						{
							"id": 755,
							"name": "contextType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If set, `this.context` will be set at runtime to the current value of the given Context.",
								"text": "Usage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n",
								"tags": [
									{
										"tag": "see",
										"text": "https://reactjs.org/docs/context.html#classcontexttype\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 466,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Context"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 411,
								"name": "Component.contextType"
							}
						},
						{
							"id": 735,
							"name": "UNSAFE_componentWillMount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 736,
									"name": "UNSAFE_componentWillMount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
										"text": "This method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use componentDidMount or the constructor instead"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 395,
										"name": "DeprecatedLifecycle.UNSAFE_componentWillMount"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 710,
									"character": 33
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 395,
								"name": "DeprecatedLifecycle.UNSAFE_componentWillMount"
							}
						},
						{
							"id": 741,
							"name": "UNSAFE_componentWillReceiveProps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 742,
									"name": "UNSAFE_componentWillReceiveProps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
										"text": "Calling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use static getDerivedStateFromProps instead"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 743,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 634,
														"name": "ICalendarInlineExampleProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 744,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 741,
										"name": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 742,
									"character": 40
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 741,
								"name": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps"
							}
						},
						{
							"id": 750,
							"name": "UNSAFE_componentWillUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 751,
									"name": "UNSAFE_componentWillUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
										"text": "Note: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use getSnapshotBeforeUpdate instead"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 752,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 634,
														"name": "ICalendarInlineExampleProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 753,
											"name": "nextState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 754,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 406,
										"name": "DeprecatedLifecycle.UNSAFE_componentWillUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 770,
									"character": 34
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 406,
								"name": "DeprecatedLifecycle.UNSAFE_componentWillUpdate"
							}
						},
						{
							"id": 720,
							"name": "componentDidCatch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 721,
									"name": "componentDidCatch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount."
									},
									"parameters": [
										{
											"id": 722,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 723,
											"name": "errorInfo",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ErrorInfo"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 385,
										"name": "ComponentLifecycle.componentDidCatch"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 639,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 385,
								"name": "ComponentLifecycle.componentDidCatch"
							}
						},
						{
							"id": 711,
							"name": "componentDidMount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 712,
									"name": "componentDidMount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately after a component is mounted. Setting state here will trigger re-rendering."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 376,
										"name": "ComponentLifecycle.componentDidMount"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 618,
									"character": 25
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 376,
								"name": "ComponentLifecycle.componentDidMount"
							}
						},
						{
							"id": 728,
							"name": "componentDidUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 729,
									"name": "componentDidUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately after updating occurs. Not called for the initial render.",
										"text": "The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n"
									},
									"parameters": [
										{
											"id": 730,
											"name": "prevProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 634,
														"name": "ICalendarInlineExampleProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 731,
											"name": "prevState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 732,
											"name": "snapshot",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 710,
												"name": "SS"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 555,
										"name": "NewLifecycle.componentDidUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 681,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 555,
								"name": "NewLifecycle.componentDidUpdate"
							}
						},
						{
							"id": 733,
							"name": "componentWillMount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 734,
									"name": "componentWillMount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
										"text": "Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use componentDidMount or the constructor instead; will stop working in React 17"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 393,
										"name": "DeprecatedLifecycle.componentWillMount"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 696,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 393,
								"name": "DeprecatedLifecycle.componentWillMount"
							}
						},
						{
							"id": 737,
							"name": "componentWillReceiveProps",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 738,
									"name": "componentWillReceiveProps",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
										"text": "Calling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use static getDerivedStateFromProps instead; will stop working in React 17"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 739,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 634,
														"name": "ICalendarInlineExampleProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 740,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 397,
										"name": "DeprecatedLifecycle.componentWillReceiveProps"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 725,
									"character": 33
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 397,
								"name": "DeprecatedLifecycle.componentWillReceiveProps"
							}
						},
						{
							"id": 718,
							"name": "componentWillUnmount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 719,
									"name": "componentWillUnmount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 383,
										"name": "ComponentLifecycle.componentWillUnmount"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 634,
									"character": 28
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 383,
								"name": "ComponentLifecycle.componentWillUnmount"
							}
						},
						{
							"id": 745,
							"name": "componentWillUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 746,
									"name": "componentWillUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
										"text": "Note: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
										"tags": [
											{
												"tag": "deprecated",
												"text": "16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
											},
											{
												"tag": "see",
												"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
											}
										]
									},
									"parameters": [
										{
											"id": 747,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 634,
														"name": "ICalendarInlineExampleProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 748,
											"name": "nextState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 749,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 401,
										"name": "DeprecatedLifecycle.componentWillUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 755,
									"character": 27
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 401,
								"name": "DeprecatedLifecycle.componentWillUpdate"
							}
						},
						{
							"id": 770,
							"name": "forceUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 771,
									"name": "forceUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 772,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 773,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 774,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 426,
										"name": "Component.forceUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 501,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 426,
								"name": "Component.forceUpdate"
							}
						},
						{
							"id": 688,
							"name": "getMoreDate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 689,
									"name": "getMoreDate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 690,
											"name": "start",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										},
										{
											"id": 691,
											"name": "end",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reflection",
											"declaration": {
												"id": 692,
												"name": "__type",
												"kind": 65536,
												"kindString": "Type literal",
												"flags": {},
												"children": [
													{
														"id": 693,
														"name": "date",
														"kind": 32,
														"kindString": "Variable",
														"flags": {},
														"sources": [
															{
																"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
																"line": 251,
																"character": 21
															}
														],
														"type": {
															"type": "reference",
															"name": "Date"
														},
														"defaultValue": "new Date(dt)"
													}
												],
												"groups": [
													{
														"title": "Variables",
														"kind": 32,
														"children": [
															693
														]
													}
												]
											}
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 245,
									"character": 13
								}
							]
						},
						{
							"id": 724,
							"name": "getSnapshotBeforeUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 725,
									"name": "getSnapshotBeforeUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.",
										"text": "Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n"
									},
									"parameters": [
										{
											"id": 726,
											"name": "prevProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 634,
														"name": "ICalendarInlineExampleProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 727,
											"name": "prevState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Readonly"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "typeParameter",
												"name": "SS"
											},
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 389,
										"name": "NewLifecycle.getSnapshotBeforeUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 675,
									"character": 31
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 389,
								"name": "NewLifecycle.getSnapshotBeforeUpdate"
							}
						},
						{
							"id": 698,
							"name": "goNext",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 699,
									"name": "goNext",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 700,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"children": [
												{
													"id": 701,
													"name": "goNextSelectedDate",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
															"line": 289,
															"character": 24
														}
													],
													"type": {
														"type": "reference",
														"name": "Date"
													},
													"defaultValue": "newSelectedDate"
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														701
													]
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 279,
									"character": 8
								}
							]
						},
						{
							"id": 694,
							"name": "goPrevious",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 695,
									"name": "goPrevious",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 696,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"children": [
												{
													"id": 697,
													"name": "goPreviousSelectedDate",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
															"line": 275,
															"character": 28
														}
													],
													"type": {
														"type": "reference",
														"name": "Date"
													},
													"defaultValue": "newSelectedDate"
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														697
													]
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 256,
									"character": 12
								}
							]
						},
						{
							"id": 702,
							"name": "onDismiss",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 703,
									"name": "onDismiss",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 293,
									"character": 11
								}
							]
						},
						{
							"id": 706,
							"name": "onGetMode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 707,
									"name": "onGetMode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 305,
									"character": 11
								}
							]
						},
						{
							"id": 676,
							"name": "onHighLightClass",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 677,
									"name": "onHighLightClass",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 678,
											"name": "day",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IDayInfo"
											}
										},
										{
											"id": 679,
											"name": "rangeDate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 654,
												"name": "rangeDateExample"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 140,
									"character": 18
								}
							]
						},
						{
							"id": 680,
							"name": "onSelectDate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 681,
									"name": "onSelectDate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 682,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										},
										{
											"id": 683,
											"name": "dateRangeArray",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Date"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 178,
									"character": 14
								}
							]
						},
						{
							"id": 684,
							"name": "onSelectSingleDate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 685,
									"name": "onSelectSingleDate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 686,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										},
										{
											"id": 687,
											"name": "dateRangeArray",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Date"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 235,
									"character": 20
								}
							]
						},
						{
							"id": 708,
							"name": "render",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 709,
									"name": "render",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Element"
									},
									"overwrites": {
										"type": "reference",
										"name": "Component.render"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 313,
									"character": 8
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Component.render"
							}
						},
						{
							"id": 704,
							"name": "sentDate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 705,
									"name": "sentDate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 297,
									"character": 10
								}
							]
						},
						{
							"id": 757,
							"name": "setState",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 758,
									"name": "setState",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 759,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 760,
											"name": "state",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 761,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 762,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 763,
																			"name": "prevState",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "intrinsic",
																						"name": "any"
																					}
																				],
																				"name": "Readonly"
																			}
																		},
																		{
																			"id": 764,
																			"name": "props",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "reference",
																						"id": 634,
																						"name": "ICalendarInlineExampleProps"
																					}
																				],
																				"name": "Readonly"
																			}
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "intrinsic",
																				"name": "null"
																			},
																			{
																				"type": "unknown",
																				"name": "S"
																			},
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 765,
																					"name": "__type",
																					"kind": 65536,
																					"kindString": "Type literal",
																					"flags": {}
																				}
																			}
																		]
																	}
																}
															],
															"sources": [
																{
																	"fileName": "node_modules/@types/react/index.d.ts",
																	"line": 497,
																	"character": 18
																}
															]
														}
													},
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "null"
															},
															{
																"type": "unknown",
																"name": "S"
															},
															{
																"type": "reflection",
																"declaration": {
																	"id": 766,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {}
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 767,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 768,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 769,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 413,
										"name": "Component.setState"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 496,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 413,
								"name": "Component.setState"
							}
						},
						{
							"id": 713,
							"name": "shouldComponentUpdate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 714,
									"name": "shouldComponentUpdate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called to determine whether the change in props and state should trigger a re-render.",
										"text": "`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n"
									},
									"parameters": [
										{
											"id": 715,
											"name": "nextProps",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 634,
														"name": "ICalendarInlineExampleProps"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 716,
											"name": "nextState",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Readonly"
											}
										},
										{
											"id": 717,
											"name": "nextContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 378,
										"name": "ComponentLifecycle.shouldComponentUpdate"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 629,
									"character": 29
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 378,
								"name": "ComponentLifecycle.shouldComponentUpdate"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								673
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								756,
								775,
								779,
								778,
								755
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								735,
								741,
								750,
								720,
								711,
								728,
								733,
								737,
								718,
								745,
								770,
								688,
								724,
								698,
								694,
								702,
								706,
								676,
								680,
								684,
								708,
								704,
								757,
								713
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
							"line": 127,
							"character": 20
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"typeArguments": [
								{
									"type": "reference",
									"id": 634,
									"name": "ICalendarInlineExampleProps"
								},
								{
									"type": "intrinsic",
									"name": "any"
								}
							],
							"name": "Component"
						}
					]
				},
				{
					"id": 634,
					"name": "ICalendarInlineExampleProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 636,
							"name": "autoNavigateOnSelection",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 22,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 649,
							"name": "darkMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 36,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 648,
							"name": "firstDayOfWeek",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 35,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"name": "DayOfWeek"
							}
						},
						{
							"id": 650,
							"name": "getDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 37,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 638,
							"name": "highlightCurrentMonth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 25,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 639,
							"name": "highlightSelectedMonth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 26,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 640,
							"name": "isDayPickerVisible",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 27,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 635,
							"name": "isMonthPickerVisible",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 21,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 644,
							"name": "maxDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 31,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 643,
							"name": "minDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 30,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 651,
							"name": "multilingual",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 38,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 303,
								"name": "ICalendarStrings"
							}
						},
						{
							"id": 645,
							"name": "restrictedDates",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 32,
									"character": 17
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Date"
								}
							}
						},
						{
							"id": 637,
							"name": "showGoToToday",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 23,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 641,
							"name": "showMonthPickerAsOverlay",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 28,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 646,
							"name": "showSixWeeksByDefault",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 33,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 642,
							"name": "showWeekNumbers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 29,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 653,
							"name": "switchMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 40,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 652,
							"name": "userEvent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 39,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"id": 628,
								"name": "eventExamples"
							}
						},
						{
							"id": 647,
							"name": "workWeekDays",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 34,
									"character": 14
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "DayOfWeek"
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								636,
								649,
								648,
								650,
								638,
								639,
								640,
								635,
								644,
								643,
								651,
								645,
								637,
								641,
								646,
								642,
								653,
								652,
								647
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
							"line": 20,
							"character": 44
						}
					]
				},
				{
					"id": 665,
					"name": "ICalendarPropsFixed",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 671,
							"name": "calendarData",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 124,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 666,
							"name": "onHighLight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 123,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 667,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 668,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"parameters": [
														{
															"id": 669,
															"name": "day",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "reference",
																"name": "IDayInfo"
															}
														},
														{
															"id": 670,
															"name": "rangeDate",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "reference",
																"id": 654,
																"name": "rangeDateExample"
															}
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												}
											]
										}
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								671,
								666
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
							"line": 122,
							"character": 36
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"id": 6,
							"name": "ICalendarProps"
						}
					]
				},
				{
					"id": 628,
					"name": "eventExamples",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"indexSignature": [
						{
							"id": 629,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"parameters": [
								{
									"id": 630,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 631,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 632,
											"name": "date",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
													"line": 17,
													"character": 25
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Date"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 633,
											"name": "event",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
													"line": 17,
													"character": 47
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												632,
												633
											]
										}
									],
									"sources": [
										{
											"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
											"line": 17,
											"character": 18
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
							"line": 16,
							"character": 23
						}
					]
				},
				{
					"id": 654,
					"name": "rangeDateExample",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 655,
							"name": "pickType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 114,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 656,
							"name": "rangeBetween",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 115,
									"character": 14
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reflection",
									"declaration": {
										"id": 657,
										"name": "__type",
										"kind": 65536,
										"kindString": "Type literal",
										"flags": {},
										"children": [
											{
												"id": 658,
												"name": "date",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
														"line": 115,
														"character": 22
													}
												],
												"type": {
													"type": "reference",
													"name": "Date"
												}
											}
										],
										"groups": [
											{
												"title": "Variables",
												"kind": 32,
												"children": [
													658
												]
											}
										],
										"sources": [
											{
												"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
												"line": 115,
												"character": 15
											}
										]
									}
								}
							}
						},
						{
							"id": 659,
							"name": "selectedDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 116,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Date"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 660,
							"name": "selectedDateRange",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 117,
									"character": 19
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Date"
								}
							}
						},
						{
							"id": 661,
							"name": "userEvent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 119,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reflection",
									"declaration": {
										"id": 662,
										"name": "__type",
										"kind": 65536,
										"kindString": "Type literal",
										"flags": {},
										"children": [
											{
												"id": 663,
												"name": "date",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
														"line": 119,
														"character": 19
													}
												],
												"type": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "reference",
															"name": "Date"
														}
													]
												}
											},
											{
												"id": 664,
												"name": "event",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
														"line": 119,
														"character": 41
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										],
										"groups": [
											{
												"title": "Variables",
												"kind": 32,
												"children": [
													663,
													664
												]
											}
										],
										"sources": [
											{
												"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
												"line": 119,
												"character": 12
											}
										]
									}
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								655,
								656,
								659,
								660,
								661
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
							"line": 113,
							"character": 26
						}
					]
				},
				{
					"id": 800,
					"name": "dateTimeFormatterCallbacks",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isConst": true
					},
					"children": [
						{
							"id": 809,
							"name": "formatDay",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 810,
									"name": "formatDay",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 811,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 109,
									"character": 11
								}
							]
						},
						{
							"id": 801,
							"name": "formatMonthDayYear",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 802,
									"name": "formatMonthDayYear",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 803,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										},
										{
											"id": 804,
											"name": "strings",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 303,
												"name": "ICalendarStrings"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 101,
									"character": 20
								}
							]
						},
						{
							"id": 805,
							"name": "formatMonthYear",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 806,
									"name": "formatMonthYear",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 807,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										},
										{
											"id": 808,
											"name": "strings",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 303,
												"name": "ICalendarStrings"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 107,
									"character": 17
								}
							]
						},
						{
							"id": 812,
							"name": "formatYear",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 813,
									"name": "formatYear",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 814,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 110,
									"character": 12
								}
							]
						}
					],
					"groups": [
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								809,
								801,
								805,
								812
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
							"line": 100,
							"character": 32
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 783,
					"name": "dayPickerStrings",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isConst": true
					},
					"children": [
						{
							"id": 796,
							"name": "closeButtonAriaLabel",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 90,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Close\""
						},
						{
							"id": 786,
							"name": "days",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 72,
									"character": 6
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": "[\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n  ]"
						},
						{
							"id": 788,
							"name": "goToToday",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 82,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Go to today\""
						},
						{
							"id": 784,
							"name": "months",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 44,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": "[\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ]"
						},
						{
							"id": 791,
							"name": "nextMonthAriaLabel",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 85,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Next month\""
						},
						{
							"id": 793,
							"name": "nextYearAriaLabel",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 87,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Next year\""
						},
						{
							"id": 795,
							"name": "nextYearRangeAriaLabel",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 89,
									"character": 24
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Next year range\""
						},
						{
							"id": 790,
							"name": "prevMonthAriaLabel",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 84,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Previous month\""
						},
						{
							"id": 792,
							"name": "prevYearAriaLabel",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 86,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Previous year\""
						},
						{
							"id": 794,
							"name": "prevYearRangeAriaLabel",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 88,
									"character": 24
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Previous year range\""
						},
						{
							"id": 787,
							"name": "shortDays",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 81,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": "[\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"]"
						},
						{
							"id": 785,
							"name": "shortMonths",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 58,
									"character": 13
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": "[\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mar\",\r\n    \"Apr\",\r\n    \"May\",\r\n    \"Jun\",\r\n    \"Jul\",\r\n    \"Aug\",\r\n    \"Sep\",\r\n    \"Oct\",\r\n    \"Nov\",\r\n    \"Dec\",\r\n  ]"
						},
						{
							"id": 789,
							"name": "weekNumberFormatString",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 83,
									"character": 24
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Week number {0}\""
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								796,
								786,
								788,
								784,
								791,
								793,
								795,
								790,
								792,
								794,
								787,
								785,
								789
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
							"line": 43,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 797,
					"name": "divStyle",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isConst": true
					},
					"children": [
						{
							"id": 799,
							"name": "display",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 94,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"flex\""
						},
						{
							"id": 798,
							"name": "height",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
									"line": 93,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"auto\""
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								799,
								798
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
							"line": 92,
							"character": 14
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						672
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						634,
						665,
						628,
						654
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						800,
						783,
						797
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Dependencies/calendar-custom/CalenderInline.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 621,
			"name": "\"src/Dependencies/calendar-custom/CalenderStyle\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/ducnm/Desktop/Add-on/rc365/src/Dependencies/calendar-custom/CalenderStyle.ts",
			"children": [
				{
					"id": 622,
					"name": "CalenderDarkMode",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalenderStyle.ts",
							"line": 3,
							"character": 29
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "stringLiteral",
										"value": "div"
									},
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								],
								"name": "StyledComponentBase"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 623,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExported": true
									}
								}
							}
						]
					},
					"defaultValue": "styled.div.attrs((props): any => ({\r\n  className: \"dayPicker_4cbef05b\",\r\n}))`\r\n  .ms-DatePicker-wrap{\r\n    padding: ${(props) => !props.theme.showGoToToday && \"0\"};\r\n    margin:0;\r\n  }\r\n\r\n  .goToday_4cbef05b{\r\n    right: ${(props) => props.theme.showGoToToday && \"0\"};\r\n  } \r\n  .ms-DatePicker-goToday{\r\n    color:${(props) => props.theme.darkMode === \"dark\" && \"#ffffff\"};\r\n  };\r\n  box-sizing: border-box;\r\n  .ms-DatePicker-dayPicker,\r\n  .ms-DatePicker-frame,\r\n  .ms-DatePicker-holder{\r\n    background-color: ${(props) =>\r\n      props.theme.darkMode === \"dark\" ? \"rgb(27, 26, 25)\" : \"\"};\r\n      \r\n  }\r\n  .ms-DatePicker-frame, \r\n  .wrap_4cbef05b {\r\n    min-height: 190px;\r\n  }\r\n  th,\r\n  i {\r\n    color: ${(props) =>\r\n      props.theme.darkMode === \"dark\" ? \"#ffffff\" : \"#212121\"};\r\n  }\r\n  .weekday_4cbef05b {\r\n    cursor: default;\r\n  }\r\n  .ms-DatePicker-day-button {\r\n    cursor: pointer;\r\n  }\r\n  .ms-DatePicker-monthAndYear {\r\n    width: 100%;\r\n    text-align: left;\r\n    padding: 4px 5px;\r\n  }\r\n  .js-showYearPicker {\r\n    text-align: left;\r\n  }\r\n  .ms-DatePicker-holder {\r\n    box-shadow: 0px 3px 6px rgba(0, 0, 0, 0.161);\r\n    min-height: 210px;\r\n    height:auto;\r\n    padding: 12px;\r\n  }\r\n  .dayBackground_4cbef05b {\r\n    border-radius: 0;\r\n  }\r\n  .currentYear_4cbef05b{\r\n    padding 0 5px;\r\n  }\r\n  .monthAndYear_4cbef05b{\r\n    padding:0;\r\n  }\r\n  .monthOption_4cbef05b:hover,\r\n  .yearOption_4cbef05b:hover,\r\n  .currentDecade_4cbef05b:hover,\r\n  .currentYear_4cbef05b:hover,\r\n  .monthAndYear_4cbef05b:hover,\r\n  .nextMonth_4cbef05b:hover,\r\n  .prevMonth_4cbef05b:hover,\r\n  .prevYear_4cbef05b:hover, \r\n  .nextYear_4cbef05b:hover {\r\n    border-radius: 0;\r\n    background-color: ${(props) =>\r\n      props.theme.darkMode === \"dark\" ? \"#000000\" : \"#F4F4F4\"};\r\n    color: ${(props) =>\r\n      props.theme.darkMode === \"dark\" ? \"#ffffff\" : \"#212121\"} !important;\r\n  }\r\n  .ms-DatePicker-day--highlighted.dayIsHighlighted_4cbef05b {\r\n    background-color: ${(props) =>\r\n      props.theme.darkMode === \"dark\" ? \"#445b6c\" : \"#DEECF9\"};\r\n    color: ${(props) =>\r\n      props.theme.darkMode === \"dark\" ? \"#ffffff\" : \"#212121\"};\r\n    border-radius: 0;\r\n  }\r\n  .monthIsHighlighted_4cbef05b {\r\n    background-color: ${(props) =>\r\n      props.theme.darkMode === \"dark\" ? \"#445B6C\" : \"#DEECF9\"};\r\n  }\r\n  .headerToggleView_4cbef05b,\r\n  .monthOption_4cbef05b,\r\n  .monthAndYear_4cbef05b,\r\n  .yearOption_4cbef05b,\r\n  .ms-DatePicker-day--infocus,\r\n  .headerToggleView_4cbef05b:hover {\r\n    color: ${(props) =>\r\n      props.theme.darkMode === \"dark\" ? \"#ffffff\" : \"#212121\"};\r\n  }\r\n  .dayWrapper_4cbef05b:hover {\r\n    cursor: pointer;\r\n    color: ${(props) =>\r\n      props.theme.darkMode === \"dark\" ? \"#ffffff\" : \"#212121\"};\r\n    background-color: ${(props) =>\r\n      props.theme.darkMode === \"dark\" ? \"#000000\" : \"#DEECF9\"};\r\n  }\r\n  .multiple-highlight {\r\n    background-color: ${(props) =>\r\n      props.theme.darkMode === \"dark\" ? \"#445b6c\" : \"#DEECF9\"} !important;\r\n    color: ${(props) =>\r\n      props.theme.darkMode === \"dark\" ? \"#ffffff\" : \"#212121\"};\r\n  }\r\n  .eventType1-highLight{\r\n    &:after{\r\n      content:\"\";\r\n      left:50%;\r\n      bottom:2px;\r\n      width:4px;\r\n      height:4px;\r\n      transform: translate(-50%);\r\n      position:absolute;\r\n      border-radius:50%;\r\n      background-color: #05FF00;\r\n    }\r\n  }\r\n  .eventType3-highLight{\r\n    &:after{\r\n      content:\"\";\r\n      left:50%;\r\n      bottom:2px;\r\n      width:4px;\r\n      height:4px;\r\n      transform: translate(-50%);\r\n      position:absolute;\r\n      border-radius:50%;\r\n      background-color: #FF0000;\r\n    }\r\n  }\r\n  .eventType2-highLight{\r\n    &:after{\r\n      content:\"\";\r\n      left:50%;\r\n      bottom:2px;\r\n      width:4px;\r\n      height:4px;\r\n      transform: translate(-50%);\r\n      position:absolute;\r\n      border-radius:50%;\r\n      background-color: #FFE500;\r\n    }\r\n  }\r\n  .is-checked{\r\n    .ms-Checkbox-checkmark{\r\n      color:white;\r\n    }\r\n  }\r\n  .ms-DatePicker-day.ms-DatePicker-day--today{\r\n    background-color: red;\r\n  }\r\n  .ms-DatePicker-Toggle{\r\n    .ms-Checkbox-checkbox{\r\n      border-color: ${(props) =>\r\n        props.theme.darkMode === \"dark\" ? \"#ffffff\" : \"#212121\"};\r\n    }\r\n  }\r\n`"
				},
				{
					"id": 624,
					"name": "ToggleWrapper",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/CalenderStyle.ts",
							"line": 166,
							"character": 26
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "stringLiteral",
										"value": "div"
									},
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 625,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											}
										}
									},
									{
										"type": "intrinsic",
										"name": "never"
									}
								],
								"name": "StyledComponentBase"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 626,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExported": true
									}
								}
							}
						]
					},
					"defaultValue": "styled.div`\r\n  .ms-Toggle {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    border-bottom: 1px solid;\r\n    border-color: ${(props) =>\r\n      props.theme === \"dark\" ? \"#000000\" : \"#ECECEC\"};\r\n    padding: 15px 14px 14px 12px;\r\n    background-color: ${(props) =>\r\n      props.theme === \"dark\" ? \"rgb(27, 26, 25)\" : \"\"};\r\n    margin-bottom: 0;\r\n    .ms-Label {\r\n      padding: 0;\r\n      color: ${(props) => (props.theme === \"dark\" ? \"#ffffff\" : \"#333333\")};\r\n      font-weight: normal;\r\n    }\r\n  }\r\n`"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						622,
						624
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Dependencies/calendar-custom/CalenderStyle.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1582,
			"name": "\"src/Dependencies/calendar-custom/examples/Calendar.Button.Example\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/ducnm/Desktop/Add-on/rc365/src/Dependencies/calendar-custom/examples/Calendar.Button.Example.js",
			"children": [
				{
					"id": 1597,
					"name": "calendarButtonElement",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Button.Example.js",
							"line": 35,
							"character": 25
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 1598,
					"name": "CalendarButtonExample",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1599,
							"name": "CalendarButtonExample",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"parameters": [
								{
									"id": 1600,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLElement"
											}
										],
										"name": "HTMLAttributes"
									},
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "DetailedReactHTMLElement"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Button.Example.js",
							"line": 36,
							"character": 32
						}
					]
				},
				{
					"id": 1583,
					"name": "DayPickerStrings",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {},
					"children": [
						{
							"id": 1596,
							"name": "closeButtonAriaLabel",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Button.Example.js",
									"line": 33,
									"character": 24
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Close\""
						},
						{
							"id": 1586,
							"name": "days",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Button.Example.js",
									"line": 23,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": "['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']"
						},
						{
							"id": 1588,
							"name": "goToToday",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Button.Example.js",
									"line": 25,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Go to today\""
						},
						{
							"id": 1584,
							"name": "months",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Button.Example.js",
									"line": 8,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": "[\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December',\n    ]"
						},
						{
							"id": 1591,
							"name": "nextMonthAriaLabel",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Button.Example.js",
									"line": 28,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Next month\""
						},
						{
							"id": 1593,
							"name": "nextYearAriaLabel",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Button.Example.js",
									"line": 30,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Next year\""
						},
						{
							"id": 1595,
							"name": "nextYearRangeAriaLabel",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Button.Example.js",
									"line": 32,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Next year range\""
						},
						{
							"id": 1590,
							"name": "prevMonthAriaLabel",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Button.Example.js",
									"line": 27,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Previous month\""
						},
						{
							"id": 1592,
							"name": "prevYearAriaLabel",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Button.Example.js",
									"line": 29,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Previous year\""
						},
						{
							"id": 1594,
							"name": "prevYearRangeAriaLabel",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Button.Example.js",
									"line": 31,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Previous year range\""
						},
						{
							"id": 1587,
							"name": "shortDays",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Button.Example.js",
									"line": 24,
									"character": 13
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": "['S', 'M', 'T', 'W', 'T', 'F', 'S']"
						},
						{
							"id": 1585,
							"name": "shortMonths",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Button.Example.js",
									"line": 22,
									"character": 15
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": "['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']"
						},
						{
							"id": 1589,
							"name": "weekNumberFormatString",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Button.Example.js",
									"line": 26,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Week number {0}\""
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								1596,
								1586,
								1588,
								1584,
								1591,
								1593,
								1595,
								1590,
								1592,
								1594,
								1587,
								1585,
								1589
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Button.Example.js",
							"line": 7,
							"character": 20
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1597
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1598
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						1583
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Button.Example.js",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1015,
			"name": "\"src/Dependencies/calendar-custom/examples/Calendar.Button.Example.d\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/ducnm/Desktop/Add-on/rc365/src/Dependencies/calendar-custom/examples/Calendar.Button.Example.d.ts",
			"children": [
				{
					"id": 1016,
					"name": "ICalendarButtonExampleProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1021,
							"name": "buttonString",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Button.Example.d.ts",
									"line": 7,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1019,
							"name": "highlightCurrentMonth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Button.Example.d.ts",
									"line": 5,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 1020,
							"name": "highlightSelectedMonth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Button.Example.d.ts",
									"line": 6,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 1017,
							"name": "isDayPickerVisible",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Button.Example.d.ts",
									"line": 3,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 1018,
							"name": "isMonthPickerVisible",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Button.Example.d.ts",
									"line": 4,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 1023,
							"name": "showGoToToday",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Button.Example.d.ts",
									"line": 9,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 1022,
							"name": "showMonthPickerAsOverlay",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Button.Example.d.ts",
									"line": 8,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1021,
								1019,
								1020,
								1017,
								1018,
								1023,
								1022
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Button.Example.d.ts",
							"line": 2,
							"character": 44
						}
					]
				},
				{
					"id": 1024,
					"name": "CalendarButtonExample",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Button.Example.d.ts",
							"line": 11,
							"character": 42
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 1016,
								"name": "ICalendarButtonExampleProps"
							}
						],
						"name": "FunctionComponent"
					}
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1016
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1024
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Button.Example.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1601,
			"name": "\"src/Dependencies/calendar-custom/examples/Calendar.Inline.Example\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/ducnm/Desktop/Add-on/rc365/src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.js",
			"children": [
				{
					"id": 1620,
					"name": "dateRangeString",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.js",
							"line": 39,
							"character": 19
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"defaultValue": "null"
				},
				{
					"id": 1621,
					"name": "CalendarInlineExample",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1622,
							"name": "CalendarInlineExample",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"parameters": [
								{
									"id": 1623,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 1624,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"children": [
												{
													"id": 1625,
													"name": "style",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.js",
															"line": 77,
															"character": 46
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1626,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {
																"isExported": true
															},
															"children": [
																{
																	"id": 1627,
																	"name": "height",
																	"kind": 32,
																	"kindString": "Variable",
																	"flags": {
																		"isExported": true
																	},
																	"sources": [
																		{
																			"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.js",
																			"line": 34,
																			"character": 10
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	},
																	"defaultValue": "\"auto\""
																}
															],
															"groups": [
																{
																	"title": "Variables",
																	"kind": 32,
																	"children": [
																		1627
																	]
																}
															]
														}
													},
													"defaultValue": "divStyle"
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														1625
													]
												}
											]
										}
									},
									{
										"type": "reference",
										"name": "HTMLElement"
									}
								],
								"name": "DetailedReactHTMLElement"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.js",
							"line": 40,
							"character": 32
						}
					]
				},
				{
					"id": 1618,
					"name": "buttonStyle",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {},
					"children": [
						{
							"id": 1619,
							"name": "margin",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.js",
									"line": 37,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"17px 10px 0 0\""
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								1619
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.js",
							"line": 36,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 1602,
					"name": "dayPickerStrings",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {},
					"children": [
						{
							"id": 1615,
							"name": "closeButtonAriaLabel",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.js",
									"line": 31,
									"character": 24
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Close\""
						},
						{
							"id": 1605,
							"name": "days",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.js",
									"line": 21,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": "['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']"
						},
						{
							"id": 1607,
							"name": "goToToday",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.js",
									"line": 23,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Go to today\""
						},
						{
							"id": 1603,
							"name": "months",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.js",
									"line": 6,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": "[\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December',\n    ]"
						},
						{
							"id": 1610,
							"name": "nextMonthAriaLabel",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.js",
									"line": 26,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Next month\""
						},
						{
							"id": 1612,
							"name": "nextYearAriaLabel",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.js",
									"line": 28,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Next year\""
						},
						{
							"id": 1614,
							"name": "nextYearRangeAriaLabel",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.js",
									"line": 30,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Next year range\""
						},
						{
							"id": 1609,
							"name": "prevMonthAriaLabel",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.js",
									"line": 25,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Previous month\""
						},
						{
							"id": 1611,
							"name": "prevYearAriaLabel",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.js",
									"line": 27,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Previous year\""
						},
						{
							"id": 1613,
							"name": "prevYearRangeAriaLabel",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.js",
									"line": 29,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Previous year range\""
						},
						{
							"id": 1606,
							"name": "shortDays",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.js",
									"line": 22,
									"character": 13
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": "['S', 'M', 'T', 'W', 'T', 'F', 'S']"
						},
						{
							"id": 1604,
							"name": "shortMonths",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.js",
									"line": 20,
									"character": 15
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": "['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']"
						},
						{
							"id": 1608,
							"name": "weekNumberFormatString",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.js",
									"line": 24,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"Week number {0}\""
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								1615,
								1605,
								1607,
								1603,
								1610,
								1612,
								1614,
								1609,
								1611,
								1613,
								1606,
								1604,
								1608
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.js",
							"line": 5,
							"character": 20
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 1616,
					"name": "divStyle",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {},
					"children": [
						{
							"id": 1617,
							"name": "height",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.js",
									"line": 34,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"auto\""
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								1617
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.js",
							"line": 33,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1620
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1621
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						1618,
						1602,
						1616
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.js",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1025,
			"name": "\"src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.d\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/ducnm/Desktop/Add-on/rc365/src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.d.ts",
			"children": [
				{
					"id": 1026,
					"name": "ICalendarInlineExampleProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1029,
							"name": "autoNavigateOnSelection",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.d.ts",
									"line": 6,
									"character": 27
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1028,
							"name": "dateRangeType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.d.ts",
									"line": 5,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "DateRangeType"
							}
						},
						{
							"id": 1042,
							"name": "firstDayOfWeek",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.d.ts",
									"line": 19,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "DayOfWeek"
							}
						},
						{
							"id": 1032,
							"name": "highlightCurrentMonth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.d.ts",
									"line": 9,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 1033,
							"name": "highlightSelectedMonth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.d.ts",
									"line": 10,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 1034,
							"name": "isDayPickerVisible",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.d.ts",
									"line": 11,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 1027,
							"name": "isMonthPickerVisible",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.d.ts",
									"line": 4,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 1038,
							"name": "maxDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.d.ts",
									"line": 15,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 1037,
							"name": "minDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.d.ts",
									"line": 14,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 1039,
							"name": "restrictedDates",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.d.ts",
									"line": 16,
									"character": 19
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Date"
								}
							}
						},
						{
							"id": 1030,
							"name": "showGoToToday",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.d.ts",
									"line": 7,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1035,
							"name": "showMonthPickerAsOverlay",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.d.ts",
									"line": 12,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 1031,
							"name": "showNavigateButtons",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.d.ts",
									"line": 8,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 1040,
							"name": "showSixWeeksByDefault",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.d.ts",
									"line": 17,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 1036,
							"name": "showWeekNumbers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.d.ts",
									"line": 13,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 1041,
							"name": "workWeekDays",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.d.ts",
									"line": 18,
									"character": 16
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "DayOfWeek"
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1029,
								1028,
								1042,
								1032,
								1033,
								1034,
								1027,
								1038,
								1037,
								1039,
								1030,
								1035,
								1031,
								1040,
								1036,
								1041
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.d.ts",
							"line": 3,
							"character": 44
						}
					]
				},
				{
					"id": 1043,
					"name": "CalendarInlineExample",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.d.ts",
							"line": 21,
							"character": 42
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 1026,
								"name": "ICalendarInlineExampleProps"
							}
						],
						"name": "FunctionComponent"
					}
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1026
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1043
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Dependencies/calendar-custom/examples/Calendar.Inline.Example.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1628,
			"name": "\"src/Dependencies/calendar-custom/index\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/ducnm/Desktop/Add-on/rc365/src/Dependencies/calendar-custom/index.js",
			"children": [
				{
					"id": 1630,
					"name": "Calendar",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {
						"isExported": true
					},
					"target": 347
				},
				{
					"id": 1631,
					"name": "ICalendar",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {
						"isExported": true
					},
					"target": 2
				},
				{
					"id": 1635,
					"name": "ICalendarFormatDateCallbacks",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {
						"isExported": true
					},
					"target": 321
				},
				{
					"id": 1634,
					"name": "ICalendarIconStrings",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {
						"isExported": true
					},
					"target": 317
				},
				{
					"id": 1636,
					"name": "ICalendarInlineExampleProps",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {
						"isExported": true
					},
					"target": 634
				},
				{
					"id": 1632,
					"name": "ICalendarProps",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {
						"isExported": true
					},
					"target": 6
				},
				{
					"id": 1637,
					"name": "ICalendarPropsFixed",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {
						"isExported": true
					},
					"target": 665
				},
				{
					"id": 1629,
					"name": "ICalendarState",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {
						"isExported": true
					},
					"target": 341
				},
				{
					"id": 1633,
					"name": "ICalendarStrings",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {
						"isExported": true
					},
					"target": 303
				}
			],
			"groups": [
				{
					"title": "References",
					"kind": 16777216,
					"children": [
						1630,
						1631,
						1635,
						1634,
						1636,
						1632,
						1637,
						1629,
						1633
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Dependencies/calendar-custom/index.js",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 606,
			"name": "\"src/Dependencies/calendar-custom/index.d\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/ducnm/Desktop/Add-on/rc365/src/Dependencies/calendar-custom/index.d.ts",
			"children": [
				{
					"id": 608,
					"name": "Calendar",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {
						"isExported": true
					},
					"target": 347
				},
				{
					"id": 618,
					"name": "CalendarDay",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {
						"isExported": true
					},
					"target": 497
				},
				{
					"id": 609,
					"name": "ICalendar",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {
						"isExported": true
					},
					"target": 2
				},
				{
					"id": 615,
					"name": "ICalendarDay",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {
						"isExported": true
					},
					"target": 452
				},
				{
					"id": 616,
					"name": "ICalendarDayProps",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {
						"isExported": true
					},
					"target": 455
				},
				{
					"id": 617,
					"name": "ICalendarDayState",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {
						"isExported": true
					},
					"target": 494
				},
				{
					"id": 613,
					"name": "ICalendarFormatDateCallbacks",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {
						"isExported": true
					},
					"target": 321
				},
				{
					"id": 612,
					"name": "ICalendarIconStrings",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {
						"isExported": true
					},
					"target": 317
				},
				{
					"id": 619,
					"name": "ICalendarInlineExampleProps",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {
						"isExported": true
					},
					"target": 634
				},
				{
					"id": 610,
					"name": "ICalendarProps",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {
						"isExported": true
					},
					"target": 6
				},
				{
					"id": 620,
					"name": "ICalendarPropsFixed",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {
						"isExported": true
					},
					"target": 665
				},
				{
					"id": 607,
					"name": "ICalendarState",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {
						"isExported": true
					},
					"target": 341
				},
				{
					"id": 611,
					"name": "ICalendarStrings",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {
						"isExported": true
					},
					"target": 303
				},
				{
					"id": 614,
					"name": "IDayInfo",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {
						"isExported": true
					},
					"target": 440
				}
			],
			"groups": [
				{
					"title": "References",
					"kind": 16777216,
					"children": [
						608,
						618,
						609,
						615,
						616,
						617,
						613,
						612,
						619,
						610,
						620,
						607,
						611,
						614
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Dependencies/calendar-custom/index.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1663,
			"name": "\"src/index\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/ducnm/Desktop/Add-on/rc365/src/index.tsx",
			"sources": [
				{
					"fileName": "src/index.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1664,
			"name": "\"src/react-app-env.d\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/ducnm/Desktop/Add-on/rc365/src/react-app-env.d.ts",
			"sources": [
				{
					"fileName": "src/react-app-env.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1638,
			"name": "\"src/serviceWorker\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/ducnm/Desktop/Add-on/rc365/src/serviceWorker.ts",
			"children": [
				{
					"id": 1640,
					"name": "Config",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/serviceWorker.ts",
							"line": 23,
							"character": 11
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1641,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 1642,
									"name": "onSuccess",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "src/serviceWorker.ts",
											"line": 24,
											"character": 11
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 1643,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1644,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1645,
																	"name": "registration",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "ServiceWorkerRegistration"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"id": 1646,
									"name": "onUpdate",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "src/serviceWorker.ts",
											"line": 25,
											"character": 10
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 1647,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1648,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1649,
																	"name": "registration",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "ServiceWorkerRegistration"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										]
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1642,
										1646
									]
								}
							],
							"sources": [
								{
									"fileName": "src/serviceWorker.ts",
									"line": 23,
									"character": 13
								}
							]
						}
					}
				},
				{
					"id": 1639,
					"name": "isLocalhost",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/serviceWorker.ts",
							"line": 13,
							"character": 17
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)"
				},
				{
					"id": 1657,
					"name": "checkValidServiceWorker",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1658,
							"name": "checkValidServiceWorker",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1659,
									"name": "swUrl",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1660,
									"name": "config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"id": 1640,
										"name": "Config"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/serviceWorker.ts",
							"line": 109,
							"character": 32
						}
					]
				},
				{
					"id": 1650,
					"name": "register",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1651,
							"name": "register",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"parameters": [
								{
									"id": 1652,
									"name": "config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"id": 1640,
										"name": "Config"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/serviceWorker.ts",
							"line": 28,
							"character": 24
						}
					]
				},
				{
					"id": 1653,
					"name": "registerValidSW",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 1654,
							"name": "registerValidSW",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1655,
									"name": "swUrl",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1656,
									"name": "config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"id": 1640,
										"name": "Config"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/serviceWorker.ts",
							"line": 65,
							"character": 24
						}
					]
				},
				{
					"id": 1661,
					"name": "unregister",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1662,
							"name": "unregister",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/serviceWorker.ts",
							"line": 139,
							"character": 26
						}
					]
				}
			],
			"groups": [
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						1640
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1639
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1657,
						1650,
						1653,
						1661
					]
				}
			],
			"sources": [
				{
					"fileName": "src/serviceWorker.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1665,
			"name": "\"src/setupTests\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/ducnm/Desktop/Add-on/rc365/src/setupTests.ts",
			"sources": [
				{
					"fileName": "src/setupTests.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "Modules",
			"kind": 1,
			"children": [
				815,
				818,
				825,
				819,
				1283,
				340,
				1044,
				1013,
				1309,
				1198,
				1394,
				1,
				1395,
				439,
				1560,
				1067,
				1564,
				1399,
				627,
				621,
				1582,
				1015,
				1601,
				1025,
				1628,
				606,
				1663,
				1664,
				1638,
				1665
			]
		}
	]
}