{"version":3,"file":"ContextualMenuItem.base.js","sourceRoot":"../src/","sources":["components/ContextualMenu/ContextualMenuItem.base.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,UAAU,EAAE,YAAY,EAAE,MAAM,sCAAsC,CAAC;AAChF,OAAO,EAAE,MAAM,EAAE,sBAAsB,EAAE,MAAM,iBAAiB,CAAC;AACjE,OAAO,EAAE,IAAI,EAAE,MAAM,YAAY,CAAC;AAGlC,IAAM,cAAc,GAAG,UAAC,KAA+B;IAC7C,IAAA,iBAAI,EAAE,yBAAQ,EAAE,6BAAU,CAAW;IAErC,IAAA,0BAAS,CAAU;IAE3B,IAAI,CAAC,QAAQ,EAAE;QACb,OAAO,IAAI,CAAC;KACb;IAED,IAAI,IAAI,CAAC,YAAY,EAAE;QACrB,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;KACjC;IAED,OAAO,oBAAC,IAAI,eAAK,SAAS,IAAE,SAAS,EAAE,UAAU,CAAC,IAAI,IAAI,CAAC;AAC7D,CAAC,CAAC;AAEF,IAAM,mBAAmB,GAAG,UAAC,EAAgE;QAA9D,sCAAgB,EAAE,cAAI,EAAE,0BAAU;IAC/D,IAAM,aAAa,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;IACzC,IAAI,gBAAgB,EAAE;QACpB,yFAAyF;QACzF,IAAM,OAAO,GAAG,UAAC,CAAgC,IAAK,OAAA,gBAAgB,CAAC,IAAI,EAAE,CAAC,CAAC,EAAzB,CAAyB,CAAC;QAEhF,OAAO,CACL,oBAAC,IAAI,IACH,QAAQ,EAAE,IAAI,CAAC,QAAQ,KAAK,KAAK,IAAI,aAAa,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,EACrE,SAAS,EAAE,UAAU,CAAC,aAAa,EACnC,OAAO,EAAE,OAAO,GAChB,CACH,CAAC;KACH;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,IAAM,cAAc,GAAG,UAAC,EAA8C;QAA5C,cAAI,EAAE,0BAAU;IACxC,6BAA6B;IAC7B,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE;QAC1B,OAAO,8BAAM,SAAS,EAAE,UAAU,CAAC,KAAK,IAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAQ,CAAC;KAC3E;IACD,4BAA4B;IAC5B,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,IAAM,mBAAmB,GAAG,UAAC,EAA8C;QAA5C,cAAI,EAAE,0BAAU;IAC7C,IAAI,IAAI,CAAC,aAAa,EAAE;QACtB,OAAO,8BAAM,SAAS,EAAE,UAAU,CAAC,aAAa,IAAG,IAAI,CAAC,aAAa,CAAQ,CAAC;KAC/E;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,IAAM,iBAAiB,GAAG,UAAC,EAAqD;QAAnD,cAAI,EAAE,0BAAU,EAAE,gBAAK;IAClD,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE;QACpB,OAAO,CACL,oBAAC,IAAI,aACH,QAAQ,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,cAAc,IACpD,IAAI,CAAC,gBAAgB,IACzB,SAAS,EAAE,UAAU,CAAC,WAAW,IACjC,CACH,CAAC;KACH;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF;IAA4C,0CAA6C;IACvF,gCAAY,KAA+B;QAA3C,YACE,kBAAM,KAAK,CAAC,SAGb;QAgBM,iBAAW,GAAG;YACb,IAAA,gBAAoD,EAAlD,cAAI,EAAE,4BAAW,EAAE,sCAA+B,CAAC;YAC3D,IAAI,gBAAgB,EAAE;gBACpB,IAAM,aAAa,GAAG,gBAAgB,EAAE,CAAC;gBACzC,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,WAAW,IAAI,aAAa,EAAE;oBACpD,WAAW,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;iBAClC;aACF;QACH,CAAC,CAAC;QAEK,oBAAc,GAAG;YAChB,IAAA,gBAAqC,EAAnC,cAAI,EAAE,kCAA6B,CAAC;YAC5C,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,cAAc,EAAE;gBACtC,cAAc,EAAE,CAAC;aAClB;QACH,CAAC,CAAC;QAEK,iBAAW,GAAG,UAAC,UAAoB;YAChC,IAAA,qCAAW,CAAgB;YACnC,IAAI,WAAW,EAAE;gBACf,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;aAC7C;QACH,CAAC,CAAC;QAvCA,sBAAsB,CAAC,KAAI,CAAC,CAAC;;IAC/B,CAAC;IAEM,uCAAM,GAAb;QACQ,IAAA,eAAiC,EAA/B,cAAI,EAAE,0BAAyB,CAAC;QAExC,OAAO,CACL,6BAAK,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC,UAAU,CAAC,WAAW;YAC7E,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC;YAC/B,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC;YAC1B,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC;YAC1B,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC;YAC/B,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAC1B,CACP,CAAC;IACJ,CAAC;IAyBH,6BAAC;AAAD,CAAC,AA5CD,CAA4C,KAAK,CAAC,SAAS,GA4C1D","sourcesContent":["import * as React from 'react';\nimport { hasSubmenu, getIsChecked } from '../../utilities/contextualMenu/index';\nimport { getRTL, initializeComponentRef } from '../../Utilities';\nimport { Icon } from '../../Icon';\nimport { IContextualMenuItemProps } from './ContextualMenuItem.types';\n\nconst renderItemIcon = (props: IContextualMenuItemProps) => {\n  const { item, hasIcons, classNames } = props;\n\n  const { iconProps } = item;\n\n  if (!hasIcons) {\n    return null;\n  }\n\n  if (item.onRenderIcon) {\n    return item.onRenderIcon(props);\n  }\n\n  return <Icon {...iconProps} className={classNames.icon} />;\n};\n\nconst renderCheckMarkIcon = ({ onCheckmarkClick, item, classNames }: IContextualMenuItemProps) => {\n  const isItemChecked = getIsChecked(item);\n  if (onCheckmarkClick) {\n    // Ensures that the item is passed as the first argument to the checkmark click callback.\n    const onClick = (e: React.MouseEvent<HTMLElement>) => onCheckmarkClick(item, e);\n\n    return (\n      <Icon\n        iconName={item.canCheck !== false && isItemChecked ? 'CheckMark' : ''}\n        className={classNames.checkmarkIcon}\n        onClick={onClick}\n      />\n    );\n  }\n  return null;\n};\n\nconst renderItemName = ({ item, classNames }: IContextualMenuItemProps) => {\n  // tslint:disable:deprecation\n  if (item.text || item.name) {\n    return <span className={classNames.label}>{item.text || item.name}</span>;\n  }\n  // tslint:enable:deprecation\n  return null;\n};\n\nconst renderSecondaryText = ({ item, classNames }: IContextualMenuItemProps) => {\n  if (item.secondaryText) {\n    return <span className={classNames.secondaryText}>{item.secondaryText}</span>;\n  }\n  return null;\n};\n\nconst renderSubMenuIcon = ({ item, classNames, theme }: IContextualMenuItemProps) => {\n  if (hasSubmenu(item)) {\n    return (\n      <Icon\n        iconName={getRTL(theme) ? 'ChevronLeft' : 'ChevronRight'}\n        {...item.submenuIconProps}\n        className={classNames.subMenuIcon}\n      />\n    );\n  }\n  return null;\n};\n\nexport class ContextualMenuItemBase extends React.Component<IContextualMenuItemProps, {}> {\n  constructor(props: IContextualMenuItemProps) {\n    super(props);\n\n    initializeComponentRef(this);\n  }\n\n  public render() {\n    const { item, classNames } = this.props;\n\n    return (\n      <div className={item.split ? classNames.linkContentMenu : classNames.linkContent}>\n        {renderCheckMarkIcon(this.props)}\n        {renderItemIcon(this.props)}\n        {renderItemName(this.props)}\n        {renderSecondaryText(this.props)}\n        {renderSubMenuIcon(this.props)}\n      </div>\n    );\n  }\n\n  public openSubMenu = (): void => {\n    const { item, openSubMenu, getSubmenuTarget } = this.props;\n    if (getSubmenuTarget) {\n      const submenuTarget = getSubmenuTarget();\n      if (hasSubmenu(item) && openSubMenu && submenuTarget) {\n        openSubMenu(item, submenuTarget);\n      }\n    }\n  };\n\n  public dismissSubMenu = (): void => {\n    const { item, dismissSubMenu } = this.props;\n    if (hasSubmenu(item) && dismissSubMenu) {\n      dismissSubMenu();\n    }\n  };\n\n  public dismissMenu = (dismissAll?: boolean): void => {\n    const { dismissMenu } = this.props;\n    if (dismissMenu) {\n      dismissMenu(undefined /* ev */, dismissAll);\n    }\n  };\n}\n"]}